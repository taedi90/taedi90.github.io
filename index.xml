<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Taedi's Log</title><link>https://log.taedi.net/</link><description>Recent content on Taedi's Log</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Dec 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://log.taedi.net/index.xml" rel="self" type="application/rss+xml"/><item><title>팀 프로젝트 회고 - 7.Flow(주문 &amp; 결제)</title><link>https://log.taedi.net/yi-teamproject-log-7/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-7/</guid><description>1. Flow 1-1. 주문하기 1-2. 주문 확인 2. 구현 Idea 2-1. 주문 대기열 삭제 주기 결제가 완료되지 않은 주문 대기열 매일 자정마다 삭제 (주문상품, 주문 릴레이션) 진행중인 주문이 삭제되는 경우 고려해야함 11시 55분에 작성한 주문 대기열이 바로 삭제되는 불상사도 고려해야함 → 자정마다 2일 이상 지난 미결제 대기열 삭제
2-2. 주문 진행 상태 구분 주문번호가 일치하는 각 주문상품들의 상태를 보고 판단
결제 대기 - 주문 튜플은 있으나 결제 내역이 없다.</description><category>log</category></item><item><title>팀 프로젝트 회고 - 6.Flow(배송비)</title><link>https://log.taedi.net/yi-teamproject-log-6/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-6/</guid><description>0. 전제 조건 배송비는 발송 운임과 반송 운임으로 구분하며, 상품과 동일하게 취급한다. 발송 운임은 주문 당 1개를 초과할 수 없다. 반송 운임은 경우에 따라 중복 부과될 수 있다. 배송비는 편도 2,500원 왕복 5,000원으로 책정한다. 정가기준 50,000원 이상 구매 시 발송 운임은 판매자가 부담한다. 취소 반품 시, 배송비 아이템은 제외하고 계산한다. ex) 상품 A 10,000원 + 상품 B 15,000원 + 발송 운임 2,500원 = 합 27,500원 단순변심 반품 시 주문에 반송 운임 아이템 추가 운임 5,000원을 제외한 22,500원 환불 1.</description><category>log</category></item><item><title>팀 프로젝트 회고 - 5.Flow(회원가입&amp;로그인)</title><link>https://log.taedi.net/yi-teamproject-log-5/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-5/</guid><description>1. Flow 1-1. 회원가입 1-1-1. 회원가입(일반) 1-1-2. 회원가입(oAuth) 1-2. 로그인 1-3. 비밀번호 초기화(일반회원) 아이디 &amp;amp; 이메일 입력 → (server) 일치 확인 → (server) 임시 비밀번호 저장 및 메일 발송 → 로그인 시 비밀번호 변경 안내 띄우기
2. 구현 Idea 회원가입(일반) 가입신청 → 약관 동의 → 정보입력 → 이메일 확인(session? table) → 가입 완료
이메일 링크에 아이디를 암호화한 주소를 줘서 해당 주소로 접속하면 확인 되는 걸로 하기
회원가입(oAuth) 가입신청 → 구글 로그인 및 정보 제공 동의 → (약관 동의) → 가입 완료</description><category>log</category></item><item><title>Spring Mybatis 페이징 처리</title><link>https://log.taedi.net/spring-mybatis-paging/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/spring-mybatis-paging/</guid><description>마이바티스 환경에서 페이징 처리를 편리하게 하기 위한 방법을 고민하다 Pager 클래스를 활용하여 여러 페이지에서 공통적으로 사용할 수 있는 방법을 생각해보았다.
코드 Pager 클래스 생성 client 요청의 파라미터, db 조회 결과, view에 전달할 정보를 운반할 클래스를 생성한다. 테이블마다 추가로 필요한 속성이 있을 경우 상속을 받아 사용하였다.
import lombok.AllArgsConstructor; import lombok.Builder; import lombok.Data; /** * 페이징 처리를 위한 Pager 클래스 * * @author taedi */ @Data @Builder @AllArgsConstructor public class Pager { //client 요청 값 private int pageNo; //페이지 번호 private int amount; //한 페이지에 표시할 레코드 수 private String category; //카테고리 private String keyword; //검색 키워드 private String order; //정렬 순서 //server 설정 private int linkCount; //하단 링크에 표시할 페이지 수 //DB 조회 결과 private int startRecord; // 페이지 시작 레코드(인덱스) private int totalRecords; //전체 레코드 수 private int finalPageNo; //끝 페이지 번호 private int startPage; //페이지 링크 시작 번호 private int endPage; //페이지 링크 종료 번호 private int prev; //이전 버튼에 부여할 페이지 번호 private int next; //다음 버튼에 부여할 페이지 번호 private Object records; //게시물을 담을 객체 //별도 지정하지 않았을 경우의 기본 값 public Pager() { this.</description><category>Mybatis</category><category>Spring</category></item><item><title>팀 프로젝트 회고 - 4.DB</title><link>https://log.taedi.net/yi-teamproject-log-4/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-4/</guid><description>프로젝트를 진행하면서 가장 찾기 어려웠던 자료가 DB 구조에 대한 부분이었다. 정답이 명확하지도 않거니와 실제 서비스라면 핵심적인 로직이 드러날 수도 있는 부분이라 자료가 크게 없지 않을까 개인적으로 생각해보았다. 그리고 DB를 구현하기 위해서 Flow가 선행되어야 함을 느꼈고 두 과정을 병행하여 진행했던 기억이 있다.
1. DB 초기부터 제품 교환에 대한 부분은 고려하지 않았고 논리적인 오류는 그때그때 수정하여 나온 결과지만 여기저기 미흡한 부분이 있을 수 있다.
1-1. ERD 1-2.DDL -- project DROP SCHEMA IF EXISTS `project`; -- project CREATE SCHEMA `project`; USE `project`; CREATE TABLE carrier ( carrier_no int AUTO_INCREMENT COMMENT &amp;#39;택배사 코드&amp;#39; PRIMARY KEY, name varchar(100) NULL COMMENT &amp;#39;택배사 명&amp;#39;, biz_no char(10) NULL COMMENT &amp;#39;사업자번호&amp;#39; ) COMMENT &amp;#39;택배사&amp;#39;; CREATE TABLE category ( category_no int AUTO_INCREMENT COMMENT &amp;#39;카테고리 번호&amp;#39; PRIMARY KEY, title varchar(100) NULL COMMENT &amp;#39;카테고리 명&amp;#39; ) COMMENT &amp;#39;카테고리&amp;#39;; CREATE TABLE coupon ( coupon_no int AUTO_INCREMENT COMMENT &amp;#39;쿠폰번호&amp;#39; PRIMARY KEY, name varchar(100) NULL COMMENT &amp;#39;쿠폰명&amp;#39;, amount int NULL COMMENT &amp;#39;정액할인&amp;#39;, min_price int NULL COMMENT &amp;#39;제품하한가&amp;#39;, percent decimal(3, 2) NULL COMMENT &amp;#39;정률할인&amp;#39;, max_discount int NULL COMMENT &amp;#39;할인상한가&amp;#39;, validity int NULL COMMENT &amp;#39;유효기간&amp;#39; ) COMMENT &amp;#39;쿠폰&amp;#39;; CREATE TABLE keyword_history ( field varchar(100) NULL COMMENT &amp;#39;검색자&amp;#39;, keyword varchar(5000) NULL COMMENT &amp;#39;키워드&amp;#39;, reg_date timestamp NULL COMMENT &amp;#39;검색일자&amp;#39; ) COMMENT &amp;#39;검색키워드&amp;#39;; CREATE TABLE member ( username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39; PRIMARY KEY, password varchar(500) NOT NULL COMMENT &amp;#39;비밀번호&amp;#39;, name varchar(100) NOT NULL COMMENT &amp;#39;이름&amp;#39;, email varchar(200) NOT NULL COMMENT &amp;#39;이메일&amp;#39;, email_confirm tinyint(1) DEFAULT &amp;#39;0&amp;#39; NOT NULL COMMENT &amp;#39;이메일 본인확인&amp;#39;, phone char(11) NULL COMMENT &amp;#39;휴대폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;생성일자&amp;#39;, withdrawal_date timestamp NULL COMMENT &amp;#39;탈퇴일자&amp;#39;, social tinyint(1) NOT NULL COMMENT &amp;#39;소셜회원 여부&amp;#39;, temp_pass tinyint(1) DEFAULT &amp;#39;0&amp;#39; NULL COMMENT &amp;#39;임시비밀번호여부&amp;#39;, enabled tinyint(1) DEFAULT &amp;#39;1&amp;#39; NOT NULL COMMENT &amp;#39;활성화 상태&amp;#39; ) COMMENT &amp;#39;회원&amp;#39;; CREATE TABLE auth ( username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, authority varchar(50) NOT NULL COMMENT &amp;#39;권한&amp;#39;, PRIMARY KEY (username, authority), CONSTRAINT fk_member_to_auth FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;권한&amp;#39;; CREATE TABLE persistent_logins ( username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, series varchar(64) NOT NULL COMMENT &amp;#39;시리즈&amp;#39; PRIMARY KEY, token varchar(64) NOT NULL COMMENT &amp;#39;토큰&amp;#39;, last_used timestamp NOT NULL COMMENT &amp;#39;마지막 사용&amp;#39; ) COMMENT &amp;#39;자동 로그인&amp;#39;; CREATE TABLE address ( username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;배송지별칭&amp;#39;, zipcode char(5) NULL COMMENT &amp;#39;우편번호&amp;#39;, address1 varchar(500) NULL COMMENT &amp;#39;주소 앞&amp;#39;, address2 varchar(500) NULL COMMENT &amp;#39;주소 상세&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;받는분&amp;#39;, phone char(11) NULL COMMENT &amp;#39;휴대폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;등록일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, CONSTRAINT fk_member_to_address FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;주소&amp;#39;; CREATE TABLE coupon_history ( issue_number bigint AUTO_INCREMENT COMMENT &amp;#39;쿠폰발급번호&amp;#39;, coupon_no int NOT NULL COMMENT &amp;#39;쿠폰번호&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;발급일자&amp;#39;, expire_date timestamp NULL COMMENT &amp;#39;만료일자&amp;#39;, use_date timestamp NULL COMMENT &amp;#39;사용일자&amp;#39;, use_order bigint NULL COMMENT &amp;#39;사용주문&amp;#39;, PRIMARY KEY (issue_number, coupon_no, username), CONSTRAINT fk_coupon_to_coupon_history FOREIGN KEY (coupon_no) REFERENCES coupon (coupon_no), CONSTRAINT fk_member_to_coupon_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;쿠폰발급이력&amp;#39;; CREATE TABLE non_member ( non_username varchar(100) NOT NULL COMMENT &amp;#39;임시아이디&amp;#39; PRIMARY KEY, password varchar(500) NULL COMMENT &amp;#39;주문확인비번&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;이름&amp;#39;, email varchar(200) NULL COMMENT &amp;#39;이메일&amp;#39;, phone char(11) NULL COMMENT &amp;#39;핸드폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;등록일자&amp;#39; ) COMMENT &amp;#39;비회원&amp;#39;; CREATE TABLE `order` ( order_no bigint NOT NULL COMMENT &amp;#39;주문번호&amp;#39; PRIMARY KEY, username varchar(100) NULL COMMENT &amp;#39;회원아이디&amp;#39;, non_username varchar(100) NULL COMMENT &amp;#39;비회원아이디&amp;#39;, zipcode char(5) NULL COMMENT &amp;#39;우편번호&amp;#39;, address1 varchar(500) NULL COMMENT &amp;#39;주소 앞&amp;#39;, address2 varchar(500) NULL COMMENT &amp;#39;주소 상세&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;받는분&amp;#39;, phone char(11) NULL COMMENT &amp;#39;휴대폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;생성일자&amp;#39;, point int NULL COMMENT &amp;#39;포인트 사용액&amp;#39;, status varchar(50) NULL COMMENT &amp;#39;주문상태&amp;#39;, CONSTRAINT fk_member_to_order FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_non_member_to_order FOREIGN KEY (non_username) REFERENCES non_member (non_username) ) COMMENT &amp;#39;주문&amp;#39;; CREATE TABLE pass_history ( username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, password varchar(500) NULL COMMENT &amp;#39;비밀번호&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;설정일자&amp;#39;, CONSTRAINT fk_member_to_pass_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;pass_history&amp;#39;; CREATE TABLE payment ( payment_no bigint AUTO_INCREMENT COMMENT &amp;#39;번호&amp;#39; PRIMARY KEY, sort varchar(50) NULL COMMENT &amp;#39;결제구분&amp;#39;, method varchar(50) NULL COMMENT &amp;#39;지불방식&amp;#39;, order_no bigint NULL COMMENT &amp;#39;주문번호&amp;#39;, uid varchar(50) NULL COMMENT &amp;#39;pg사 결제번호&amp;#39;, amount int NULL COMMENT &amp;#39;결제금액&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;결제일자&amp;#39;, CONSTRAINT fk_order_to_payment FOREIGN KEY (order_no) REFERENCES `order` (order_no) ) COMMENT &amp;#39;결제환불&amp;#39;; CREATE TABLE point ( point_no bigint AUTO_INCREMENT COMMENT &amp;#39;포인트 번호&amp;#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, point int NULL COMMENT &amp;#39;포인트&amp;#39;, order_item_no bigint NULL COMMENT &amp;#39;주문상품번호&amp;#39;, review_no bigint NULL COMMENT &amp;#39;리뷰번호&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;적립일&amp;#39;, exp_date timestamp NULL COMMENT &amp;#39;만료일&amp;#39;, CONSTRAINT fk_member_to_point FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;포인트&amp;#39;; CREATE TABLE privacy_policy ( policy_no int AUTO_INCREMENT COMMENT &amp;#39;번호&amp;#39; PRIMARY KEY, text varchar(10000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39; ) COMMENT &amp;#39;개인정보 처리 방침&amp;#39;; CREATE table privacy_agreement ( username varchar(100) NOT NULL COMMENT &amp;#39;동의자 아이디&amp;#39;, policy_no int NOT NULL COMMENT &amp;#39;약관번호&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;동의일자&amp;#39;, PRIMARY KEY (username, policy_no), CONSTRAINT fk_member_to_privacy_agreement FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_privacy_policy_to_privacy_agreement FOREIGN KEY (policy_no) REFERENCES privacy_policy (policy_no) ) COMMENT &amp;#39;개인정보 처리 방침 동의 내역&amp;#39;; CREATE TABLE product_info_announce ( pia_no int AUTO_INCREMENT COMMENT &amp;#39;고시_번호&amp;#39; PRIMARY KEY, title varchar(100) NULL COMMENT &amp;#39;템플릿 명&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39; ) COMMENT &amp;#39;상품정보제공고시&amp;#39;; CREATE TABLE item ( item_no int AUTO_INCREMENT COMMENT &amp;#39;상품번호&amp;#39; PRIMARY KEY, category_no int NULL COMMENT &amp;#39;카테고리번호&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;상품명&amp;#39;, price int NULL COMMENT &amp;#39;가격&amp;#39;, discount int NULL COMMENT &amp;#39;할인_가격&amp;#39;, start_discount timestamp NULL COMMENT &amp;#39;할인_시작일&amp;#39;, end_discount timestamp NULL COMMENT &amp;#39;할인_종료일&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;제목&amp;#39;, text varchar(10000) NULL COMMENT &amp;#39;내용&amp;#39;, image varchar(200) NULL UNIQUE COMMENT &amp;#39;상품이미지&amp;#39;, pia_no int NULL COMMENT &amp;#39;상품정보제공고시_번호&amp;#39;, coupon_allow tinyint(1) NULL COMMENT &amp;#39;쿠폰할인가능여부&amp;#39;, hide tinyint(1) NULL COMMENT &amp;#39;상품숨기기&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;작성자&amp;#39;, publish tinyint(1) NULL COMMENT &amp;#39;발행여부&amp;#39;, CONSTRAINT fk_category_to_item FOREIGN KEY (category_no) REFERENCES category (category_no) ON UPDATE CASCADE, CONSTRAINT fk_product_info_announce_to_item FOREIGN KEY (pia_no) REFERENCES product_info_announce (pia_no) ON UPDATE CASCADE, CONSTRAINT fk_member_to_item FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;상품정보&amp;#39;; CREATE TABLE `option` ( option_no bigint AUTO_INCREMENT COMMENT &amp;#39;옵션번호&amp;#39;, item_no int NOT NULL COMMENT &amp;#39;상품번호&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;옵션명&amp;#39;, option_price int NULL COMMENT &amp;#39;추가금액&amp;#39;, stock int NULL COMMENT &amp;#39;재고수량&amp;#39;, PRIMARY KEY (option_no, item_no), CONSTRAINT fk_item_to_option FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT &amp;#39;상품옵션&amp;#39;; CREATE TABLE cart ( cart_no bigint AUTO_INCREMENT COMMENT &amp;#39;장바구니 번호&amp;#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, option_no bigint NULL COMMENT &amp;#39;옵션번호&amp;#39;, item_no int NULL COMMENT &amp;#39;상품번호&amp;#39;, quantity int NULL COMMENT &amp;#39;수량&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;등록일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, CONSTRAINT fk_member_to_cart FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_option_to_cart FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON DELETE CASCADE ON UPDATE CASCADE ) COMMENT &amp;#39;장바구니&amp;#39;; CREATE TABLE question ( question_no bigint AUTO_INCREMENT COMMENT &amp;#39;질문번호&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, item_no int NULL COMMENT &amp;#39;상품번호&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;제목&amp;#39;, secret tinyint(1) NULL COMMENT &amp;#39;비밀글여부&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39;, answer_title varchar(100) NULL COMMENT &amp;#39;답변_제목&amp;#39;, answer_text varchar(5000) NULL COMMENT &amp;#39;답변_내용&amp;#39;, answer_id varchar(100) NULL COMMENT &amp;#39;답변_작성자&amp;#39;, answer_reg_date timestamp NULL COMMENT &amp;#39;답변_작성일&amp;#39;, PRIMARY KEY (question_no, username), CONSTRAINT fk_item_to_question FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_member_to_question FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;질문답변&amp;#39;; CREATE TABLE return_option ( return_option_code int AUTO_INCREMENT COMMENT &amp;#39;반품_코드&amp;#39; PRIMARY KEY, reason varchar(50) NULL COMMENT &amp;#39;반품_사유&amp;#39;, return_free tinyint(1) NULL COMMENT &amp;#39;배송비 면제&amp;#39;, comment varchar(5000) NULL COMMENT &amp;#39;비고&amp;#39; ) COMMENT &amp;#39;반품사유&amp;#39;; CREATE TABLE order_item ( order_item_no bigint AUTO_INCREMENT COMMENT &amp;#39;주문상품번호&amp;#39;, order_no bigint NOT NULL COMMENT &amp;#39;주문번호&amp;#39;, item_no int NULL COMMENT &amp;#39;상품번호&amp;#39;, option_no bigint NULL COMMENT &amp;#39;옵션번호&amp;#39;, option_name varchar(100) NULL COMMENT &amp;#39;옵션명&amp;#39;, issue_number bigint NULL COMMENT &amp;#39;쿠폰발급번호&amp;#39;, coupon_no int NULL COMMENT &amp;#39;쿠폰번호&amp;#39;, price_item int NULL COMMENT &amp;#39;상품 금액&amp;#39;, price_option int NULL COMMENT &amp;#39;옵션 금액&amp;#39;, price_coupon int NULL COMMENT &amp;#39;할인 금액&amp;#39;, prepare_date timestamp NULL COMMENT &amp;#39;배송_준비일&amp;#39;, delivery_carrier_no int NULL COMMENT &amp;#39;택배사번호&amp;#39;, tracking_number int NULL COMMENT &amp;#39;배송_운송장번호&amp;#39;, delivery_start_date timestamp NULL COMMENT &amp;#39;배송_운송장등록일&amp;#39;, delivery_end_date timestamp NULL COMMENT &amp;#39;배송_완료일&amp;#39;, confirm_date timestamp NULL COMMENT &amp;#39;구매_확정일&amp;#39;, cancel_date timestamp NULL COMMENT &amp;#39;취소_요청일&amp;#39;, return_date timestamp NULL COMMENT &amp;#39;반품_요청일&amp;#39;, return_carrier_no int NULL COMMENT &amp;#39;반품_택배사번호&amp;#39;, return_number timestamp NULL COMMENT &amp;#39;반품_운송장&amp;#39;, return_confirm_date timestamp NULL COMMENT &amp;#39;반품_처리일&amp;#39;, return_option_code int NULL COMMENT &amp;#39;반품_코드&amp;#39;, refund_date timestamp NULL COMMENT &amp;#39;환불_일자&amp;#39;, PRIMARY KEY (order_item_no, order_no), CONSTRAINT fk_carrier_to_order_item FOREIGN KEY (delivery_carrier_no) REFERENCES carrier (carrier_no) ON UPDATE CASCADE, CONSTRAINT fk_coupon_history_to_order_item FOREIGN KEY (issue_number, coupon_no) REFERENCES coupon_history (issue_number, coupon_no) ON UPDATE CASCADE, CONSTRAINT fk_option_to_order_item FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_order_to_order_item FOREIGN KEY (order_no) REFERENCES `order` (order_no) ON UPDATE CASCADE, CONSTRAINT fk_return_option_to_order_item FOREIGN KEY (return_option_code) REFERENCES return_option (return_option_code) ON UPDATE CASCADE ) COMMENT &amp;#39;주문상품&amp;#39;; CREATE TABLE review ( review_no bigint AUTO_INCREMENT COMMENT &amp;#39;리뷰번호&amp;#39;, order_item_no bigint NOT NULL COMMENT &amp;#39;주문상품번호&amp;#39;, order_no bigint NOT NULL COMMENT &amp;#39;주문번호&amp;#39;, username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, star int NULL COMMENT &amp;#39;별점&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;제목&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일&amp;#39;, answer_text varchar(5000) NULL COMMENT &amp;#39;답변 내용&amp;#39;, answer_id varchar(100) NULL COMMENT &amp;#39;답변 담당자&amp;#39;, answer_reg_date timestamp NULL COMMENT &amp;#39;답변 작성일&amp;#39;, answer_mod_date timestamp NULL COMMENT &amp;#39;답변 수정일&amp;#39;, PRIMARY KEY (review_no, order_item_no, order_no), CONSTRAINT fk_member_to_review FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_order_item_to_review FOREIGN KEY (order_item_no, order_no) REFERENCES order_item (order_item_no, order_no) ) COMMENT &amp;#39;리뷰&amp;#39;; CREATE TABLE `like` ( review_no bigint NOT NULL COMMENT &amp;#39;리뷰번호&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, reg_date timestamp NULL COMMENT &amp;#39;일자&amp;#39;, PRIMARY KEY (review_no, username), CONSTRAINT fk_member_to_like FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_review_to_like FOREIGN KEY (review_no) REFERENCES review (review_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT &amp;#39;좋아요&amp;#39;; CREATE TABLE review_comment ( comment_no bigint AUTO_INCREMENT COMMENT &amp;#39;댓글번호&amp;#39; PRIMARY KEY, order_item_no bigint NULL COMMENT &amp;#39;주문상품번호&amp;#39;, review_no bigint NULL COMMENT &amp;#39;리뷰번호&amp;#39;, username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, order_no bigint NULL COMMENT &amp;#39;주문번호&amp;#39;, CONSTRAINT fk_member_to_review_comment FOREIGN KEY (username) REFERENCES member (username) ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT fk_review_to_review_comment FOREIGN KEY (review_no) REFERENCES review (review_no) ) COMMENT &amp;#39;리뷰댓글&amp;#39;; CREATE TABLE review_template ( no int AUTO_INCREMENT COMMENT &amp;#39;번호&amp;#39; PRIMARY KEY, name varchar(100) NULL COMMENT &amp;#39;별칭&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일&amp;#39; ) COMMENT &amp;#39;리뷰 답변 템플릿&amp;#39;;</description><category>log</category></item><item><title>[Vanilla JS]Ajax 함수 모듈화</title><link>https://log.taedi.net/vanillajs-ajax-module/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/vanillajs-ajax-module/</guid><description>개인 프로젝트나 팀 프로젝트 할 것 없이 Ajax 를 매우 많은 곳에 사용했는데 그때마다 코드를 작성하려니 contentType 같이 외우기 까다로운 부분도 있고 코드도 길어진다고 판단하여 모듈화를 하여 사용하였다.
개인적으로 post 방식으로 json 데이터를 사용하는 경우가 많아서 기본값으로 두었고, 데이터는 &amp;ldquo;json / multipart / urlencoded&amp;rdquo; 에 대한 부분만 고려했다.
코드는 짧지만 불필요한 if 문이라던지(막상 지우려니 잘 안된다..) 깔끔해 보이지 않아서 한참이나 고민했지만 결국 만족할 만큼 다듬지 못한 것 같다.
시도해본 것 ajax 통신 이후 결과 여부에 따라 지정한 콜백함수 호출 필요한 전달인자만 입력하면 되도록 코드 &amp;#39;use strict&amp;#39;; /** * Vanilla JavaScript Ajax 함수 모듈화 * * @param {string} url - (required) 호출 할 url * @param {object} data - (optional) 전송 할 데이터 * @param {function} confirmCallback - (optional) ajax 통신 완료 후 실행 할 함수 * @param {function} cancelCallback - (optional) ajax 통신 실패 시 실행 할 함수 * @param {string} method - (optional) post / get / put .</description><category>VanillaJS</category><category>ajax</category></item><item><title>[Vanilla JS]모달 알림창 만들어보기</title><link>https://log.taedi.net/vanillajs-modal-window/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/vanillajs-modal-window/</guid><description>프로젝트를 진행하면서 알림이나 서브 컨텐츠를 alert 창이나 pop-up window를 이용하지 않고 처리하고싶은 욕심이 생겨 모달창을 공부해보았다.
시도해본 것 여러 창을 동시에 띄울 수 있어야 하고, 포커싱 된 요소가 최상단에 위치해야한다. 버튼을 눌렀을 때 예약된 함수를 불러올 수 있어야 한다. 드래그&amp;amp;드롭으로 이동이 가능해야한다. html, css에 별도로 구성요소를 세팅하지 않고 .js 파일 링크만으로 동작해야한다. 동작 영상 코드 &amp;#39;use strict&amp;#39;; /** * Vanilla JavaScript 모달 알림창 스크립트 * * @param {string} html - (optional) 모달창 내용 * @param {int} kind - (optional) 버튼 종류 (1: 확인, 2: 예&amp;amp;아니오) * @param {function} confirmCallback - (optional) 확인, 예 클릭 후 실행 함수 * @param {function} cancelCallback - (optional) 아니오 클릭 후 실행 함수 * * @example * const modalContainer = new ModalContainer(); * modalContainer.</description><category>VanillaJS</category><category>modal</category></item><item><title>팀 프로젝트 회고 - 3.코딩 컨벤션</title><link>https://log.taedi.net/yi-teamproject-log-3/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-3/</guid><description>프로젝트 내내 덕을 많이 본 코딩 컨벤션이다. 하단 링크를 참고하여 간결하게 우리 프로젝트 만의 컨벤션을 정의했는데 기회가 된다면 이것보다도 더욱 정교하게 만들어 보고 싶다.
1. Basic 캠퍼스 핵데이 Java 코딩 컨벤션 을 준수 하며, JS 의 경우 Naver JavaScript Style Guide 를 가급적 지향하며 코딩할 것
1-1. IDE 설정 캠퍼스 핵데이 가이드에 따라 코딩할 수 있도록 IDE Formatter 적용이 가능함
1-1-1. Eclipse naver-eclipse-formatter.xml
아래 링크 D.1.* 내용 참고 https://naver.github.io/hackday-conventions-java/#_eclipse 1-1-2.</description><category>log</category></item><item><title>팀 프로젝트 회고 - 2.페이지 구상</title><link>https://log.taedi.net/yi-teamproject-log-2/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-2/</guid><description>쇼핑몰로 프로젝트 주제를 결정하고, 초기에 어떤 페이지가 필요할까 고민하며 작성해본 리스트다. 회의 단계에서 제외된 내용도 있고, 시간 여유상 구현하지 못한 기능들도 있다.
1. 기본 페이지 구성 idea 1-1. 사용자 상품리스트, 상품상세, 로그인/회원가입, 결제화면, 마이페이지, 장바구니, 질문답변, 리뷰, 비회원 기능, 비밀번호 초기화, 주문취소/반품, 이용약관, about
1-1-1. 메인(상품리스트) header, nav, main, footer 구성 제품 정렬 기능(인기순, 가격순, 세부조건) 카테고리별 구분 제품 재고 현황에 따라 sold out 처리 및 정렬에서 뒤로 빼기 페이징 처리 1-1-2.</description><category>log</category></item><item><title>팀 프로젝트(쇼핑몰 제작) 회고 - 1.후기</title><link>https://log.taedi.net/yi-teamproject-log-1/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-1/</guid><description>지난 한달간 조원 2명과 쇼핑몰 제작 프로젝트를 진행했고, 처음 팀 프로젝트를 경험하며 막막했던 부분들을 기록으로 남기고자 글을 작성하였다. 나와 마찬가지로 처음 팀 프로젝트를 경험할 누군가에게 도움이 될 수 있으면 좋겠다.
1. 후기 프로젝트를 진행하며 느낀 사항 중 좋았던 부분과 다음에 필히 개선해야겠다고 생각했던 부분을 되새겨 보았다.
1-1. 만족했던 점 팀 단위의 개발을 처음 경험해보며 혼자서 개발할 때는 추상적으로만 느껴졌던 협업에 대한 부분을 몸소 체험해볼 수 있는 기회가 되었고, 그러면서 여러 시도를 해볼 수 있어서 좋았다.</description><category>log</category></item><item><title>[OCI]CentOS 8 설치 및 세팅하기</title><link>https://log.taedi.net/oci-centos-setting/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/oci-centos-setting/</guid><description>어느날 우연히 오라클 클라우드 인프라(이하 OCI) 에서 프리티어 서비스를 제공하는 것을 알게 되었고 &amp;lsquo;내가 만든 웹 프로젝트를 서비스할 서버를 직접 구축해보자!&amp;rsquo; 라고 결심했다. 시도해본 것은 VM(가상머신)에 CentOS 를 설치하고 docker 환경에서 tomcat, nginx, jenkins, MySQL 까지 세팅하여 보았다. 그리고 추가적으로 도메인 설정, SSL 인증서 발급, NAS 서버에 자동 백업 설정, Github WebHook 까지 설정하여 프로젝트 테스트 용도의 웹 서버로 원활히 사용할 수 있도록 설정을 하였고 작업한 내용을 정리해보려 한다.
기존에 시놀로지 NAS에 docker를 이용하면서 비슷한 경험을 해봐서 수월할거라 착각했지만 꽤나 복잡했고 정리한 내용도 다소 부족한 것 같다.</description><category>OCI</category><category>sever</category></item><item><title>[mysqldump] MySQL DB 백업 및 복구</title><link>https://log.taedi.net/mysql-dump/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/mysql-dump/</guid><description>백업 # mysqldump -u root -p --databases [DB명] &amp;gt; [저장경로/파일명] mysqldump -u root -p --databases [DB명] &amp;gt; /var/lib/mysql/project_2021-12-07.sql 복원 # mysqldump -u root -p [DB명] &amp;lt; [저장경로/파일명] mysql -u root -p project &amp;lt; /var/lib/mysql/project_2021-12-07.sql 참고 https://code-factory.tistory.com/21</description></item><item><title>이클립스(eclipse), Dbeaver 맥에서 한글 짤림문제 해결</title><link>https://log.taedi.net/eclipse-mac-kor-fix/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/eclipse-mac-kor-fix/</guid><description>서론 맥에서 이클립스를 사용하려면 불편함을 감수해야하는 부분이 있는데 그중에서도 제일은 한글 짤림 현상일 것이다. 이것은 한글 타이핑 시 마지막에 입력한 글자가 지워지는 현상인데, 이를 방지하려면 문장 작성 후 esc, enter, space 키 등을 입력 해주어야 하는 번거로움이 있다. (SQL 클라이언트 툴인 Dbeaver 또한 동일한 증상을 가지고 있다.)
구글 검색을 해보니 2013년 이전부터 리포팅 되어왔으나 프로그램 개선이나 해결책이 없는 채로 방치된 문제로 보였고, 여러 포스팅에서 맞춤법 자동 수정 을 해제하라는 말이 있었지만 일단 현재기준으로 전혀 먹히지 않는다.</description><category>eclipse</category><category>macOS</category></item><item><title>파이썬 가상환경 설정(pyenv, pipenv)</title><link>https://log.taedi.net/python-virtual-environment-setup/</link><pubDate>Sat, 18 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/python-virtual-environment-setup/</guid><description>오랜만에 파이썬을 사용하려고 보니 pyenv 와 pipenv 용어들은 기억나는데 좀처럼 어떻게 써야할지 감이 잡히지 않았다. 물론 글로벌 환경에서 작업해도 무방했지만 소싯적 시험기간에 공부보단 책상정리에 열중했던 주의력 산만한 학생으로서 두가지를 반드시 사용해야겠다는 결의를 다져보았다. 찾아보니 예전에 같은 주제로 메모도 해두었지만 나조차 이해가 되지않을 만큼의 내용으로 도움이 되지 않았고 이에 새롭게 파이썬 가상환경 사용방법을 알아 보았다. 물론 파이썬 가상환경의 전반적인 부분은 아니고 내가 사용할 만큼, 그리고 세팅하면서 발생하는 의구심에 대한 부분을 나의 눈높이 정도로 정리하였다.</description><category>pip</category><category>pipenv</category><category>pyenv</category><category>python</category></item><item><title>Github 블로그 설정 4. 대망의 업로드</title><link>https://log.taedi.net/hugo-upload/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/hugo-upload/</guid><description>서론 어느정도 설정을 마쳤다면 마지막은 세팅한 블로그를 Github Pages 에 올리는 일만 남았다. Hugo는 자동빌드가 되지않아 push 만 하면 페이지가 업데이트되는 jekyll과는 조금 다르다고 한다.
그래서 전체 프로젝트 파일과 빌드 된 파일을 각각 저장할 공간이 필요한데 리포지토리를 각각 분리하여 구분하는 방식과 한개 리포지토리에 브랜치를 나누어 관리하는 방식이 있었다. 두가지 방법 모두 시도해보았는데 개인적으로 리포지토리가 많으면 관리가 어렵다고 느껴 한개 리포지토리를 활용한 방법을 택했다.
진행순서 1. 리포지토리 생성 &amp;lsquo;자신의 아이디.github.io&amp;rsquo; 라는 이름의 리포지토리를 생성한다.</description><category>blog</category><category>github pages</category><category>hugo</category></item><item><title>Github 블로그 설정 3. Notion 페이지 변환</title><link>https://log.taedi.net/notion-to-hugo-toha/</link><pubDate>Sun, 12 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/notion-to-hugo-toha/</guid><description>노션은 기본적으로 작성한 글을 마크다운으로 내보낼 수 있는 기능이 있어 hugo 포스팅을 하는데 탁월할 것이라 생각했다.
하지만 노션의 내보내기 기능은 어딘가 아쉬운 부분이 있어 이것을 조금 손봐줄 필요가 있었다.
추가 작업 H 태그 노션은 h1 ~ h3 태그만 지원하며 h4~h6 태그는 없다. 그런데 h1 태그는 포스트에 여러개 존재하면 SEO 점수에 좋지 않은 영향을 미치기 떄문에 hugo 포스팅을 염두에 둔다면 h2 와 h3 태그만 사용해야하는 문제가 발생한다.
그대로 사용하기엔 기존의 글을 그대로 옮기기 위해 추가적인 작업이 필요한 문제와(h1 태그 안쓴 글이 없었다.</description><category>blog</category><category>github pages</category><category>hugo</category></item><item><title>Github 블로그 설정 2. 세부 설정</title><link>https://log.taedi.net/hugo-setting/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/hugo-setting/</guid><description>글 게시 작성한 글을 게시하려면 md 형식으로 저장하여 프로젝트 내부의 content 폴더에 위치시키면 된다.
front matter 설정 글 상단에 yaml, toml, json 키 값 쌍으로 이워진 front matter 를 작성해야한다. front matter 는 종류가 꽤 다양해 공식 문서를 확인해보고 필요한 것들을 선택적으로 사용하면 될 듯하다. 그리고 적용한 테마에 따라서 필수적으로 요구되는 front matter 가 달라질 수 있고 형식 또한 달라질 수 있는 듯 하다.
https://gohugo.io/content-management/front-matter/
섹션 설정 hugo는 폴더로 섹션과 하위 섹션을 구분할 수 있다.</description><category>blog</category><category>github pages</category><category>hugo</category></item><item><title>Github 블로그 설정 1. Hugo 설치</title><link>https://log.taedi.net/hugo-install/</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/hugo-install/</guid><description>서론 코딩 공부를 시작하며 메모는 선택이 아닌 필수가 되었다. 처음에는 노션으로 기본적인 메모를 하고 어느정도 정리가 되면 티스토리에 업로드를 할 것을 계획했고 포스팅을 조금씩 해나가고 있었는데, 언젠가부터 글을 작성할 때 마다 reCAPTCHA 가 발생하기 시작했다.
물론 직접 글을 작성할 때야 체크 항목이 하나 늘어난 것 뿐이지만, 문제는 OPEN API 방식의 포스팅은 완전히 불가능해져 애용하던 Notion2Tistory 를 활용할 수가 없어진 것이 큰 문제였다. (노션에 작성한 글을 API 없이 티스토리에 업로드 하기위해서는 대단한 인내심이 필요했다.</description><category>blog</category><category>github pages</category><category>hugo</category></item><item><title>[Maven] 외부 톰캣에 deploy 설정하기</title><link>https://log.taedi.net/tomcat-external-deploy-maven/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/tomcat-external-deploy-maven/</guid><description>외부 톰캣에 프로젝트를 배포하기 위해서는 war 파일을 직접 업로드 하여야하는데, 이걸 IDE에서 run 할때 바로 처리하는 방법을 알아보았다. (이해가 부족하여 문장이 뒤죽박죽..)
작업 환경 시놀로지 Docker - tomcat-8.5.69버전 IDE - eGov3.10 시놀로지 세팅 ssh 와 vi를 다루는 데 능숙하지 않기 때문에 시놀로지 gui 환경에서 작업을 처리할 방법을 구상해 보았다.
볼륨 마운트 작업 편의성을 위하여 외부 폴더들에 conf 와 webapps 경로를 마운트 해주었다. &amp;lsquo;컨테이너 선택 &amp;gt; 편집 &amp;gt; 볼륨&amp;rsquo; 으로 이동하여 아래와 같이 폴더를 마운트 하였다.</description><category>deploy</category><category>java</category><category>maven</category><category>tomcat</category></item><item><title>기존 주소 방문 시 리다이렉트 하기 - 티스토리 2차 도메인 설정 #3</title><link>https://log.taedi.net/tistory-blog-setting-4/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/tistory-blog-setting-4/</guid><description>※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.
티스토리 개인 도메인 추가 후 티스토리 기존 주소로 유입되는 방문객을 개인 도메인 주소로 이동하는 스크립트를 추가하여 보았습니다. 필수적인 사항은 아니지만 저의 경우 루트 도메인 taedi.net 을 블로그에 연결했기 때문에 www.taedi.net 과 tae-di.tistory.com 총 세개의 도메인을 통해 블로그에 접속할 수 있었고, 깔끔한 교통정리를 위해 redirect를 활용하여 taedi.net 으로 단일화 시켰습니다.
도메인을 통일해줘야 하는 몇가지 이유 방문통계에서 게시글이 주소에 따라 다르게 집계되는 문제 애드센스를 활용할 경우, 접속 도메인에 따라 광고가 나오지 않을 수 있는 문제점 주소를 하나로 통일해야 할 것 같은 강박 도메인이 여러개 존재하여 발생할 수 있는 불편함은 다음과 같습니다.</description><category>blog</category><category>dns</category><category>tistory</category></item><item><title>댓글 작성하려는데 로그인이 안된다구? - 티스토리 2차 도메인 설정 #2</title><link>https://log.taedi.net/tistory-blog-setting-3/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/tistory-blog-setting-3/</guid><description>※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.
개인 도메인으로 블로그 게시물에 접근하면 티스토리 로그인이 되어있지 않은 상태가 됩니다. 때문에 게시물 수정이나 블로그 관리 페이지 진입 등이 되지 않는 불편함이 있는데 이것은 블로그 주인만 느끼면 되는 문제라 크게 문제가 되지 않습니다. 하지만 방문객이 겪는 불편함이 존재하는데 바로 티스토리 로그인이 연동되지 않아 비회원으로 댓글을 남겨야 하는 문제입니다. 댓글기능이 원활하지 않는다는 것은 블로그의 순기능 중 소통의 영역에서 마이너스 요소가 아닐 수 없습니다.
개인 도메인에서는 티스토리 아이디로 댓글 작성이 불가능하다.</description><category>blog</category><category>dns</category><category>tistory</category></item><item><title>검색엔진 노출 재설정하기 - 티스토리 2차 도메인 설정 #1</title><link>https://log.taedi.net/tistory-blog-setting-2/</link><pubDate>Sun, 07 Mar 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/tistory-blog-setting-2/</guid><description>※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.
티스토리 블로그 주소 변경을 마친 후에 가장 먼저 사이트 검색노출을 재설정 해주었습니다. 기존에 사용하던 1차 도메인(티스토리 기본 제공 도메인)이 계속해서 검색엔진에 노출되고 있고 2차 도메인(개인 도메인)은 아직 알려져있지 않기 때문에 신속하게 변경하여야 유입 방문객 수 손실을 그나마 낮출 수 있을 것이라 판단했기 때문입니다.
도메인 구매과정 및 티스토리 블로그 적용 방법에 대한 내용이 궁금하시다면 아래 링크를 참고하시기 바랍니다.
티스토리 개인 도메인 구매 및 활용하기 - #1 구매동기, DNS설정, 오류해결</description><category>blog</category><category>dns</category><category>tistory</category></item><item><title>티스토리 개인 도메인 구매 및 활용하기 - #1 구매동기, DNS설정, 오류해결</title><link>https://log.taedi.net/tistory-blog-setting/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/tistory-blog-setting/</guid><description>※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.
얼마 전 블로그 주소를 tae-di.tistory.com 에서 taedi.net 으로 변경하였습니다. 도메인 변경을 진행하기 전 여러 후기에서 티스토리 블로그 2차 도메인 등록 시 발생하는 많은 문제점에 대한 부분을 확인 하였지만 이같은 결정을 하게 된 것은 그만큼의 메리트가 있었기 때문입니다. 티스토리 블로그 2차 도메인(개인 도메인)이 주는 기대효과와 이를 위해 감수해야하는 단점, 그리고 도메인 등록방법과 문제점들을 어느 정도 해소하기 위한 설정 방법들을 공유하고자 글을 남기게 되었습니다.
장점 - 개인 도메인을 구매한 동기 물론 가장 큰 목적은 &amp;lsquo;갖고싶어서&amp;rsquo; 였습니다.</description><category>blog</category><category>dns</category><category>tistory</category></item></channel></rss>