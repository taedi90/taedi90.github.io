<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>github pages on Taedi's Log</title><link>https://log.taedi.net/tags/github-pages/</link><description>Recent content in github pages on Taedi's Log</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Sep 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://log.taedi.net/tags/github-pages/index.xml" rel="self" type="application/rss+xml"/><item><title>Github 블로그 설정 1. Hugo 설치</title><link>https://log.taedi.net/hugo-install/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/hugo-install/</guid><description>서론 코딩 공부를 시작하며 메모는 선택이 아닌 필수가 되었다. 처음에는 노션으로 기본적인 메모를 하고 어느정도 정리가 되면 티스토리에 업로드를 할 것을 계획했고 포스팅을 조금씩 해나가고 있었는데, 언젠가부터 글을 작성할 때 마다 reCAPTCHA 가 발생하기 시작했다.
물론 직접 글을 작성할 때야 체크 항목이 하나 늘어난 것 뿐이지만, 문제는 OPEN API 방식의 포스팅은 완전히 불가능해져 애용하던 Notion2Tistory 를 활용할 수가 없어진 것이 큰 문제였다. (노션에 작성한 글을 API 없이 티스토리에 업로드 하기위해서는 대단한 인내심이 필요했다.</description></item><item><title>Github 블로그 설정 2. 세부 설정</title><link>https://log.taedi.net/hugo-setting/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/hugo-setting/</guid><description>글 게시 작성한 글을 게시하려면 md 형식으로 저장하여 프로젝트 내부의 content 폴더에 위치시키면 된다.
front matter 설정 글 상단에 yaml, toml, json 키 값 쌍으로 이워진 front matter 를 작성해야한다. front matter 는 종류가 꽤 다양해 공식 문서를 확인해보고 필요한 것들을 선택적으로 사용하면 될 듯하다. 그리고 적용한 테마에 따라서 필수적으로 요구되는 front matter 가 달라질 수 있고 형식 또한 달라질 수 있는 듯 하다.
https://gohugo.io/content-management/front-matter/
섹션 설정 hugo는 폴더로 섹션과 하위 섹션을 구분할 수 있다.</description></item><item><title>Github 블로그 설정 3. Notion 페이지 변환</title><link>https://log.taedi.net/notion-to-hugo-toha/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/notion-to-hugo-toha/</guid><description>노션은 기본적으로 작성한 글을 마크다운으로 내보낼 수 있는 기능이 있어 hugo 포스팅을 하는데 탁월할 것이라 생각했다.
하지만 노션의 내보내기 기능은 어딘가 아쉬운 부분이 있어 이것을 조금 손봐줄 필요가 있었다.
추가 작업 H 태그 노션은 h1 ~ h3 태그만 지원하며 h4~h6 태그는 없다. 그런데 h1 태그는 포스트에 여러개 존재하면 SEO 점수에 좋지 않은 영향을 미치기 떄문에 hugo 포스팅을 염두에 둔다면 h2 와 h3 태그만 사용해야하는 문제가 발생한다.
그대로 사용하기엔 기존의 글을 그대로 옮기기 위해 추가적인 작업이 필요한 문제와(h1 태그 안쓴 글이 없었다.</description></item><item><title>Github 블로그 설정 4. 대망의 업로드</title><link>https://log.taedi.net/hugo-upload/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/hugo-upload/</guid><description>서론 어느정도 설정을 마쳤다면 마지막은 세팅한 블로그를 Github Pages 에 올리는 일만 남았다. Hugo는 자동빌드가 되지않아 push 만 하면 페이지가 업데이트되는 jekyll과는 조금 다르다고 한다.
그래서 전체 프로젝트 파일과 빌드 된 파일을 각각 저장할 공간이 필요한데 리포지토리를 각각 분리하여 구분하는 방식과 한개 리포지토리에 브랜치를 나누어 관리하는 방식이 있었다. 두가지 방법 모두 시도해보았는데 개인적으로 리포지토리가 많으면 관리가 어렵다고 느껴 한개 리포지토리를 활용한 방법을 택했다.
진행순서 1. 리포지토리 생성 &amp;lsquo;자신의 아이디.github.io&amp;rsquo; 라는 이름의 리포지토리를 생성한다.</description></item></channel></rss>