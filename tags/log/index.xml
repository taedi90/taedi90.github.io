<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>log on Taedi's Log</title><link>https://log.taedi.net/tags/log/</link><description>Recent content in log on Taedi's Log</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Dec 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://log.taedi.net/tags/log/index.xml" rel="self" type="application/rss+xml"/><item><title>팀 프로젝트 회고 - 7.Flow(주문 &amp; 결제)</title><link>https://log.taedi.net/yi-teamproject-log-7/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-7/</guid><description>1. Flow 1-1. 주문하기 1-2. 주문 확인 2. 구현 Idea 2-1. 주문 대기열 삭제 주기 결제가 완료되지 않은 주문 대기열 매일 자정마다 삭제 (주문상품, 주문 릴레이션) 진행중인 주문이 삭제되는 경우 고려해야함 11시 55분에 작성한 주문 대기열이 바로 삭제되는 불상사도 고려해야함 → 자정마다 2일 이상 지난 미결제 대기열 삭제
2-2. 주문 진행 상태 구분 주문번호가 일치하는 각 주문상품들의 상태를 보고 판단
결제 대기 - 주문 튜플은 있으나 결제 내역이 없다.</description></item><item><title>팀 프로젝트 회고 - 6.Flow(배송비)</title><link>https://log.taedi.net/yi-teamproject-log-6/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-6/</guid><description>0. 전제 조건 배송비는 발송 운임과 반송 운임으로 구분하며, 상품과 동일하게 취급한다. 발송 운임은 주문 당 1개를 초과할 수 없다. 반송 운임은 경우에 따라 중복 부과될 수 있다. 배송비는 편도 2,500원 왕복 5,000원으로 책정한다. 정가기준 50,000원 이상 구매 시 발송 운임은 판매자가 부담한다. 취소 반품 시, 배송비 아이템은 제외하고 계산한다. ex) 상품 A 10,000원 + 상품 B 15,000원 + 발송 운임 2,500원 = 합 27,500원 단순변심 반품 시 주문에 반송 운임 아이템 추가 운임 5,000원을 제외한 22,500원 환불 1.</description></item><item><title>팀 프로젝트 회고 - 5.Flow(회원가입&amp;로그인)</title><link>https://log.taedi.net/yi-teamproject-log-5/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-5/</guid><description>1. Flow 1-1. 회원가입 1-1-1. 회원가입(일반) 1-1-2. 회원가입(oAuth) 1-2. 로그인 1-3. 비밀번호 초기화(일반회원) 아이디 &amp;amp; 이메일 입력 → (server) 일치 확인 → (server) 임시 비밀번호 저장 및 메일 발송 → 로그인 시 비밀번호 변경 안내 띄우기
2. 구현 Idea 회원가입(일반) 가입신청 → 약관 동의 → 정보입력 → 이메일 확인(session? table) → 가입 완료
이메일 링크에 아이디를 암호화한 주소를 줘서 해당 주소로 접속하면 확인 되는 걸로 하기
회원가입(oAuth) 가입신청 → 구글 로그인 및 정보 제공 동의 → (약관 동의) → 가입 완료</description></item><item><title>팀 프로젝트(쇼핑몰 제작) 회고 - 4.DB</title><link>https://log.taedi.net/yi-teamproject-log-4/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-4/</guid><description>프로젝트를 진행하면서 가장 찾기 어려웠던 자료가 DB 구조에 대한 부분이었다. 정답이 명확하지도 않거니와 실제 서비스라면 핵심적인 로직이 드러날 수도 있는 부분이라 자료가 크게 없지 않을까 개인적으로 생각해보았다. 그리고 DB를 구현하기 위해서 Flow가 선행되어야 함을 느꼈고 두 과정을 병행하여 진행했던 기억이 있다.
1. DB 초기부터 제품 교환에 대한 부분은 고려하지 않았고 논리적인 오류는 그때그때 수정하여 나온 결과지만 여기저기 미흡한 부분이 있을 수 있다.
1-1. ERD 1-2.DDL -- project DROP SCHEMA IF EXISTS `project`; -- project CREATE SCHEMA `project`; USE `project`; CREATE TABLE carrier ( carrier_no int AUTO_INCREMENT COMMENT &amp;#39;택배사 코드&amp;#39; PRIMARY KEY, name varchar(100) NULL COMMENT &amp;#39;택배사 명&amp;#39;, biz_no char(10) NULL COMMENT &amp;#39;사업자번호&amp;#39; ) COMMENT &amp;#39;택배사&amp;#39;; CREATE TABLE category ( category_no int AUTO_INCREMENT COMMENT &amp;#39;카테고리 번호&amp;#39; PRIMARY KEY, title varchar(100) NULL COMMENT &amp;#39;카테고리 명&amp;#39; ) COMMENT &amp;#39;카테고리&amp;#39;; CREATE TABLE coupon ( coupon_no int AUTO_INCREMENT COMMENT &amp;#39;쿠폰번호&amp;#39; PRIMARY KEY, name varchar(100) NULL COMMENT &amp;#39;쿠폰명&amp;#39;, amount int NULL COMMENT &amp;#39;정액할인&amp;#39;, min_price int NULL COMMENT &amp;#39;제품하한가&amp;#39;, percent decimal(3, 2) NULL COMMENT &amp;#39;정률할인&amp;#39;, max_discount int NULL COMMENT &amp;#39;할인상한가&amp;#39;, validity int NULL COMMENT &amp;#39;유효기간&amp;#39; ) COMMENT &amp;#39;쿠폰&amp;#39;; CREATE TABLE keyword_history ( field varchar(100) NULL COMMENT &amp;#39;검색자&amp;#39;, keyword varchar(5000) NULL COMMENT &amp;#39;키워드&amp;#39;, reg_date timestamp NULL COMMENT &amp;#39;검색일자&amp;#39; ) COMMENT &amp;#39;검색키워드&amp;#39;; CREATE TABLE member ( username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39; PRIMARY KEY, password varchar(500) NOT NULL COMMENT &amp;#39;비밀번호&amp;#39;, name varchar(100) NOT NULL COMMENT &amp;#39;이름&amp;#39;, email varchar(200) NOT NULL COMMENT &amp;#39;이메일&amp;#39;, email_confirm tinyint(1) DEFAULT &amp;#39;0&amp;#39; NOT NULL COMMENT &amp;#39;이메일 본인확인&amp;#39;, phone char(11) NULL COMMENT &amp;#39;휴대폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;생성일자&amp;#39;, withdrawal_date timestamp NULL COMMENT &amp;#39;탈퇴일자&amp;#39;, social tinyint(1) NOT NULL COMMENT &amp;#39;소셜회원 여부&amp;#39;, temp_pass tinyint(1) DEFAULT &amp;#39;0&amp;#39; NULL COMMENT &amp;#39;임시비밀번호여부&amp;#39;, enabled tinyint(1) DEFAULT &amp;#39;1&amp;#39; NOT NULL COMMENT &amp;#39;활성화 상태&amp;#39; ) COMMENT &amp;#39;회원&amp;#39;; CREATE TABLE auth ( username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, authority varchar(50) NOT NULL COMMENT &amp;#39;권한&amp;#39;, PRIMARY KEY (username, authority), CONSTRAINT fk_member_to_auth FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;권한&amp;#39;; CREATE TABLE persistent_logins ( username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, series varchar(64) NOT NULL COMMENT &amp;#39;시리즈&amp;#39; PRIMARY KEY, token varchar(64) NOT NULL COMMENT &amp;#39;토큰&amp;#39;, last_used timestamp NOT NULL COMMENT &amp;#39;마지막 사용&amp;#39; ) COMMENT &amp;#39;자동 로그인&amp;#39;; CREATE TABLE address ( username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;배송지별칭&amp;#39;, zipcode char(5) NULL COMMENT &amp;#39;우편번호&amp;#39;, address1 varchar(500) NULL COMMENT &amp;#39;주소 앞&amp;#39;, address2 varchar(500) NULL COMMENT &amp;#39;주소 상세&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;받는분&amp;#39;, phone char(11) NULL COMMENT &amp;#39;휴대폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;등록일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, CONSTRAINT fk_member_to_address FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;주소&amp;#39;; CREATE TABLE coupon_history ( issue_number bigint AUTO_INCREMENT COMMENT &amp;#39;쿠폰발급번호&amp;#39;, coupon_no int NOT NULL COMMENT &amp;#39;쿠폰번호&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;발급일자&amp;#39;, expire_date timestamp NULL COMMENT &amp;#39;만료일자&amp;#39;, use_date timestamp NULL COMMENT &amp;#39;사용일자&amp;#39;, use_order bigint NULL COMMENT &amp;#39;사용주문&amp;#39;, PRIMARY KEY (issue_number, coupon_no, username), CONSTRAINT fk_coupon_to_coupon_history FOREIGN KEY (coupon_no) REFERENCES coupon (coupon_no), CONSTRAINT fk_member_to_coupon_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;쿠폰발급이력&amp;#39;; CREATE TABLE non_member ( non_username varchar(100) NOT NULL COMMENT &amp;#39;임시아이디&amp;#39; PRIMARY KEY, password varchar(500) NULL COMMENT &amp;#39;주문확인비번&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;이름&amp;#39;, email varchar(200) NULL COMMENT &amp;#39;이메일&amp;#39;, phone char(11) NULL COMMENT &amp;#39;핸드폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;등록일자&amp;#39; ) COMMENT &amp;#39;비회원&amp;#39;; CREATE TABLE `order` ( order_no bigint NOT NULL COMMENT &amp;#39;주문번호&amp;#39; PRIMARY KEY, username varchar(100) NULL COMMENT &amp;#39;회원아이디&amp;#39;, non_username varchar(100) NULL COMMENT &amp;#39;비회원아이디&amp;#39;, zipcode char(5) NULL COMMENT &amp;#39;우편번호&amp;#39;, address1 varchar(500) NULL COMMENT &amp;#39;주소 앞&amp;#39;, address2 varchar(500) NULL COMMENT &amp;#39;주소 상세&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;받는분&amp;#39;, phone char(11) NULL COMMENT &amp;#39;휴대폰&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;생성일자&amp;#39;, point int NULL COMMENT &amp;#39;포인트 사용액&amp;#39;, status varchar(50) NULL COMMENT &amp;#39;주문상태&amp;#39;, CONSTRAINT fk_member_to_order FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_non_member_to_order FOREIGN KEY (non_username) REFERENCES non_member (non_username) ) COMMENT &amp;#39;주문&amp;#39;; CREATE TABLE pass_history ( username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, password varchar(500) NULL COMMENT &amp;#39;비밀번호&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;설정일자&amp;#39;, CONSTRAINT fk_member_to_pass_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;pass_history&amp;#39;; CREATE TABLE payment ( payment_no bigint AUTO_INCREMENT COMMENT &amp;#39;번호&amp;#39; PRIMARY KEY, sort varchar(50) NULL COMMENT &amp;#39;결제구분&amp;#39;, method varchar(50) NULL COMMENT &amp;#39;지불방식&amp;#39;, order_no bigint NULL COMMENT &amp;#39;주문번호&amp;#39;, uid varchar(50) NULL COMMENT &amp;#39;pg사 결제번호&amp;#39;, amount int NULL COMMENT &amp;#39;결제금액&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;결제일자&amp;#39;, CONSTRAINT fk_order_to_payment FOREIGN KEY (order_no) REFERENCES `order` (order_no) ) COMMENT &amp;#39;결제환불&amp;#39;; CREATE TABLE point ( point_no bigint AUTO_INCREMENT COMMENT &amp;#39;포인트 번호&amp;#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, point int NULL COMMENT &amp;#39;포인트&amp;#39;, order_item_no bigint NULL COMMENT &amp;#39;주문상품번호&amp;#39;, review_no bigint NULL COMMENT &amp;#39;리뷰번호&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;적립일&amp;#39;, exp_date timestamp NULL COMMENT &amp;#39;만료일&amp;#39;, CONSTRAINT fk_member_to_point FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;포인트&amp;#39;; CREATE TABLE privacy_policy ( policy_no int AUTO_INCREMENT COMMENT &amp;#39;번호&amp;#39; PRIMARY KEY, text varchar(10000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39; ) COMMENT &amp;#39;개인정보 처리 방침&amp;#39;; CREATE table privacy_agreement ( username varchar(100) NOT NULL COMMENT &amp;#39;동의자 아이디&amp;#39;, policy_no int NOT NULL COMMENT &amp;#39;약관번호&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;동의일자&amp;#39;, PRIMARY KEY (username, policy_no), CONSTRAINT fk_member_to_privacy_agreement FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_privacy_policy_to_privacy_agreement FOREIGN KEY (policy_no) REFERENCES privacy_policy (policy_no) ) COMMENT &amp;#39;개인정보 처리 방침 동의 내역&amp;#39;; CREATE TABLE product_info_announce ( pia_no int AUTO_INCREMENT COMMENT &amp;#39;고시_번호&amp;#39; PRIMARY KEY, title varchar(100) NULL COMMENT &amp;#39;템플릿 명&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39; ) COMMENT &amp;#39;상품정보제공고시&amp;#39;; CREATE TABLE item ( item_no int AUTO_INCREMENT COMMENT &amp;#39;상품번호&amp;#39; PRIMARY KEY, category_no int NULL COMMENT &amp;#39;카테고리번호&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;상품명&amp;#39;, price int NULL COMMENT &amp;#39;가격&amp;#39;, discount int NULL COMMENT &amp;#39;할인_가격&amp;#39;, start_discount timestamp NULL COMMENT &amp;#39;할인_시작일&amp;#39;, end_discount timestamp NULL COMMENT &amp;#39;할인_종료일&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;제목&amp;#39;, text varchar(10000) NULL COMMENT &amp;#39;내용&amp;#39;, image varchar(200) NULL UNIQUE COMMENT &amp;#39;상품이미지&amp;#39;, pia_no int NULL COMMENT &amp;#39;상품정보제공고시_번호&amp;#39;, coupon_allow tinyint(1) NULL COMMENT &amp;#39;쿠폰할인가능여부&amp;#39;, hide tinyint(1) NULL COMMENT &amp;#39;상품숨기기&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;작성자&amp;#39;, publish tinyint(1) NULL COMMENT &amp;#39;발행여부&amp;#39;, CONSTRAINT fk_category_to_item FOREIGN KEY (category_no) REFERENCES category (category_no) ON UPDATE CASCADE, CONSTRAINT fk_product_info_announce_to_item FOREIGN KEY (pia_no) REFERENCES product_info_announce (pia_no) ON UPDATE CASCADE, CONSTRAINT fk_member_to_item FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;상품정보&amp;#39;; CREATE TABLE `option` ( option_no bigint AUTO_INCREMENT COMMENT &amp;#39;옵션번호&amp;#39;, item_no int NOT NULL COMMENT &amp;#39;상품번호&amp;#39;, name varchar(100) NULL COMMENT &amp;#39;옵션명&amp;#39;, option_price int NULL COMMENT &amp;#39;추가금액&amp;#39;, stock int NULL COMMENT &amp;#39;재고수량&amp;#39;, PRIMARY KEY (option_no, item_no), CONSTRAINT fk_item_to_option FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT &amp;#39;상품옵션&amp;#39;; CREATE TABLE cart ( cart_no bigint AUTO_INCREMENT COMMENT &amp;#39;장바구니 번호&amp;#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, option_no bigint NULL COMMENT &amp;#39;옵션번호&amp;#39;, item_no int NULL COMMENT &amp;#39;상품번호&amp;#39;, quantity int NULL COMMENT &amp;#39;수량&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;등록일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, CONSTRAINT fk_member_to_cart FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_option_to_cart FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON DELETE CASCADE ON UPDATE CASCADE ) COMMENT &amp;#39;장바구니&amp;#39;; CREATE TABLE question ( question_no bigint AUTO_INCREMENT COMMENT &amp;#39;질문번호&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, item_no int NULL COMMENT &amp;#39;상품번호&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;제목&amp;#39;, secret tinyint(1) NULL COMMENT &amp;#39;비밀글여부&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39;, answer_title varchar(100) NULL COMMENT &amp;#39;답변_제목&amp;#39;, answer_text varchar(5000) NULL COMMENT &amp;#39;답변_내용&amp;#39;, answer_id varchar(100) NULL COMMENT &amp;#39;답변_작성자&amp;#39;, answer_reg_date timestamp NULL COMMENT &amp;#39;답변_작성일&amp;#39;, PRIMARY KEY (question_no, username), CONSTRAINT fk_item_to_question FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_member_to_question FOREIGN KEY (username) REFERENCES member (username) ) COMMENT &amp;#39;질문답변&amp;#39;; CREATE TABLE return_option ( return_option_code int AUTO_INCREMENT COMMENT &amp;#39;반품_코드&amp;#39; PRIMARY KEY, reason varchar(50) NULL COMMENT &amp;#39;반품_사유&amp;#39;, return_free tinyint(1) NULL COMMENT &amp;#39;배송비 면제&amp;#39;, comment varchar(5000) NULL COMMENT &amp;#39;비고&amp;#39; ) COMMENT &amp;#39;반품사유&amp;#39;; CREATE TABLE order_item ( order_item_no bigint AUTO_INCREMENT COMMENT &amp;#39;주문상품번호&amp;#39;, order_no bigint NOT NULL COMMENT &amp;#39;주문번호&amp;#39;, item_no int NULL COMMENT &amp;#39;상품번호&amp;#39;, option_no bigint NULL COMMENT &amp;#39;옵션번호&amp;#39;, option_name varchar(100) NULL COMMENT &amp;#39;옵션명&amp;#39;, issue_number bigint NULL COMMENT &amp;#39;쿠폰발급번호&amp;#39;, coupon_no int NULL COMMENT &amp;#39;쿠폰번호&amp;#39;, price_item int NULL COMMENT &amp;#39;상품 금액&amp;#39;, price_option int NULL COMMENT &amp;#39;옵션 금액&amp;#39;, price_coupon int NULL COMMENT &amp;#39;할인 금액&amp;#39;, prepare_date timestamp NULL COMMENT &amp;#39;배송_준비일&amp;#39;, delivery_carrier_no int NULL COMMENT &amp;#39;택배사번호&amp;#39;, tracking_number int NULL COMMENT &amp;#39;배송_운송장번호&amp;#39;, delivery_start_date timestamp NULL COMMENT &amp;#39;배송_운송장등록일&amp;#39;, delivery_end_date timestamp NULL COMMENT &amp;#39;배송_완료일&amp;#39;, confirm_date timestamp NULL COMMENT &amp;#39;구매_확정일&amp;#39;, cancel_date timestamp NULL COMMENT &amp;#39;취소_요청일&amp;#39;, return_date timestamp NULL COMMENT &amp;#39;반품_요청일&amp;#39;, return_carrier_no int NULL COMMENT &amp;#39;반품_택배사번호&amp;#39;, return_number timestamp NULL COMMENT &amp;#39;반품_운송장&amp;#39;, return_confirm_date timestamp NULL COMMENT &amp;#39;반품_처리일&amp;#39;, return_option_code int NULL COMMENT &amp;#39;반품_코드&amp;#39;, refund_date timestamp NULL COMMENT &amp;#39;환불_일자&amp;#39;, PRIMARY KEY (order_item_no, order_no), CONSTRAINT fk_carrier_to_order_item FOREIGN KEY (delivery_carrier_no) REFERENCES carrier (carrier_no) ON UPDATE CASCADE, CONSTRAINT fk_coupon_history_to_order_item FOREIGN KEY (issue_number, coupon_no) REFERENCES coupon_history (issue_number, coupon_no) ON UPDATE CASCADE, CONSTRAINT fk_option_to_order_item FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_order_to_order_item FOREIGN KEY (order_no) REFERENCES `order` (order_no) ON UPDATE CASCADE, CONSTRAINT fk_return_option_to_order_item FOREIGN KEY (return_option_code) REFERENCES return_option (return_option_code) ON UPDATE CASCADE ) COMMENT &amp;#39;주문상품&amp;#39;; CREATE TABLE review ( review_no bigint AUTO_INCREMENT COMMENT &amp;#39;리뷰번호&amp;#39;, order_item_no bigint NOT NULL COMMENT &amp;#39;주문상품번호&amp;#39;, order_no bigint NOT NULL COMMENT &amp;#39;주문번호&amp;#39;, username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, star int NULL COMMENT &amp;#39;별점&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, title varchar(100) NULL COMMENT &amp;#39;제목&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일&amp;#39;, answer_text varchar(5000) NULL COMMENT &amp;#39;답변 내용&amp;#39;, answer_id varchar(100) NULL COMMENT &amp;#39;답변 담당자&amp;#39;, answer_reg_date timestamp NULL COMMENT &amp;#39;답변 작성일&amp;#39;, answer_mod_date timestamp NULL COMMENT &amp;#39;답변 수정일&amp;#39;, PRIMARY KEY (review_no, order_item_no, order_no), CONSTRAINT fk_member_to_review FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_order_item_to_review FOREIGN KEY (order_item_no, order_no) REFERENCES order_item (order_item_no, order_no) ) COMMENT &amp;#39;리뷰&amp;#39;; CREATE TABLE `like` ( review_no bigint NOT NULL COMMENT &amp;#39;리뷰번호&amp;#39;, username varchar(100) NOT NULL COMMENT &amp;#39;아이디&amp;#39;, reg_date timestamp NULL COMMENT &amp;#39;일자&amp;#39;, PRIMARY KEY (review_no, username), CONSTRAINT fk_member_to_like FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_review_to_like FOREIGN KEY (review_no) REFERENCES review (review_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT &amp;#39;좋아요&amp;#39;; CREATE TABLE review_comment ( comment_no bigint AUTO_INCREMENT COMMENT &amp;#39;댓글번호&amp;#39; PRIMARY KEY, order_item_no bigint NULL COMMENT &amp;#39;주문상품번호&amp;#39;, review_no bigint NULL COMMENT &amp;#39;리뷰번호&amp;#39;, username varchar(100) NULL COMMENT &amp;#39;아이디&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일자&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일자&amp;#39;, order_no bigint NULL COMMENT &amp;#39;주문번호&amp;#39;, CONSTRAINT fk_member_to_review_comment FOREIGN KEY (username) REFERENCES member (username) ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT fk_review_to_review_comment FOREIGN KEY (review_no) REFERENCES review (review_no) ) COMMENT &amp;#39;리뷰댓글&amp;#39;; CREATE TABLE review_template ( no int AUTO_INCREMENT COMMENT &amp;#39;번호&amp;#39; PRIMARY KEY, name varchar(100) NULL COMMENT &amp;#39;별칭&amp;#39;, text varchar(5000) NULL COMMENT &amp;#39;내용&amp;#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT &amp;#39;작성일&amp;#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &amp;#39;수정일&amp;#39; ) COMMENT &amp;#39;리뷰 답변 템플릿&amp;#39;;</description></item><item><title>팀 프로젝트(쇼핑몰 제작) 회고 - 3.코딩 컨벤션</title><link>https://log.taedi.net/yi-teamproject-log-3/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-3/</guid><description>프로젝트 내내 덕을 많이 본 코딩 컨벤션이다. 하단 링크를 참고하여 간결하게 우리 프로젝트 만의 컨벤션을 정의했는데 기회가 된다면 이것보다도 더욱 정교하게 만들어 보고 싶다.
1. Basic 캠퍼스 핵데이 Java 코딩 컨벤션 을 준수 하며, JS 의 경우 Naver JavaScript Style Guide 를 가급적 지향하며 코딩할 것
1-1. IDE 설정 캠퍼스 핵데이 가이드에 따라 코딩할 수 있도록 IDE Formatter 적용이 가능함
1-1-1. Eclipse naver-eclipse-formatter.xml
아래 링크 D.1.* 내용 참고 https://naver.github.io/hackday-conventions-java/#_eclipse 1-1-2.</description></item><item><title>팀 프로젝트(쇼핑몰 제작) 회고 - 2.페이지 구상</title><link>https://log.taedi.net/yi-teamproject-log-2/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-2/</guid><description>쇼핑몰로 프로젝트 주제를 결정하고, 초기에 어떤 페이지가 필요할까 고민하며 작성해본 리스트다. 회의 단계에서 제외된 내용도 있고, 시간 여유상 구현하지 못한 기능들도 있다.
1. 기본 페이지 구성 idea 1-1. 사용자 상품리스트, 상품상세, 로그인/회원가입, 결제화면, 마이페이지, 장바구니, 질문답변, 리뷰, 비회원 기능, 비밀번호 초기화, 주문취소/반품, 이용약관, about
1-1-1. 메인(상품리스트) header, nav, main, footer 구성 제품 정렬 기능(인기순, 가격순, 세부조건) 카테고리별 구분 제품 재고 현황에 따라 sold out 처리 및 정렬에서 뒤로 빼기 페이징 처리 1-1-2.</description></item><item><title>팀 프로젝트(쇼핑몰 제작) 회고 - 1.후기</title><link>https://log.taedi.net/yi-teamproject-log-1/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0900</pubDate><guid>https://log.taedi.net/yi-teamproject-log-1/</guid><description>지난 한달간 조원 2명과 쇼핑몰 제작 프로젝트를 진행했고, 처음 팀 프로젝트를 경험하며 막막했던 부분들을 기록으로 남기고자 글을 작성하였다. 나와 마찬가지로 처음 팀 프로젝트를 경험할 누군가에게 도움이 될 수 있으면 좋겠다.
1. 후기 프로젝트를 진행하며 느낀 사항 중 좋았던 부분과 다음에 필히 개선해야겠다고 생각했던 부분을 되새겨 보았다.
1-1. 만족했던 점 팀 단위의 개발을 처음 경험해보며 혼자서 개발할 때는 추상적으로만 느껴졌던 협업에 대한 부분을 몸소 체험해볼 수 있는 기회가 되었고, 그러면서 여러 시도를 해볼 수 있어서 좋았다.</description></item></channel></rss>