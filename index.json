[{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"1. Flow 1-1. 주문하기 1-2. 주문 확인 2. 구현 Idea 2-1. 주문 대기열 삭제 주기  결제가 완료되지 않은 주문 대기열 매일 자정마다 삭제 (주문상품, 주문 릴레이션) 진행중인 주문이 삭제되는 경우 고려해야함 11시 55분에 작성한 주문 대기열이 바로 삭제되는 불상사도 고려해야함  → 자정마다 2일 이상 지난 미결제 대기열 삭제\n2-2. 주문 진행 상태 구분 주문번호가 일치하는 각 주문상품들의 상태를 보고 판단\n 결제 대기 - 주문 튜플은 있으나 결제 내역이 없다. 결제 완료 - 결제 내역만 있고 취소는 없다, 주문상품 총액과 결제 금액이 일치한다. 배송 준비중 배송중 배송 완료 주문 완료 주문 취소 - 결제 내역이 있으나 금액 합이 0이다. 반품 진행중 반품 완료  삭제 - 결제 내역이 없어야 삭제 가능 주문 대기열에서 취소를 눌렀거나, 조건으로 인하여 자동으로 삭제\n2-3. 포인트 환불, 반품 배송비 2-4. 주문 확인 창 구성 안 2-5. 결제 관련  client 단위에서 금액, 결제 상태, 포인트, 쿠폰 등을 임의로 조작하였는지 모듈을 작성하여 결제 전후로 체크가 필요 결제 구분(sort) - 결제, 취소 지불 방식(method) - 현금, 포인트  2-6. 그 외   결제 완료 시점에 재고 수량 빼기\n  취소 완료 시점에 수량 더하기\n  반품 완료는 재고 수량 체크 안함(수기 입력)\n  제품에 면세 구분 고려 안함\n  가격에 음수는 안 됨\n  ","date":"December 13, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/yi-teamproject-log-7/","summary":"1. Flow 1-1. 주문하기 1-2. 주문 확인 2. 구현 Idea 2-1. 주문 대기열 삭제 주기  결제가 완료되지 않은 주문 대기열 매일 자정마다 삭제 (주문상품, 주문 릴레이션) 진행중인 주문이 삭제되는 경우 고려해야함 11시 55분에 작성한 주문 대기열이 바로 삭제되는 불상사도 고려해야함  → 자정마다 2일 이상 지난 미결제 대기열 삭제\n2-2. 주문 진행 상태 구분 주문번호가 일치하는 각 주문상품들의 상태를 보고 판단\n 결제 대기 - 주문 튜플은 있으나 결제 내역이 없다.","tags":["log"],"title":"팀 프로젝트 회고 - 7.Flow(주문 \u0026 결제)"},{"categories":null,"contents":"0. 전제 조건  배송비는 발송 운임과 반송 운임으로 구분하며, 상품과 동일하게 취급한다. 발송 운임은 주문 당 1개를 초과할 수 없다. 반송 운임은 경우에 따라 중복 부과될 수 있다. 배송비는 편도 2,500원 왕복 5,000원으로 책정한다. 정가기준 50,000원 이상 구매 시 발송 운임은 판매자가 부담한다. 취소 반품 시, 배송비 아이템은 제외하고 계산한다. ex) 상품 A 10,000원 + 상품 B 15,000원 + 발송 운임 2,500원 = 합 27,500원 단순변심 반품 시 주문에 반송 운임 아이템 추가 운임 5,000원을 제외한 22,500원 환불  1. Flow 1-1. 주문 1-1-1. 주문 발생 1-1-2. 주문 수정 1-2. 취소 1-2-1. 전체 취소 1-2-2. 부분 취소 1-3. 반품 1-3-1. 전체 반품 1-3-2. 부분 반품 2. 구현 Idea 2-1. 배송비 부과 방식  상품 목록에 발송 운임, 반송 운임 항목을 추가한다. 발송-배송비는 결제 당시에 정가(할인 전 금액)를 합산하여 부과 여부를 결정하고 주문상품 리스트에 추가 또는 삭제한다. 부분-취소 또는 부분-반품이 발생할 경우 기초금액을 재환산하여 반품 금액을 산정한다. 배송비가 부과되어야 할 경우 주문상품에 배송비를 추가하고 차액 부분만 환불한다.(2500원 이하 제품이 있을경우 추가결제도 필요하다.) 제품 하자의 경우 배송비가 부과되지 않는다. (왕복) 하자있는 제품과 하자없는 제품을 일괄로 환불할 경우에도 배송비가 부과되지 않는다.  주의 - 여러 상품을 구매한 후 하자있는 상품을 반품하고, 이후에 하자없는 상품을 반품할 경우 배송비가 부과될 수 있는 문제 체크\n기타  취소 반품 시 배송비 아이템을 삭제할 것인지 취소 일자를 남길 것인지 논의 필요  ","date":"December 12, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/yi-teamproject-log-6/","summary":"0. 전제 조건  배송비는 발송 운임과 반송 운임으로 구분하며, 상품과 동일하게 취급한다. 발송 운임은 주문 당 1개를 초과할 수 없다. 반송 운임은 경우에 따라 중복 부과될 수 있다. 배송비는 편도 2,500원 왕복 5,000원으로 책정한다. 정가기준 50,000원 이상 구매 시 발송 운임은 판매자가 부담한다. 취소 반품 시, 배송비 아이템은 제외하고 계산한다. ex) 상품 A 10,000원 + 상품 B 15,000원 + 발송 운임 2,500원 = 합 27,500원 단순변심 반품 시 주문에 반송 운임 아이템 추가 운임 5,000원을 제외한 22,500원 환불  1.","tags":["log"],"title":"팀 프로젝트 회고 - 6.Flow(배송비)"},{"categories":null,"contents":"1. Flow 1-1. 회원가입 1-1-1. 회원가입(일반) 1-1-2. 회원가입(oAuth) 1-2. 로그인 1-3. 비밀번호 초기화(일반회원) 아이디 \u0026amp; 이메일 입력 → (server) 일치 확인 → (server) 임시 비밀번호 저장 및 메일 발송 → 로그인 시 비밀번호 변경 안내 띄우기\n2. 구현 Idea 회원가입(일반) 가입신청 → 약관 동의 → 정보입력 → 이메일 확인(session? table) → 가입 완료\n 이메일 링크에 아이디를 암호화한 주소를 줘서 해당 주소로 접속하면 확인 되는 걸로 하기\n 회원가입(oAuth) 가입신청 → 구글 로그인 및 정보 제공 동의 → (약관 동의) → 가입 완료\n 비밀번호는 암호화 모듈 이용해서 임의로 입력(어차피 미사용하지만 혹시 모를 상황 대비)\noAuth 속성에 true 주기\n 1-4. 이메일 인증 링크형식 이메일 발송 → 승인 시 로그인 허용\n이메일 인증\n→ 아이디를 암호화한 url 경로를 발송 example.com/confirm-email/2%2dfe23fde234fde\n","date":"December 11, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/yi-teamproject-log-5/","summary":"1. Flow 1-1. 회원가입 1-1-1. 회원가입(일반) 1-1-2. 회원가입(oAuth) 1-2. 로그인 1-3. 비밀번호 초기화(일반회원) 아이디 \u0026amp; 이메일 입력 → (server) 일치 확인 → (server) 임시 비밀번호 저장 및 메일 발송 → 로그인 시 비밀번호 변경 안내 띄우기\n2. 구현 Idea 회원가입(일반) 가입신청 → 약관 동의 → 정보입력 → 이메일 확인(session? table) → 가입 완료\n 이메일 링크에 아이디를 암호화한 주소를 줘서 해당 주소로 접속하면 확인 되는 걸로 하기\n 회원가입(oAuth) 가입신청 → 구글 로그인 및 정보 제공 동의 → (약관 동의) → 가입 완료","tags":["log"],"title":"팀 프로젝트 회고 - 5.Flow(회원가입\u0026로그인)"},{"categories":null,"contents":"백업 # mysqldump -u root -p --databases [DB명] \u0026gt; [저장경로/파일명] mysqldump -u root -p --databases [DB명] \u0026gt; /var/lib/mysql/project_2021-12-07.sql 복원 # mysqldump -u root -p [DB명] \u0026lt; [저장경로/파일명] mysql -u root -p project \u0026lt; /var/lib/mysql/project_2021-12-07.sql 참고  https://code-factory.tistory.com/21  ","date":"December 7, 2021","hero":"/images/hero/sql.png","permalink":"https://log.taedi.net/mysql-dump/","summary":"백업 # mysqldump -u root -p --databases [DB명] \u0026gt; [저장경로/파일명] mysqldump -u root -p --databases [DB명] \u0026gt; /var/lib/mysql/project_2021-12-07.sql 복원 # mysqldump -u root -p [DB명] \u0026lt; [저장경로/파일명] mysql -u root -p project \u0026lt; /var/lib/mysql/project_2021-12-07.sql 참고  https://code-factory.tistory.com/21  ","tags":null,"title":"[mysqldump] MySQL DB 백업 및 복구"},{"categories":null,"contents":"프로젝트를 진행하면서 가장 찾기 어려웠던 자료가 DB 구조에 대한 부분이었다. 정답이 명확하지도 않거니와 실제 서비스라면 핵심적인 로직이 드러날 수도 있는 부분이라 자료가 크게 없지 않을까 개인적으로 생각해보았다. 그리고 DB를 구현하기 위해서 Flow가 선행되어야 함을 느꼈고 두 과정을 병행하여 진행했던 기억이 있다.\n1. DB 초기부터 제품 교환에 대한 부분은 고려하지 않았고 논리적인 오류는 그때그때 수정하여 나온 결과지만 여기저기 미흡한 부분이 있을 수 있다.\n1-1. ERD 1-2.DDL -- project DROP SCHEMA IF EXISTS `project`; -- project CREATE SCHEMA `project`; USE `project`; CREATE TABLE carrier ( carrier_no int AUTO_INCREMENT COMMENT \u0026#39;택배사 코드\u0026#39; PRIMARY KEY, name varchar(100) NULL COMMENT \u0026#39;택배사 명\u0026#39;, biz_no char(10) NULL COMMENT \u0026#39;사업자번호\u0026#39; ) COMMENT \u0026#39;택배사\u0026#39;; CREATE TABLE category ( category_no int AUTO_INCREMENT COMMENT \u0026#39;카테고리 번호\u0026#39; PRIMARY KEY, title varchar(100) NULL COMMENT \u0026#39;카테고리 명\u0026#39; ) COMMENT \u0026#39;카테고리\u0026#39;; CREATE TABLE coupon ( coupon_no int AUTO_INCREMENT COMMENT \u0026#39;쿠폰번호\u0026#39; PRIMARY KEY, name varchar(100) NULL COMMENT \u0026#39;쿠폰명\u0026#39;, amount int NULL COMMENT \u0026#39;정액할인\u0026#39;, min_price int NULL COMMENT \u0026#39;제품하한가\u0026#39;, percent decimal(3, 2) NULL COMMENT \u0026#39;정률할인\u0026#39;, max_discount int NULL COMMENT \u0026#39;할인상한가\u0026#39;, validity int NULL COMMENT \u0026#39;유효기간\u0026#39; ) COMMENT \u0026#39;쿠폰\u0026#39;; CREATE TABLE keyword_history ( field varchar(100) NULL COMMENT \u0026#39;검색자\u0026#39;, keyword varchar(5000) NULL COMMENT \u0026#39;키워드\u0026#39;, reg_date timestamp NULL COMMENT \u0026#39;검색일자\u0026#39; ) COMMENT \u0026#39;검색키워드\u0026#39;; CREATE TABLE member ( username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39; PRIMARY KEY, password varchar(500) NOT NULL COMMENT \u0026#39;비밀번호\u0026#39;, name varchar(100) NOT NULL COMMENT \u0026#39;이름\u0026#39;, email varchar(200) NOT NULL COMMENT \u0026#39;이메일\u0026#39;, email_confirm tinyint(1) DEFAULT \u0026#39;0\u0026#39; NOT NULL COMMENT \u0026#39;이메일 본인확인\u0026#39;, phone char(11) NULL COMMENT \u0026#39;휴대폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;생성일자\u0026#39;, withdrawal_date timestamp NULL COMMENT \u0026#39;탈퇴일자\u0026#39;, social tinyint(1) NOT NULL COMMENT \u0026#39;소셜회원 여부\u0026#39;, temp_pass tinyint(1) DEFAULT \u0026#39;0\u0026#39; NULL COMMENT \u0026#39;임시비밀번호여부\u0026#39;, enabled tinyint(1) DEFAULT \u0026#39;1\u0026#39; NOT NULL COMMENT \u0026#39;활성화 상태\u0026#39; ) COMMENT \u0026#39;회원\u0026#39;; CREATE TABLE auth ( username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, authority varchar(50) NOT NULL COMMENT \u0026#39;권한\u0026#39;, PRIMARY KEY (username, authority), CONSTRAINT fk_member_to_auth FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;권한\u0026#39;; CREATE TABLE persistent_logins ( username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, series varchar(64) NOT NULL COMMENT \u0026#39;시리즈\u0026#39; PRIMARY KEY, token varchar(64) NOT NULL COMMENT \u0026#39;토큰\u0026#39;, last_used timestamp NOT NULL COMMENT \u0026#39;마지막 사용\u0026#39; ) COMMENT \u0026#39;자동 로그인\u0026#39;; CREATE TABLE address ( username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;배송지별칭\u0026#39;, zipcode char(5) NULL COMMENT \u0026#39;우편번호\u0026#39;, address1 varchar(500) NULL COMMENT \u0026#39;주소 앞\u0026#39;, address2 varchar(500) NULL COMMENT \u0026#39;주소 상세\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;받는분\u0026#39;, phone char(11) NULL COMMENT \u0026#39;휴대폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;등록일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, CONSTRAINT fk_member_to_address FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;주소\u0026#39;; CREATE TABLE coupon_history ( issue_number bigint AUTO_INCREMENT COMMENT \u0026#39;쿠폰발급번호\u0026#39;, coupon_no int NOT NULL COMMENT \u0026#39;쿠폰번호\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;발급일자\u0026#39;, expire_date timestamp NULL COMMENT \u0026#39;만료일자\u0026#39;, use_date timestamp NULL COMMENT \u0026#39;사용일자\u0026#39;, use_order bigint NULL COMMENT \u0026#39;사용주문\u0026#39;, PRIMARY KEY (issue_number, coupon_no, username), CONSTRAINT fk_coupon_to_coupon_history FOREIGN KEY (coupon_no) REFERENCES coupon (coupon_no), CONSTRAINT fk_member_to_coupon_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;쿠폰발급이력\u0026#39;; CREATE TABLE non_member ( non_username varchar(100) NOT NULL COMMENT \u0026#39;임시아이디\u0026#39; PRIMARY KEY, password varchar(500) NULL COMMENT \u0026#39;주문확인비번\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;이름\u0026#39;, email varchar(200) NULL COMMENT \u0026#39;이메일\u0026#39;, phone char(11) NULL COMMENT \u0026#39;핸드폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;등록일자\u0026#39; ) COMMENT \u0026#39;비회원\u0026#39;; CREATE TABLE `order` ( order_no bigint NOT NULL COMMENT \u0026#39;주문번호\u0026#39; PRIMARY KEY, username varchar(100) NULL COMMENT \u0026#39;회원아이디\u0026#39;, non_username varchar(100) NULL COMMENT \u0026#39;비회원아이디\u0026#39;, zipcode char(5) NULL COMMENT \u0026#39;우편번호\u0026#39;, address1 varchar(500) NULL COMMENT \u0026#39;주소 앞\u0026#39;, address2 varchar(500) NULL COMMENT \u0026#39;주소 상세\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;받는분\u0026#39;, phone char(11) NULL COMMENT \u0026#39;휴대폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;생성일자\u0026#39;, point int NULL COMMENT \u0026#39;포인트 사용액\u0026#39;, status varchar(50) NULL COMMENT \u0026#39;주문상태\u0026#39;, CONSTRAINT fk_member_to_order FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_non_member_to_order FOREIGN KEY (non_username) REFERENCES non_member (non_username) ) COMMENT \u0026#39;주문\u0026#39;; CREATE TABLE pass_history ( username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, password varchar(500) NULL COMMENT \u0026#39;비밀번호\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;설정일자\u0026#39;, CONSTRAINT fk_member_to_pass_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;pass_history\u0026#39;; CREATE TABLE payment ( payment_no bigint AUTO_INCREMENT COMMENT \u0026#39;번호\u0026#39; PRIMARY KEY, sort varchar(50) NULL COMMENT \u0026#39;결제구분\u0026#39;, method varchar(50) NULL COMMENT \u0026#39;지불방식\u0026#39;, order_no bigint NULL COMMENT \u0026#39;주문번호\u0026#39;, uid varchar(50) NULL COMMENT \u0026#39;pg사 결제번호\u0026#39;, amount int NULL COMMENT \u0026#39;결제금액\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;결제일자\u0026#39;, CONSTRAINT fk_order_to_payment FOREIGN KEY (order_no) REFERENCES `order` (order_no) ) COMMENT \u0026#39;결제환불\u0026#39;; CREATE TABLE point ( point_no bigint AUTO_INCREMENT COMMENT \u0026#39;포인트 번호\u0026#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, point int NULL COMMENT \u0026#39;포인트\u0026#39;, order_item_no bigint NULL COMMENT \u0026#39;주문상품번호\u0026#39;, review_no bigint NULL COMMENT \u0026#39;리뷰번호\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;적립일\u0026#39;, exp_date timestamp NULL COMMENT \u0026#39;만료일\u0026#39;, CONSTRAINT fk_member_to_point FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;포인트\u0026#39;; CREATE TABLE privacy_policy ( policy_no int AUTO_INCREMENT COMMENT \u0026#39;번호\u0026#39; PRIMARY KEY, text varchar(10000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39; ) COMMENT \u0026#39;개인정보 처리 방침\u0026#39;; CREATE table privacy_agreement ( username varchar(100) NOT NULL COMMENT \u0026#39;동의자 아이디\u0026#39;, policy_no int NOT NULL COMMENT \u0026#39;약관번호\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;동의일자\u0026#39;, PRIMARY KEY (username, policy_no), CONSTRAINT fk_member_to_privacy_agreement FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_privacy_policy_to_privacy_agreement FOREIGN KEY (policy_no) REFERENCES privacy_policy (policy_no) ) COMMENT \u0026#39;개인정보 처리 방침 동의 내역\u0026#39;; CREATE TABLE product_info_announce ( pia_no int AUTO_INCREMENT COMMENT \u0026#39;고시_번호\u0026#39; PRIMARY KEY, title varchar(100) NULL COMMENT \u0026#39;템플릿 명\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39; ) COMMENT \u0026#39;상품정보제공고시\u0026#39;; CREATE TABLE item ( item_no int AUTO_INCREMENT COMMENT \u0026#39;상품번호\u0026#39; PRIMARY KEY, category_no int NULL COMMENT \u0026#39;카테고리번호\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;상품명\u0026#39;, price int NULL COMMENT \u0026#39;가격\u0026#39;, discount int NULL COMMENT \u0026#39;할인_가격\u0026#39;, start_discount timestamp NULL COMMENT \u0026#39;할인_시작일\u0026#39;, end_discount timestamp NULL COMMENT \u0026#39;할인_종료일\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;제목\u0026#39;, text varchar(10000) NULL COMMENT \u0026#39;내용\u0026#39;, image varchar(200) NULL UNIQUE COMMENT \u0026#39;상품이미지\u0026#39;, pia_no int NULL COMMENT \u0026#39;상품정보제공고시_번호\u0026#39;, coupon_allow tinyint(1) NULL COMMENT \u0026#39;쿠폰할인가능여부\u0026#39;, hide tinyint(1) NULL COMMENT \u0026#39;상품숨기기\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;작성자\u0026#39;, publish tinyint(1) NULL COMMENT \u0026#39;발행여부\u0026#39;, CONSTRAINT fk_category_to_item FOREIGN KEY (category_no) REFERENCES category (category_no) ON UPDATE CASCADE, CONSTRAINT fk_product_info_announce_to_item FOREIGN KEY (pia_no) REFERENCES product_info_announce (pia_no) ON UPDATE CASCADE, CONSTRAINT fk_member_to_item FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;상품정보\u0026#39;; CREATE TABLE `option` ( option_no bigint AUTO_INCREMENT COMMENT \u0026#39;옵션번호\u0026#39;, item_no int NOT NULL COMMENT \u0026#39;상품번호\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;옵션명\u0026#39;, option_price int NULL COMMENT \u0026#39;추가금액\u0026#39;, stock int NULL COMMENT \u0026#39;재고수량\u0026#39;, PRIMARY KEY (option_no, item_no), CONSTRAINT fk_item_to_option FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT \u0026#39;상품옵션\u0026#39;; CREATE TABLE cart ( cart_no bigint AUTO_INCREMENT COMMENT \u0026#39;장바구니 번호\u0026#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, option_no bigint NULL COMMENT \u0026#39;옵션번호\u0026#39;, item_no int NULL COMMENT \u0026#39;상품번호\u0026#39;, quantity int NULL COMMENT \u0026#39;수량\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;등록일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, CONSTRAINT fk_member_to_cart FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_option_to_cart FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON DELETE CASCADE ON UPDATE CASCADE ) COMMENT \u0026#39;장바구니\u0026#39;; CREATE TABLE question ( question_no bigint AUTO_INCREMENT COMMENT \u0026#39;질문번호\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, item_no int NULL COMMENT \u0026#39;상품번호\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;제목\u0026#39;, secret tinyint(1) NULL COMMENT \u0026#39;비밀글여부\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39;, answer_title varchar(100) NULL COMMENT \u0026#39;답변_제목\u0026#39;, answer_text varchar(5000) NULL COMMENT \u0026#39;답변_내용\u0026#39;, answer_id varchar(100) NULL COMMENT \u0026#39;답변_작성자\u0026#39;, answer_reg_date timestamp NULL COMMENT \u0026#39;답변_작성일\u0026#39;, PRIMARY KEY (question_no, username), CONSTRAINT fk_item_to_question FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_member_to_question FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;질문답변\u0026#39;; CREATE TABLE return_option ( return_option_code int AUTO_INCREMENT COMMENT \u0026#39;반품_코드\u0026#39; PRIMARY KEY, reason varchar(50) NULL COMMENT \u0026#39;반품_사유\u0026#39;, return_free tinyint(1) NULL COMMENT \u0026#39;배송비 면제\u0026#39;, comment varchar(5000) NULL COMMENT \u0026#39;비고\u0026#39; ) COMMENT \u0026#39;반품사유\u0026#39;; CREATE TABLE order_item ( order_item_no bigint AUTO_INCREMENT COMMENT \u0026#39;주문상품번호\u0026#39;, order_no bigint NOT NULL COMMENT \u0026#39;주문번호\u0026#39;, item_no int NULL COMMENT \u0026#39;상품번호\u0026#39;, option_no bigint NULL COMMENT \u0026#39;옵션번호\u0026#39;, option_name varchar(100) NULL COMMENT \u0026#39;옵션명\u0026#39;, issue_number bigint NULL COMMENT \u0026#39;쿠폰발급번호\u0026#39;, coupon_no int NULL COMMENT \u0026#39;쿠폰번호\u0026#39;, price_item int NULL COMMENT \u0026#39;상품 금액\u0026#39;, price_option int NULL COMMENT \u0026#39;옵션 금액\u0026#39;, price_coupon int NULL COMMENT \u0026#39;할인 금액\u0026#39;, prepare_date timestamp NULL COMMENT \u0026#39;배송_준비일\u0026#39;, delivery_carrier_no int NULL COMMENT \u0026#39;택배사번호\u0026#39;, tracking_number int NULL COMMENT \u0026#39;배송_운송장번호\u0026#39;, delivery_start_date timestamp NULL COMMENT \u0026#39;배송_운송장등록일\u0026#39;, delivery_end_date timestamp NULL COMMENT \u0026#39;배송_완료일\u0026#39;, confirm_date timestamp NULL COMMENT \u0026#39;구매_확정일\u0026#39;, cancel_date timestamp NULL COMMENT \u0026#39;취소_요청일\u0026#39;, return_date timestamp NULL COMMENT \u0026#39;반품_요청일\u0026#39;, return_carrier_no int NULL COMMENT \u0026#39;반품_택배사번호\u0026#39;, return_number timestamp NULL COMMENT \u0026#39;반품_운송장\u0026#39;, return_confirm_date timestamp NULL COMMENT \u0026#39;반품_처리일\u0026#39;, return_option_code int NULL COMMENT \u0026#39;반품_코드\u0026#39;, refund_date timestamp NULL COMMENT \u0026#39;환불_일자\u0026#39;, PRIMARY KEY (order_item_no, order_no), CONSTRAINT fk_carrier_to_order_item FOREIGN KEY (delivery_carrier_no) REFERENCES carrier (carrier_no) ON UPDATE CASCADE, CONSTRAINT fk_coupon_history_to_order_item FOREIGN KEY (issue_number, coupon_no) REFERENCES coupon_history (issue_number, coupon_no) ON UPDATE CASCADE, CONSTRAINT fk_option_to_order_item FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_order_to_order_item FOREIGN KEY (order_no) REFERENCES `order` (order_no) ON UPDATE CASCADE, CONSTRAINT fk_return_option_to_order_item FOREIGN KEY (return_option_code) REFERENCES return_option (return_option_code) ON UPDATE CASCADE ) COMMENT \u0026#39;주문상품\u0026#39;; CREATE TABLE review ( review_no bigint AUTO_INCREMENT COMMENT \u0026#39;리뷰번호\u0026#39;, order_item_no bigint NOT NULL COMMENT \u0026#39;주문상품번호\u0026#39;, order_no bigint NOT NULL COMMENT \u0026#39;주문번호\u0026#39;, username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, star int NULL COMMENT \u0026#39;별점\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;제목\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일\u0026#39;, answer_text varchar(5000) NULL COMMENT \u0026#39;답변 내용\u0026#39;, answer_id varchar(100) NULL COMMENT \u0026#39;답변 담당자\u0026#39;, answer_reg_date timestamp NULL COMMENT \u0026#39;답변 작성일\u0026#39;, answer_mod_date timestamp NULL COMMENT \u0026#39;답변 수정일\u0026#39;, PRIMARY KEY (review_no, order_item_no, order_no), CONSTRAINT fk_member_to_review FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_order_item_to_review FOREIGN KEY (order_item_no, order_no) REFERENCES order_item (order_item_no, order_no) ) COMMENT \u0026#39;리뷰\u0026#39;; CREATE TABLE `like` ( review_no bigint NOT NULL COMMENT \u0026#39;리뷰번호\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, reg_date timestamp NULL COMMENT \u0026#39;일자\u0026#39;, PRIMARY KEY (review_no, username), CONSTRAINT fk_member_to_like FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_review_to_like FOREIGN KEY (review_no) REFERENCES review (review_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT \u0026#39;좋아요\u0026#39;; CREATE TABLE review_comment ( comment_no bigint AUTO_INCREMENT COMMENT \u0026#39;댓글번호\u0026#39; PRIMARY KEY, order_item_no bigint NULL COMMENT \u0026#39;주문상품번호\u0026#39;, review_no bigint NULL COMMENT \u0026#39;리뷰번호\u0026#39;, username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, order_no bigint NULL COMMENT \u0026#39;주문번호\u0026#39;, CONSTRAINT fk_member_to_review_comment FOREIGN KEY (username) REFERENCES member (username) ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT fk_review_to_review_comment FOREIGN KEY (review_no) REFERENCES review (review_no) ) COMMENT \u0026#39;리뷰댓글\u0026#39;; CREATE TABLE review_template ( no int AUTO_INCREMENT COMMENT \u0026#39;번호\u0026#39; PRIMARY KEY, name varchar(100) NULL COMMENT \u0026#39;별칭\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일\u0026#39; ) COMMENT \u0026#39;리뷰 답변 템플릿\u0026#39;; ","date":"December 7, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/yi-teamproject-log-4/","summary":"프로젝트를 진행하면서 가장 찾기 어려웠던 자료가 DB 구조에 대한 부분이었다. 정답이 명확하지도 않거니와 실제 서비스라면 핵심적인 로직이 드러날 수도 있는 부분이라 자료가 크게 없지 않을까 개인적으로 생각해보았다. 그리고 DB를 구현하기 위해서 Flow가 선행되어야 함을 느꼈고 두 과정을 병행하여 진행했던 기억이 있다.\n1. DB 초기부터 제품 교환에 대한 부분은 고려하지 않았고 논리적인 오류는 그때그때 수정하여 나온 결과지만 여기저기 미흡한 부분이 있을 수 있다.\n1-1. ERD 1-2.DDL -- project DROP SCHEMA IF EXISTS `project`; -- project CREATE SCHEMA `project`; USE `project`; CREATE TABLE carrier ( carrier_no int AUTO_INCREMENT COMMENT \u0026#39;택배사 코드\u0026#39; PRIMARY KEY, name varchar(100) NULL COMMENT \u0026#39;택배사 명\u0026#39;, biz_no char(10) NULL COMMENT \u0026#39;사업자번호\u0026#39; ) COMMENT \u0026#39;택배사\u0026#39;; CREATE TABLE category ( category_no int AUTO_INCREMENT COMMENT \u0026#39;카테고리 번호\u0026#39; PRIMARY KEY, title varchar(100) NULL COMMENT \u0026#39;카테고리 명\u0026#39; ) COMMENT \u0026#39;카테고리\u0026#39;; CREATE TABLE coupon ( coupon_no int AUTO_INCREMENT COMMENT \u0026#39;쿠폰번호\u0026#39; PRIMARY KEY, name varchar(100) NULL COMMENT \u0026#39;쿠폰명\u0026#39;, amount int NULL COMMENT \u0026#39;정액할인\u0026#39;, min_price int NULL COMMENT \u0026#39;제품하한가\u0026#39;, percent decimal(3, 2) NULL COMMENT \u0026#39;정률할인\u0026#39;, max_discount int NULL COMMENT \u0026#39;할인상한가\u0026#39;, validity int NULL COMMENT \u0026#39;유효기간\u0026#39; ) COMMENT \u0026#39;쿠폰\u0026#39;; CREATE TABLE keyword_history ( field varchar(100) NULL COMMENT \u0026#39;검색자\u0026#39;, keyword varchar(5000) NULL COMMENT \u0026#39;키워드\u0026#39;, reg_date timestamp NULL COMMENT \u0026#39;검색일자\u0026#39; ) COMMENT \u0026#39;검색키워드\u0026#39;; CREATE TABLE member ( username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39; PRIMARY KEY, password varchar(500) NOT NULL COMMENT \u0026#39;비밀번호\u0026#39;, name varchar(100) NOT NULL COMMENT \u0026#39;이름\u0026#39;, email varchar(200) NOT NULL COMMENT \u0026#39;이메일\u0026#39;, email_confirm tinyint(1) DEFAULT \u0026#39;0\u0026#39; NOT NULL COMMENT \u0026#39;이메일 본인확인\u0026#39;, phone char(11) NULL COMMENT \u0026#39;휴대폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;생성일자\u0026#39;, withdrawal_date timestamp NULL COMMENT \u0026#39;탈퇴일자\u0026#39;, social tinyint(1) NOT NULL COMMENT \u0026#39;소셜회원 여부\u0026#39;, temp_pass tinyint(1) DEFAULT \u0026#39;0\u0026#39; NULL COMMENT \u0026#39;임시비밀번호여부\u0026#39;, enabled tinyint(1) DEFAULT \u0026#39;1\u0026#39; NOT NULL COMMENT \u0026#39;활성화 상태\u0026#39; ) COMMENT \u0026#39;회원\u0026#39;; CREATE TABLE auth ( username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, authority varchar(50) NOT NULL COMMENT \u0026#39;권한\u0026#39;, PRIMARY KEY (username, authority), CONSTRAINT fk_member_to_auth FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;권한\u0026#39;; CREATE TABLE persistent_logins ( username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, series varchar(64) NOT NULL COMMENT \u0026#39;시리즈\u0026#39; PRIMARY KEY, token varchar(64) NOT NULL COMMENT \u0026#39;토큰\u0026#39;, last_used timestamp NOT NULL COMMENT \u0026#39;마지막 사용\u0026#39; ) COMMENT \u0026#39;자동 로그인\u0026#39;; CREATE TABLE address ( username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;배송지별칭\u0026#39;, zipcode char(5) NULL COMMENT \u0026#39;우편번호\u0026#39;, address1 varchar(500) NULL COMMENT \u0026#39;주소 앞\u0026#39;, address2 varchar(500) NULL COMMENT \u0026#39;주소 상세\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;받는분\u0026#39;, phone char(11) NULL COMMENT \u0026#39;휴대폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;등록일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, CONSTRAINT fk_member_to_address FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;주소\u0026#39;; CREATE TABLE coupon_history ( issue_number bigint AUTO_INCREMENT COMMENT \u0026#39;쿠폰발급번호\u0026#39;, coupon_no int NOT NULL COMMENT \u0026#39;쿠폰번호\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;발급일자\u0026#39;, expire_date timestamp NULL COMMENT \u0026#39;만료일자\u0026#39;, use_date timestamp NULL COMMENT \u0026#39;사용일자\u0026#39;, use_order bigint NULL COMMENT \u0026#39;사용주문\u0026#39;, PRIMARY KEY (issue_number, coupon_no, username), CONSTRAINT fk_coupon_to_coupon_history FOREIGN KEY (coupon_no) REFERENCES coupon (coupon_no), CONSTRAINT fk_member_to_coupon_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;쿠폰발급이력\u0026#39;; CREATE TABLE non_member ( non_username varchar(100) NOT NULL COMMENT \u0026#39;임시아이디\u0026#39; PRIMARY KEY, password varchar(500) NULL COMMENT \u0026#39;주문확인비번\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;이름\u0026#39;, email varchar(200) NULL COMMENT \u0026#39;이메일\u0026#39;, phone char(11) NULL COMMENT \u0026#39;핸드폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;등록일자\u0026#39; ) COMMENT \u0026#39;비회원\u0026#39;; CREATE TABLE `order` ( order_no bigint NOT NULL COMMENT \u0026#39;주문번호\u0026#39; PRIMARY KEY, username varchar(100) NULL COMMENT \u0026#39;회원아이디\u0026#39;, non_username varchar(100) NULL COMMENT \u0026#39;비회원아이디\u0026#39;, zipcode char(5) NULL COMMENT \u0026#39;우편번호\u0026#39;, address1 varchar(500) NULL COMMENT \u0026#39;주소 앞\u0026#39;, address2 varchar(500) NULL COMMENT \u0026#39;주소 상세\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;받는분\u0026#39;, phone char(11) NULL COMMENT \u0026#39;휴대폰\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;생성일자\u0026#39;, point int NULL COMMENT \u0026#39;포인트 사용액\u0026#39;, status varchar(50) NULL COMMENT \u0026#39;주문상태\u0026#39;, CONSTRAINT fk_member_to_order FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_non_member_to_order FOREIGN KEY (non_username) REFERENCES non_member (non_username) ) COMMENT \u0026#39;주문\u0026#39;; CREATE TABLE pass_history ( username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, password varchar(500) NULL COMMENT \u0026#39;비밀번호\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;설정일자\u0026#39;, CONSTRAINT fk_member_to_pass_history FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;pass_history\u0026#39;; CREATE TABLE payment ( payment_no bigint AUTO_INCREMENT COMMENT \u0026#39;번호\u0026#39; PRIMARY KEY, sort varchar(50) NULL COMMENT \u0026#39;결제구분\u0026#39;, method varchar(50) NULL COMMENT \u0026#39;지불방식\u0026#39;, order_no bigint NULL COMMENT \u0026#39;주문번호\u0026#39;, uid varchar(50) NULL COMMENT \u0026#39;pg사 결제번호\u0026#39;, amount int NULL COMMENT \u0026#39;결제금액\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;결제일자\u0026#39;, CONSTRAINT fk_order_to_payment FOREIGN KEY (order_no) REFERENCES `order` (order_no) ) COMMENT \u0026#39;결제환불\u0026#39;; CREATE TABLE point ( point_no bigint AUTO_INCREMENT COMMENT \u0026#39;포인트 번호\u0026#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, point int NULL COMMENT \u0026#39;포인트\u0026#39;, order_item_no bigint NULL COMMENT \u0026#39;주문상품번호\u0026#39;, review_no bigint NULL COMMENT \u0026#39;리뷰번호\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;적립일\u0026#39;, exp_date timestamp NULL COMMENT \u0026#39;만료일\u0026#39;, CONSTRAINT fk_member_to_point FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;포인트\u0026#39;; CREATE TABLE privacy_policy ( policy_no int AUTO_INCREMENT COMMENT \u0026#39;번호\u0026#39; PRIMARY KEY, text varchar(10000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39; ) COMMENT \u0026#39;개인정보 처리 방침\u0026#39;; CREATE table privacy_agreement ( username varchar(100) NOT NULL COMMENT \u0026#39;동의자 아이디\u0026#39;, policy_no int NOT NULL COMMENT \u0026#39;약관번호\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;동의일자\u0026#39;, PRIMARY KEY (username, policy_no), CONSTRAINT fk_member_to_privacy_agreement FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_privacy_policy_to_privacy_agreement FOREIGN KEY (policy_no) REFERENCES privacy_policy (policy_no) ) COMMENT \u0026#39;개인정보 처리 방침 동의 내역\u0026#39;; CREATE TABLE product_info_announce ( pia_no int AUTO_INCREMENT COMMENT \u0026#39;고시_번호\u0026#39; PRIMARY KEY, title varchar(100) NULL COMMENT \u0026#39;템플릿 명\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39; ) COMMENT \u0026#39;상품정보제공고시\u0026#39;; CREATE TABLE item ( item_no int AUTO_INCREMENT COMMENT \u0026#39;상품번호\u0026#39; PRIMARY KEY, category_no int NULL COMMENT \u0026#39;카테고리번호\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;상품명\u0026#39;, price int NULL COMMENT \u0026#39;가격\u0026#39;, discount int NULL COMMENT \u0026#39;할인_가격\u0026#39;, start_discount timestamp NULL COMMENT \u0026#39;할인_시작일\u0026#39;, end_discount timestamp NULL COMMENT \u0026#39;할인_종료일\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;제목\u0026#39;, text varchar(10000) NULL COMMENT \u0026#39;내용\u0026#39;, image varchar(200) NULL UNIQUE COMMENT \u0026#39;상품이미지\u0026#39;, pia_no int NULL COMMENT \u0026#39;상품정보제공고시_번호\u0026#39;, coupon_allow tinyint(1) NULL COMMENT \u0026#39;쿠폰할인가능여부\u0026#39;, hide tinyint(1) NULL COMMENT \u0026#39;상품숨기기\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;작성자\u0026#39;, publish tinyint(1) NULL COMMENT \u0026#39;발행여부\u0026#39;, CONSTRAINT fk_category_to_item FOREIGN KEY (category_no) REFERENCES category (category_no) ON UPDATE CASCADE, CONSTRAINT fk_product_info_announce_to_item FOREIGN KEY (pia_no) REFERENCES product_info_announce (pia_no) ON UPDATE CASCADE, CONSTRAINT fk_member_to_item FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;상품정보\u0026#39;; CREATE TABLE `option` ( option_no bigint AUTO_INCREMENT COMMENT \u0026#39;옵션번호\u0026#39;, item_no int NOT NULL COMMENT \u0026#39;상품번호\u0026#39;, name varchar(100) NULL COMMENT \u0026#39;옵션명\u0026#39;, option_price int NULL COMMENT \u0026#39;추가금액\u0026#39;, stock int NULL COMMENT \u0026#39;재고수량\u0026#39;, PRIMARY KEY (option_no, item_no), CONSTRAINT fk_item_to_option FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT \u0026#39;상품옵션\u0026#39;; CREATE TABLE cart ( cart_no bigint AUTO_INCREMENT COMMENT \u0026#39;장바구니 번호\u0026#39; PRIMARY KEY, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, option_no bigint NULL COMMENT \u0026#39;옵션번호\u0026#39;, item_no int NULL COMMENT \u0026#39;상품번호\u0026#39;, quantity int NULL COMMENT \u0026#39;수량\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;등록일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, CONSTRAINT fk_member_to_cart FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_option_to_cart FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON DELETE CASCADE ON UPDATE CASCADE ) COMMENT \u0026#39;장바구니\u0026#39;; CREATE TABLE question ( question_no bigint AUTO_INCREMENT COMMENT \u0026#39;질문번호\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, item_no int NULL COMMENT \u0026#39;상품번호\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;제목\u0026#39;, secret tinyint(1) NULL COMMENT \u0026#39;비밀글여부\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39;, answer_title varchar(100) NULL COMMENT \u0026#39;답변_제목\u0026#39;, answer_text varchar(5000) NULL COMMENT \u0026#39;답변_내용\u0026#39;, answer_id varchar(100) NULL COMMENT \u0026#39;답변_작성자\u0026#39;, answer_reg_date timestamp NULL COMMENT \u0026#39;답변_작성일\u0026#39;, PRIMARY KEY (question_no, username), CONSTRAINT fk_item_to_question FOREIGN KEY (item_no) REFERENCES item (item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_member_to_question FOREIGN KEY (username) REFERENCES member (username) ) COMMENT \u0026#39;질문답변\u0026#39;; CREATE TABLE return_option ( return_option_code int AUTO_INCREMENT COMMENT \u0026#39;반품_코드\u0026#39; PRIMARY KEY, reason varchar(50) NULL COMMENT \u0026#39;반품_사유\u0026#39;, return_free tinyint(1) NULL COMMENT \u0026#39;배송비 면제\u0026#39;, comment varchar(5000) NULL COMMENT \u0026#39;비고\u0026#39; ) COMMENT \u0026#39;반품사유\u0026#39;; CREATE TABLE order_item ( order_item_no bigint AUTO_INCREMENT COMMENT \u0026#39;주문상품번호\u0026#39;, order_no bigint NOT NULL COMMENT \u0026#39;주문번호\u0026#39;, item_no int NULL COMMENT \u0026#39;상품번호\u0026#39;, option_no bigint NULL COMMENT \u0026#39;옵션번호\u0026#39;, option_name varchar(100) NULL COMMENT \u0026#39;옵션명\u0026#39;, issue_number bigint NULL COMMENT \u0026#39;쿠폰발급번호\u0026#39;, coupon_no int NULL COMMENT \u0026#39;쿠폰번호\u0026#39;, price_item int NULL COMMENT \u0026#39;상품 금액\u0026#39;, price_option int NULL COMMENT \u0026#39;옵션 금액\u0026#39;, price_coupon int NULL COMMENT \u0026#39;할인 금액\u0026#39;, prepare_date timestamp NULL COMMENT \u0026#39;배송_준비일\u0026#39;, delivery_carrier_no int NULL COMMENT \u0026#39;택배사번호\u0026#39;, tracking_number int NULL COMMENT \u0026#39;배송_운송장번호\u0026#39;, delivery_start_date timestamp NULL COMMENT \u0026#39;배송_운송장등록일\u0026#39;, delivery_end_date timestamp NULL COMMENT \u0026#39;배송_완료일\u0026#39;, confirm_date timestamp NULL COMMENT \u0026#39;구매_확정일\u0026#39;, cancel_date timestamp NULL COMMENT \u0026#39;취소_요청일\u0026#39;, return_date timestamp NULL COMMENT \u0026#39;반품_요청일\u0026#39;, return_carrier_no int NULL COMMENT \u0026#39;반품_택배사번호\u0026#39;, return_number timestamp NULL COMMENT \u0026#39;반품_운송장\u0026#39;, return_confirm_date timestamp NULL COMMENT \u0026#39;반품_처리일\u0026#39;, return_option_code int NULL COMMENT \u0026#39;반품_코드\u0026#39;, refund_date timestamp NULL COMMENT \u0026#39;환불_일자\u0026#39;, PRIMARY KEY (order_item_no, order_no), CONSTRAINT fk_carrier_to_order_item FOREIGN KEY (delivery_carrier_no) REFERENCES carrier (carrier_no) ON UPDATE CASCADE, CONSTRAINT fk_coupon_history_to_order_item FOREIGN KEY (issue_number, coupon_no) REFERENCES coupon_history (issue_number, coupon_no) ON UPDATE CASCADE, CONSTRAINT fk_option_to_order_item FOREIGN KEY (option_no, item_no) REFERENCES `option` (option_no, item_no) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT fk_order_to_order_item FOREIGN KEY (order_no) REFERENCES `order` (order_no) ON UPDATE CASCADE, CONSTRAINT fk_return_option_to_order_item FOREIGN KEY (return_option_code) REFERENCES return_option (return_option_code) ON UPDATE CASCADE ) COMMENT \u0026#39;주문상품\u0026#39;; CREATE TABLE review ( review_no bigint AUTO_INCREMENT COMMENT \u0026#39;리뷰번호\u0026#39;, order_item_no bigint NOT NULL COMMENT \u0026#39;주문상품번호\u0026#39;, order_no bigint NOT NULL COMMENT \u0026#39;주문번호\u0026#39;, username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, star int NULL COMMENT \u0026#39;별점\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, title varchar(100) NULL COMMENT \u0026#39;제목\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일\u0026#39;, answer_text varchar(5000) NULL COMMENT \u0026#39;답변 내용\u0026#39;, answer_id varchar(100) NULL COMMENT \u0026#39;답변 담당자\u0026#39;, answer_reg_date timestamp NULL COMMENT \u0026#39;답변 작성일\u0026#39;, answer_mod_date timestamp NULL COMMENT \u0026#39;답변 수정일\u0026#39;, PRIMARY KEY (review_no, order_item_no, order_no), CONSTRAINT fk_member_to_review FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_order_item_to_review FOREIGN KEY (order_item_no, order_no) REFERENCES order_item (order_item_no, order_no) ) COMMENT \u0026#39;리뷰\u0026#39;; CREATE TABLE `like` ( review_no bigint NOT NULL COMMENT \u0026#39;리뷰번호\u0026#39;, username varchar(100) NOT NULL COMMENT \u0026#39;아이디\u0026#39;, reg_date timestamp NULL COMMENT \u0026#39;일자\u0026#39;, PRIMARY KEY (review_no, username), CONSTRAINT fk_member_to_like FOREIGN KEY (username) REFERENCES member (username), CONSTRAINT fk_review_to_like FOREIGN KEY (review_no) REFERENCES review (review_no) ON UPDATE CASCADE ON DELETE CASCADE ) COMMENT \u0026#39;좋아요\u0026#39;; CREATE TABLE review_comment ( comment_no bigint AUTO_INCREMENT COMMENT \u0026#39;댓글번호\u0026#39; PRIMARY KEY, order_item_no bigint NULL COMMENT \u0026#39;주문상품번호\u0026#39;, review_no bigint NULL COMMENT \u0026#39;리뷰번호\u0026#39;, username varchar(100) NULL COMMENT \u0026#39;아이디\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일자\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일자\u0026#39;, order_no bigint NULL COMMENT \u0026#39;주문번호\u0026#39;, CONSTRAINT fk_member_to_review_comment FOREIGN KEY (username) REFERENCES member (username) ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT fk_review_to_review_comment FOREIGN KEY (review_no) REFERENCES review (review_no) ) COMMENT \u0026#39;리뷰댓글\u0026#39;; CREATE TABLE review_template ( no int AUTO_INCREMENT COMMENT \u0026#39;번호\u0026#39; PRIMARY KEY, name varchar(100) NULL COMMENT \u0026#39;별칭\u0026#39;, text varchar(5000) NULL COMMENT \u0026#39;내용\u0026#39;, reg_date timestamp DEFAULT CURRENT_TIMESTAMP NULL COMMENT \u0026#39;작성일\u0026#39;, mod_date timestamp NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;수정일\u0026#39; ) COMMENT \u0026#39;리뷰 답변 템플릿\u0026#39;; ","tags":["log"],"title":"팀 프로젝트(쇼핑몰 제작) 회고 - 4.DB"},{"categories":null,"contents":"개인 프로젝트나 팀 프로젝트 할 것 없이 Ajax 를 매우 많은 곳에 사용했는데 그때마다 코드를 작성하려니 contentType 같이 외우기 까다로운 부분도 있고 코드도 길어진다고 판단하여 모듈화를 하여 사용하였다.\n개인적으로 post 방식으로 json 데이터를 사용하는 경우가 많아서 기본값으로 두었고, 데이터는 \u0026ldquo;json / multipart / urlencoded\u0026rdquo; 에 대한 부분만 고려했다.\n코드는 짧지만 불필요한 if 문이라던지(막상 지우려니 잘 안된다..) 깔끔해 보이지 않아서 한참이나 고민했지만 결국 만족할 만큼 다듬지 못한 것 같다.\n시도해본 것  ajax 통신 이후 결과 여부에 따라 지정한 콜백함수 호출 필요한 전달인자만 입력하면 되도록  코드 \u0026#39;use strict\u0026#39;; /** * Vanilla JavaScript Ajax 함수 모듈화 * * @param {string} url - (required) 호출 할 url * @param {object} data - (optional) 전송 할 데이터 * @param {function} confirmCallback - (optional) ajax 통신 완료 후 실행 할 함수 * @param {function} cancelCallback - (optional) ajax 통신 실패 시 실행 할 함수 * @param {string} method - (optional) post / get / put ... * @param {string} contentType - (optional) json / multipart / urlencoded * * @example * ajax(\u0026#39;board/insert\u0026#39;,{method: \u0026#34;get\u0026#34;}) * * @author taedi \u0026lt;taedi90@gmail.com\u0026gt; */ function ajax(url = \u0026#39;\u0026#39;, { data = {}, callback = (res) =\u0026gt; console.log(res), errorCallback = (res) =\u0026gt; console.error(res), method = \u0026#39;post\u0026#39;, contentType = \u0026#39;json\u0026#39; } = {}) { if(contentType == \u0026#34;json\u0026#34;) { contentType = \u0026#34;application/json; charset=utf-8\u0026#34;; data = JSON.stringify(data); } else if (contentType == \u0026#34;multipart\u0026#34;) { //do nothing  } else { contentType = \u0026#34;application/x-www-form-urlencoded; charset=utf-8;\u0026#34;; url = url + \u0026#34;?\u0026#34; + new URLSearchParams(Object.entries(data)).toString(); data = null; } const xhr = new XMLHttpRequest(); xhr.open(method, url, true); if(contentType != \u0026#34;multipart\u0026#34;){ xhr.setRequestHeader(\u0026#39;Content-Type\u0026#39;, contentType); } xhr.send(data); xhr.onload = function () { if (xhr.status === 200 || xhr.status === 201) { // 통신 성공 시  callback(xhr.response); } else { // 통신 실패 시  errorCallback(xhr.status); } } } ","date":"December 5, 2021","hero":"/images/hero/js.png","permalink":"https://log.taedi.net/vanillajs-ajax-module/","summary":"개인 프로젝트나 팀 프로젝트 할 것 없이 Ajax 를 매우 많은 곳에 사용했는데 그때마다 코드를 작성하려니 contentType 같이 외우기 까다로운 부분도 있고 코드도 길어진다고 판단하여 모듈화를 하여 사용하였다.\n개인적으로 post 방식으로 json 데이터를 사용하는 경우가 많아서 기본값으로 두었고, 데이터는 \u0026ldquo;json / multipart / urlencoded\u0026rdquo; 에 대한 부분만 고려했다.\n코드는 짧지만 불필요한 if 문이라던지(막상 지우려니 잘 안된다..) 깔끔해 보이지 않아서 한참이나 고민했지만 결국 만족할 만큼 다듬지 못한 것 같다.\n시도해본 것  ajax 통신 이후 결과 여부에 따라 지정한 콜백함수 호출 필요한 전달인자만 입력하면 되도록  코드 \u0026#39;use strict\u0026#39;; /** * Vanilla JavaScript Ajax 함수 모듈화 * * @param {string} url - (required) 호출 할 url * @param {object} data - (optional) 전송 할 데이터 * @param {function} confirmCallback - (optional) ajax 통신 완료 후 실행 할 함수 * @param {function} cancelCallback - (optional) ajax 통신 실패 시 실행 할 함수 * @param {string} method - (optional) post / get / put .","tags":["VanillaJS","ajax"],"title":"[Vanilla JS]Ajax 함수 모듈화"},{"categories":null,"contents":"프로젝트를 진행하면서 알림이나 서브 컨텐츠를 alert 창이나 pop-up window를 이용하지 않고 처리하고싶은 욕심이 생겨 모달창을 공부해보았다.\n시도해본 것  여러 창을 동시에 띄울 수 있어야 하고, 포커싱 된 요소가 최상단에 위치해야한다. 버튼을 눌렀을 때 예약된 함수를 불러올 수 있어야 한다. 드래그\u0026amp;드롭으로 이동이 가능해야한다. html, css에 별도로 구성요소를 세팅하지 않고 .js 파일 링크만으로 동작해야한다.  동작 영상 코드 \u0026#39;use strict\u0026#39;; /** * Vanilla JavaScript 모달 알림창 스크립트 * * @param {string} html - (optional) 모달창 내용 * @param {int} kind - (optional) 버튼 종류 (1: 확인, 2: 예\u0026amp;아니오) * @param {function} confirmCallback - (optional) 확인, 예 클릭 후 실행 함수 * @param {function} cancelCallback - (optional) 아니오 클릭 후 실행 함수 * * @example * const modalContainer = new ModalContainer(); * modalContainer.add(\u0026#34;모달창 내용\u0026#34;, 1, ()=\u0026gt;{alert(\u0026#34;콜백\u0026#34;)}); * * @author taedi \u0026lt;taedi90@gmail.com\u0026gt; */ class ModalContainer { //setting  container = document.querySelector(\u0026#34;#modal_container\u0026#34;); //모달창이 생성 될 부모 요소  idNum = 1; //모달창 식별 번호  zIndexCount = 100; //z-index 시작값, 다른 요소보다 뒤에 표시되면 값을 상향 조정  modals = new Map(); //모달 맵  //style 설정  styleContainer = `position: fixed;top: 0;left: 0;width: 100%;height: 100%;z-index:${this.zIndexCount};`; styleOverlay = `background-color: rgba(0,0,0,0.6);width: 100%;height: 100%;position: absolute;`; styleModal = `background-color: white; padding: 2.5rem 5rem; text-align: center; position: absolute; width: 20rem; border-radius: 0.1rem; box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.19), 0.6rem 0.6rem rgba(0, 0, 0, 0.23); font-size: inherit;`; styleButtonContainer = `margin-top:1rem;`; styleButton = `padding: 0.5rem; margin: 0.3rem; background-color:#e5e5e5; border: 0.1rem solid black; border-radius: 0.5rem; min-width: 3rem; cursor: pointer; `; //생성자  constructor() { this.initContainer(); //컨테이너 생성  this.initOverlay(); //오버레이 생성  // 마우스가 범위를 벗어날 수 있기 때문에 move, up은 컨테이너 전체에 할당  this.container.addEventListener(\u0026#39;mouseup\u0026#39;, ()=\u0026gt;{this.endPointing()}); this.container.addEventListener(\u0026#39;touchend\u0026#39;, ()=\u0026gt;{this.endPointing()}); this.container.addEventListener(\u0026#39;mousemove\u0026#39;, (e)=\u0026gt;{this.movePointing(e)}); this.container.addEventListener(\u0026#39;touchmove\u0026#39;, (e)=\u0026gt;{this.movePointing(e)}); } // 컨테이너 초기화  initContainer(){ if (this.container == null){ //없을 경우 생성  this.container = document.createElement(\u0026#34;div\u0026#34;); this.container.id = \u0026#34;modal_container\u0026#34;; document.body.appendChild(this.container); } else { //있을 경우 초기화  while (this.container.firstChild) { this.container.removeChild(this.container.lastChild); } } this.container.style = this.styleContainer; this.hideContainer(); } //컨테이너 활성  showContainer(){ this.container.style.display = \u0026#39;block\u0026#39;; } //컨테이너 숨기기  hideContainer(){ this.container.style.display = \u0026#39;none\u0026#39;; } //오버레이 생성  initOverlay(){ this.overlay = document.createElement(\u0026#34;div\u0026#34;); this.overlay.id = \u0026#34;modal_overlay\u0026#34;; this.overlay.style = this.styleOverlay; this.container.appendChild(this.overlay); } //모달창 생성  add(html = \u0026#34;\u0026#34;, //모달창 내용  kind = 1, //모달창 종류(1 : 확인, 2 : 예 \u0026amp; 아니오)  confirmCallback = () =\u0026gt; {}, //확인 or 예 클릭할 때 콜백 함수  cancelCallback = () =\u0026gt; {} //아니오 클릭할 때 콜백 함수  ){ const id = \u0026#34;modal\u0026#34; + this.idNum++; let callbackObject = {}; //모달 요소 생성  const modalWindow = document.createElement(\u0026#34;div\u0026#34;); modalWindow.id = id; modalWindow.style = this.styleModal; modalWindow.style.zIndex = this.zIndexCount++; modalWindow.className = \u0026#34;modal_window\u0026#34;; //모달 내용  const modalContent = document.createElement(\u0026#34;div\u0026#34;); modalContent.className = \u0026#34;modal_content\u0026#34;; modalContent.innerHTML = html; modalWindow.appendChild(modalContent); //버튼  const buttonBox = document.createElement(\u0026#34;div\u0026#34;); buttonBox.style = this.styleButtonContainer; //버튼 종류 설정(1 : 확인, 2 : 예 \u0026amp; 아니오)  let buttonConfirm; let buttonCancel; if(kind == 1) { callbackObject[\u0026#34;confirmCallback\u0026#34;] = confirmCallback; buttonConfirm = document.createElement(\u0026#34;button\u0026#34;); buttonConfirm.className = \u0026#34;button_confirm\u0026#34;; buttonConfirm.style = this.styleButton; buttonConfirm.innerText = \u0026#34;확인\u0026#34;; buttonBox.appendChild(buttonConfirm); } else if (kind == 2) { callbackObject[\u0026#34;confirmCallback\u0026#34;] = confirmCallback; buttonConfirm = document.createElement(\u0026#34;button\u0026#34;); buttonConfirm.className = \u0026#34;button_confirm\u0026#34;; buttonConfirm.style = this.styleButton; buttonConfirm.innerText = \u0026#34;예\u0026#34;; buttonBox.appendChild(buttonConfirm); callbackObject[\u0026#34;cancelCallback\u0026#34;] = cancelCallback; buttonCancel = document.createElement(\u0026#34;button\u0026#34;); buttonCancel.className = \u0026#34;button_cancel\u0026#34;; buttonCancel.style = this.styleButton; buttonCancel.innerText = \u0026#34;아니오\u0026#34;; buttonBox.appendChild(buttonCancel); } modalWindow.appendChild(buttonBox); //컨테이너 숨김 해제  if(this.modals.size \u0026lt;= 0) { this.showContainer(); } //모달창 삽입  this.container.appendChild(modalWindow); //맵에 추가  this.modals.set(id, { object:modalWindow, callbackObject:callbackObject }); //가운데 정렬  const left = (window.innerWidth - modalWindow.getBoundingClientRect().width) / 2; const top = (window.innerHeight - modalWindow.getBoundingClientRect().height) / 2; modalWindow.style.top = `${top}px`; modalWindow.style.left = `${left}px`; //이벤트 추가  modalWindow.addEventListener(\u0026#39;mousedown\u0026#39;, (e) =\u0026gt; this.startPointing(e, modalWindow)); modalWindow.addEventListener(\u0026#39;touchstart\u0026#39;, (e) =\u0026gt; this.startPointing(e, modalWindow)); if(buttonConfirm){ buttonConfirm.addEventListener(\u0026#39;click\u0026#39;,()=\u0026gt;{this.confirmFunc(id)}); } if(buttonCancel){ buttonCancel.addEventListener(\u0026#39;click\u0026#39;, ()=\u0026gt;{this.cancelFunc(id)}); } } //모달창 닫기  closeModal(modal) { //드래그 이벤트 제거  modal.removeEventListener(\u0026#39;mousedown\u0026#39;, (e) =\u0026gt; this.startPointing(e, modal)); modal.removeEventListener(\u0026#39;touchstart\u0026#39;, (e) =\u0026gt; this.startPointing(e, modal)); //모달창 요소 삭제  modal.remove(); //마지막 모달창이라면 오버레이 숨기기  if (this.modals.size \u0026lt;= 1) { this.hideContainer(); } } //확인 \u0026amp; 예 버튼 클릭  confirmFunc(id) { const modal = this.modals.get(id); //모달창 닫기  this.closeModal(modal.object); //콜백함수 호출  modal.callbackObject.confirmCallback(); this.modals.delete(id); } //아니오 버튼 클릭  cancelFunc(id) { const modal = this.modals.get(id); //모달창 닫기  this.closeModal(modal.object); //콜백함수 호출  modal.callbackObject.cancelCallback(); this.modals.delete(id); } //사용자가 가르키는 좌표를 받아오는 함수  getCoordinates(e) { let clientX = undefined; let clientY = undefined; //모바일 \u0026amp; 데스크탑 체크  if (e.type == \u0026#39;touchstart\u0026#39; || e.type == \u0026#39;touchmove\u0026#39; || e.type == \u0026#39;touchend\u0026#39; || e.type == \u0026#39;touchcancel\u0026#39;) { let evt = (typeof e.originalEvent === \u0026#39;undefined\u0026#39;) ? e : e.originalEvent; let touch = evt.touches[0] || evt.changedTouches[0]; clientX = touch.pageX; clientY = touch.pageY; } else if (e.type == \u0026#39;mousedown\u0026#39; || e.type == \u0026#39;mouseup\u0026#39; || e.type == \u0026#39;mousemove\u0026#39; || e.type == \u0026#39;mouseover\u0026#39; || e.type == \u0026#39;mouseout\u0026#39; || e.type == \u0026#39;mouseenter\u0026#39; || e.type == \u0026#39;mouseleave\u0026#39;) { clientX = e.clientX; clientY = e.clientY; } return {clientX: clientX, clientY: clientY}; } //포인팅 시작(touchstart, mousedown)  startPointing(e, elem) { //e.preventDefault();  e.stopPropagation(); //사용자 포인팅 지점 가져오기  const coordinates = this.getCoordinates(e); const clientX = coordinates.clientX; const clientY = coordinates.clientY; //선택한 요소의 좌표 가져오기  const elemPos = elem.getBoundingClientRect(); const elemX = elemPos.x; const elemY = elemPos.y; //사용자 좌표와 요소 간의 갭 구하기  const gapX = clientX - elemX; const gapY = clientY - elemY; elem.setAttribute(\u0026#34;gap-x\u0026#34;, gapX); elem.setAttribute(\u0026#34;gap-y\u0026#34;, gapY); //선택한 요소에 \u0026#39;hold\u0026#39;클래스 부여  elem.classList.add(\u0026#34;hold\u0026#34;); //클릭한 요소를 최상단에 유지  const elems = document.querySelectorAll(\u0026#34;.modal_window\u0026#34;); elems.forEach((elem) =\u0026gt; { if (elem.classList.contains(\u0026#34;hold\u0026#34;)) { elem.style.zIndex = this.zIndexCount++; } }); } //드래그  movePointing(e) { e.preventDefault(); e.stopPropagation(); //사용자 포인팅 지점 가져오기  const coordinates = this.getCoordinates(e); const clientX = coordinates.clientX; const clientY = coordinates.clientY; //현재 포커싱 된 요소 찾기  const elems = document.querySelectorAll(\u0026#34;.modal_window\u0026#34;); elems.forEach((elem) =\u0026gt; { if (elem.classList.contains(\u0026#34;hold\u0026#34;)) { //포인팅 위치와 요소 사이의 갭  const gapX = elem.getAttribute(\u0026#34;gap-x\u0026#34;); const gapY = elem.getAttribute(\u0026#34;gap-y\u0026#34;); //최초에 지정했던 gap과 현재 포인팅 위치를 기준으로 요소가 이동해야할 좌표 값 구하기  let elemX = clientX - gapX; let elemY = clientY - gapY; elem.setAttribute(\u0026#34;elem-x\u0026#34;, elemX); elem.setAttribute(\u0026#34;elem-y\u0026#34;, elemY); //이동 한계 처리 (최대치 이상은 움직이지 않도록)  const maxLeft = window.innerWidth - elem.getBoundingClientRect().width; const maxHeight = window.innerHeight - elem.getBoundingClientRect().height; if (elemX \u0026lt;= 0) { elemX = 0; } else if (elemX \u0026gt; maxLeft) { elemX = maxLeft; } if (elemY \u0026lt;= 0) { elemY = 0; } else if (elemY \u0026gt; maxHeight) { elemY = maxHeight; } //요소 이동  elem.style.left = `${elemX}px`; elem.style.top = `${elemY}px`; } }); } //포인팅 종료(touchend, mouseup)  endPointing() { //e.preventDefault();  const elems = document.querySelectorAll(\u0026#34;.modal_window\u0026#34;); elems.forEach((elem) =\u0026gt; { if (elem.classList.contains(\u0026#34;hold\u0026#34;)) { // 움직임에 적용된 속성 및 class를 삭제  elem.classList.remove(\u0026#34;hold\u0026#34;); elem.removeAttribute(\u0026#34;gap-x\u0026#34;); elem.removeAttribute(\u0026#34;gap-y\u0026#34;); elem.removeAttribute(\u0026#34;elem-x\u0026#34;); elem.removeAttribute(\u0026#34;elem-y\u0026#34;); } }); } } const modalContainer = new ModalContainer(); ","date":"December 5, 2021","hero":"/images/hero/js.png","permalink":"https://log.taedi.net/vanillajs-modal-window/","summary":"프로젝트를 진행하면서 알림이나 서브 컨텐츠를 alert 창이나 pop-up window를 이용하지 않고 처리하고싶은 욕심이 생겨 모달창을 공부해보았다.\n시도해본 것  여러 창을 동시에 띄울 수 있어야 하고, 포커싱 된 요소가 최상단에 위치해야한다. 버튼을 눌렀을 때 예약된 함수를 불러올 수 있어야 한다. 드래그\u0026amp;드롭으로 이동이 가능해야한다. html, css에 별도로 구성요소를 세팅하지 않고 .js 파일 링크만으로 동작해야한다.  동작 영상 코드 \u0026#39;use strict\u0026#39;; /** * Vanilla JavaScript 모달 알림창 스크립트 * * @param {string} html - (optional) 모달창 내용 * @param {int} kind - (optional) 버튼 종류 (1: 확인, 2: 예\u0026amp;아니오) * @param {function} confirmCallback - (optional) 확인, 예 클릭 후 실행 함수 * @param {function} cancelCallback - (optional) 아니오 클릭 후 실행 함수 * * @example * const modalContainer = new ModalContainer(); * modalContainer.","tags":["VanillaJS","modal"],"title":"[Vanilla JS]모달 알림창 만들어보기"},{"categories":null,"contents":"프로젝트 내내 덕을 많이 본 코딩 컨벤션이다. 하단 링크를 참고하여 간결하게 우리 프로젝트 만의 컨벤션을 정의했는데 기회가 된다면 이것보다도 더욱 정교하게 만들어 보고 싶다.\n1. Basic 캠퍼스 핵데이 Java 코딩 컨벤션 을 준수 하며, JS 의 경우 Naver JavaScript Style Guide 를 가급적 지향하며 코딩할 것\n1-1. IDE 설정 캠퍼스 핵데이 가이드에 따라 코딩할 수 있도록 IDE Formatter 적용이 가능함\n1-1-1. Eclipse naver-eclipse-formatter.xml\n 아래 링크 D.1.* 내용 참고 https://naver.github.io/hackday-conventions-java/#_eclipse  1-1-2. Intellij naver-intellij-formatter.xml\n 아래 링크 D.2.* 내용 참고 https://naver.github.io/hackday-conventions-java/#_eclipse  2. Variable \u0026amp; Method 변수와 메서드 네이밍 규칙\n2-1. Common 변수 및 메서드 공통 사항\n2-1-1. Naming  가급적 이해할 수 있는 쉬운 단어 (축약X) → mod_date (❌), modify_date (👌🏻) camelCase 사용 → JAVA, Java Script snake_case 사용 → SQL, HTML Attribute kebob-case 사용 → CSS   DB 테이블 속성 : parent_no\nDTO 속성 : parentNo\nJS var : parentNo\nJS function : checkParentId\nHTML element id : parent_no\nCSS : #parent_no { font-size : var(—font-base); }\n element id 와 js function 명이 일치하면 onclick 이벤트에서 오류남\nCSS 는 대소문자를 구분하지 않는다?\n2-2. Variable 변수 및 상수 관련\n2-2-1. boolean  가급적 int 자료형 보다 boolean 자료형 사용 → sql result 가 int 형으로 반환 됨. boolean 자료형의 경우 \u0026lsquo;is~\u0026rsquo; 활용 → isCorrect, isNull  2-2-2. Const  상수는 대문자 및 언더바 사용 (JAVA, JS) → TEST_COUNT  2-3. Method 메서드 관련\n2-3-1. check  true or false 를 판별하는 메서드는 \u0026lsquo;check~\u0026rsquo; 표기 → checkId(user)  2-3-2. getter \u0026amp; setter  getName(args), setName(args)  2-3-3. DAO \u0026amp; SQL mapper  insert → insertBoard(board) update → updateBoard(board) select → boardDto selectBoard(board), List selectBoardList(Board board) delete → deleteBoard(board)  3. Structure 프로젝트 구조\n3-1. Folder \u0026amp; Package \u0026amp; File 3-1-1. Outline  아래 표를 기준으로 프로젝트 구조를 지정     종류 경로 이름 예시 비고     Controller ~base_package/controller/ BoardController.java 응답처리, view 업데이트   Service ~base_package/service/BoardService.java     ServiceImpl ~base_package/service/Impl BoardServiceImpl.java 비즈니스 로직 처리   Mapper ~base_package/mapper/ BoardMapper.java 데이터 엑세스   Dto ~base_package/dto/ Board.java 데이터 교환 객체   Config ~base_package/dto/ WebConfig.java JAVA 기반 설정파일   Common ~base_package/common/ randomUtil.java 클래스 간 공유 모듈   sqlmap /resources/sqlmap/ board_SQL.xml SQL query   css/js/img /webapp/resources/[css js img]/ sub-item.css src=\u0026ldquo;js/item.js\u0026rdquo;   plugins /webapp/resources/plugins/ - 텍스트 에디터 등   view /webapp/WEB-INF/views/서비스/ /board/create.jsp    others -  kebob-case     이후 프로젝트 규모에 따라 controller, service, dao 패키지에 업무영역으로 하위 패키지 리팩토링  3-1-2. Naming  camelCase → java class snake_case → java package kebob-case → xml, js, css 등 기타 모든 파일명  3-2. JAVA Class 본연의 업무에 충실하고 유지보수에 용이하도록 구성\n3-2-1. Controller  로직 구현 지양 Service 호출 및 Exception 처리 전담  3-2-2. Service  도메인 서비스 지양 → 기능별 세분화 서비스 지향 UserService → UserRegisterService, UserEmailService \u0026hellip;  3-2-3. Dao  interface 구현 없이 @Mapper 활용  4. Coding 코딩 스타일에 관련 된 규정\n4-1. DTO 활용 프로젝트에서 Dto를 적극적으로 활용하여 유지보수 및 확장이 용이한 환경을 구성한다.\n4-1-1. 가급적 DTO 를 사용하여 데이터 처리하기  Dto attribute private String id → private UserDto userDto Service args userDto selectUser(int no) → userDto selectUser(userDto)  4-1-2. 객체 분리 사용  request, response 객체 분리 사용 불필요한 정보 제거  4-2. 예외처리  예외는 무시하지 말고 처리할 것  4-3. 주석처리  각 단위별 기능 명시 모호한 부분 설명  4-4. 클래스 및 메서드 작게 나누기 세부 기능별 분리(모듈화)\n 재사용성 향상 가독성 향상 유지보수 향상  4-5. Unit Test  Junit 4 사용 반드시 TDD를 고수할 필요는 없음 FIRST 규칙 지향 Fast: 테스트는 빠르게 동작하여 자주 돌릴 수 있어야 한다. Independent: 각각의 테스트는 독립적이며 서로 의존해서는 안된다. Repeatable: 어느 환경에서도 반복 가능해야 한다. Self-Validating: 테스트는 성공 또는 실패로 bool 값으로 결과를 내어 자체적으로 검증되어야 한다. Timely: 테스트는 적시에 즉, 테스트하려는 실제 코드를 구현하기 직전에 구현해야 한다.  5. Etc 그 밖의 사항들\n5-1. SQL 필수 사항은 아니지만 가독성 향상을 위함\n5-1-1. 예약어  예약어는 대문자 사용 → select(❌), SELECT(👌🏻)  5-1-2. 속성(Column, Attribute) \u0026amp; 테이블(Table, Relation)  Snake Case → modify_date 복수형 대신 단수형 사용 → users(❌), user(👌🏻) Query 에서 backquote(``) 감싸기  5-1-3. Query 예시 SELECT `user`.`modify_date` FROM `my_board`.`user`; 5-2. URI URI는 대소문자에 따라 다른 페이지로 인식하기 때문에, 필수 사항은 아니지만 범용적으로 사용되는 방식 채택\n 소문자 사용 → Create(❌), CREATE(❌), create(👌🏻) Kebab Case 사용 → create_post(❌), createPost(❌), create-post(👌🏻)  https://example.com/blogs/new-post 5-3. CSS 프로젝트 진행 간 유지보수 용이성에 초점\n5-3-1. 변수 활용  색상 리스트, 글자 크기 등 사이트 일관성을 유지시켜야할 항목은 변수로 지정하여 활용  5-3-2. 사이즈  요소 크기는 가급적 px 가 아닌 rem(root-em) 사용 → html 폰트 사이즈 변경 시 하위 요소 일괄 적용 가능 → em 과 비교해 고려사항이나 유지보수 측면에서 이점  5-3-3. 변수 및 rem 활용 예시 @media (min-width: 768.1px) { /* 가로 768px 초과시 1rem == 10px */ html { font-size: 62.5%; } } @media (max-width: 768px) { /* 가로 768px 이하 1rem == 8.75px */ html { font-size: 54.6875%; } } html{ /* 배경색 */ --bg-color-1: #715d74; --bg-color-2: #a08aa3; --bg-color-3: #d1bad4; --bg-color-4: #d1bad470; --bg-color-5: #ffffff; /* 글자색 */ --txt-color-1: black; --txt-color-2: rgb(59, 59, 59); --txt-color-3: grey; --txt-color-4: rgb(214, 212, 212); --txt-color-5: white; --txt-color-warn: rgb(215, 68, 68); /* 폰트 사이즈 */ --font-xs: 1.2rem; --font-sm: 1.4rem; --font-base: 1.6rem; --font-lg: 1.8rem; --font-xl: 2rem; } .article { font-size : var(--font-base); } 참고  팀 코딩 컨벤션 정립하기 https://log.hodol.dev/techcourse/coding-convention 캠퍼스 핵데이 Java 코딩 컨벤션 https://naver.github.io/hackday-conventions-java/ Naver JavaScript Style Guide https://github.com/naver/eslint-config-naver/blob/master/STYLE_GUIDE.md 나만의 코딩컨벤션 작성하기 https://jobc.tistory.com/212 자바 코딩 가이드(파일명, 메소드, 코딩규칙) https://shlee0882.tistory.com/129 자바 코딩 규칙 https://myeonguni.tistory.com/1596 Mapper https://twofootdog.github.io/Spring-DAO와-Mapper의-차이점/  ","date":"December 5, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/yi-teamproject-log-3/","summary":"프로젝트 내내 덕을 많이 본 코딩 컨벤션이다. 하단 링크를 참고하여 간결하게 우리 프로젝트 만의 컨벤션을 정의했는데 기회가 된다면 이것보다도 더욱 정교하게 만들어 보고 싶다.\n1. Basic 캠퍼스 핵데이 Java 코딩 컨벤션 을 준수 하며, JS 의 경우 Naver JavaScript Style Guide 를 가급적 지향하며 코딩할 것\n1-1. IDE 설정 캠퍼스 핵데이 가이드에 따라 코딩할 수 있도록 IDE Formatter 적용이 가능함\n1-1-1. Eclipse naver-eclipse-formatter.xml\n 아래 링크 D.1.* 내용 참고 https://naver.github.io/hackday-conventions-java/#_eclipse  1-1-2.","tags":["log"],"title":"팀 프로젝트(쇼핑몰 제작) 회고 - 3.코딩 컨벤션"},{"categories":null,"contents":"쇼핑몰로 프로젝트 주제를 결정하고, 초기에 어떤 페이지가 필요할까 고민하며 작성해본 리스트다. 회의 단계에서 제외된 내용도 있고, 시간 여유상 구현하지 못한 기능들도 있다.\n1. 기본 페이지 구성 idea 1-1. 사용자 상품리스트, 상품상세, 로그인/회원가입, 결제화면, 마이페이지, 장바구니, 질문답변, 리뷰, 비회원 기능, 비밀번호 초기화, 주문취소/반품, 이용약관, about\n1-1-1. 메인(상품리스트)  header, nav, main, footer 구성 제품 정렬 기능(인기순, 가격순, 세부조건) 카테고리별 구분 제품 재고 현황에 따라 sold out 처리 및 정렬에서 뒤로 빼기 페이징 처리  1-1-2. 상품상세  제품사진, 구매옵션, 구매버튼, 제품상세, 교환반품정보, 후기, QnA(비밀글)  1-1-3. 회원가입/로그인  일반 가입/oAuth 병행 (db 설계시 oAuth 구분용 속성 추가) 이메일 인증 자동로그인  1-1-4. 결제화면  선택 아이템 및 금액 합계, 배송 주소지 선택, 결제 수단 , 결제(구현x, pg 테스트 api가 있을까?) form 전송 시 구매번호 부여  1-1-5. 마이페이지  주문관리(주문내역, 반품/취소 현황) 회원정보 변경, 탈퇴 배송 주소지 등록(기본 배송지 + 추가 배송지, 배송지 별 닉네임) 내 질문/내 후기  1-1-6. 장바구니  아이템 삭제, 추가 로그인 전/후 장바구니 연동(쿠키 or 세션 활용)  1-1-7. 리뷰  각 상품 페이지에 리뷰 탭 배치 이름은 * 처리(김*수) 구매번호가 있어야 후기 작성이 가능하도록 댓글, 좋아요, 별점 사진 업로드(포토리뷰, 일반리뷰) - 파일 용량 리사이즈  1-1-8. 질문 답변  각 상품 페이지에 질문 답변 탭 배치 비밀글 작성 기능  1-1-9. 비회원 기능  결제 화면, 주문현황 조회, 반품/취소  1-1-10. 비밀번호 초기화  secure random 메일 발송  1-1-11. 주문 취소 / 반품  배송 상황에 따라 취소/반품 구분 취소요청, 요청사유  1-1-12. 이용약관, 개인정보 처리 방침  표준양식 구해서 실제 사이트와 같은 로직으로 구현  1-1-13. about(프로젝트 소개)  구성원, 기능 소개 등 간결한 1페이지 구성  1-2. 관리자 상품 등록, 재고관리, 배송관리, 매출보고, 회원관리, 질문, 반품 취소 관리, 리뷰 관리\n1-2-1. 상품 등록  아이템 번호, 분류, 아이템명, 상세 페이지, 환불교환 정보, 수량(초기 입고량) 상세 페이지 용 텍스트 에디터 필요(사진 업로드, html tag whistlist 지정)  1-2-2. 재고 관리  아이템별 수량 변경 제품 발송처리시 -1, 취소 +1, 반품/환불은 검수 후 수기처리  1-2-3. 배송 관리  발주 들어온 품목들 표시 배송현황, 운송장 입력 엑셀 일괄입력 기능  1-2-4. 매출 보고(가능하다면)  일자별 매출 추이, 취소 현황, 재구매율 등  1-2-5. 회원 관리  회원 리스트 조회 cvs 내려받기 비밀번호 초기화 메일 발송 등  1-2-6. 질문 관리  전체 질문답변 표시 답변/미답변 표시, 필터링 답변 작성/수정  1-2-7. 리뷰 관리  전체 리뷰 표시 답변/미답변 표시, 필터링 답변 작성/수정 답변 일괄 작성 기능(템플릿)  1-2-8. 반품 취소 관리  요청 정보 표시 처리현황 체크(상태 변경)  2. 추가 기능 idea  색상별 상품 정렬(배경제거, 색상 점유% db 저장, 유사도 높은 순으로 정렬) 다중조건 검색(카테고리, 가격 등) 인기검색어 연관 상품(다른 사용자가 함께 본 제품, 로그 \u0026amp; 트리거 \u0026amp; 이력 없을 경우 기본값 설정 ) 뉴스레터 검색어 자동완성(로그\u0026amp;트리거, 키워드 빈도 순 정렬, 일부 표출, char 핸들링!) 포인트 적립 + 출석포인트 + 메일링 포인트 기타 보안 관련 기능(패스워드 암호화) SEO 대응  ","date":"December 3, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/yi-teamproject-log-2/","summary":"쇼핑몰로 프로젝트 주제를 결정하고, 초기에 어떤 페이지가 필요할까 고민하며 작성해본 리스트다. 회의 단계에서 제외된 내용도 있고, 시간 여유상 구현하지 못한 기능들도 있다.\n1. 기본 페이지 구성 idea 1-1. 사용자 상품리스트, 상품상세, 로그인/회원가입, 결제화면, 마이페이지, 장바구니, 질문답변, 리뷰, 비회원 기능, 비밀번호 초기화, 주문취소/반품, 이용약관, about\n1-1-1. 메인(상품리스트)  header, nav, main, footer 구성 제품 정렬 기능(인기순, 가격순, 세부조건) 카테고리별 구분 제품 재고 현황에 따라 sold out 처리 및 정렬에서 뒤로 빼기 페이징 처리  1-1-2.","tags":["log"],"title":"팀 프로젝트(쇼핑몰 제작) 회고 - 2.페이지 구상"},{"categories":null,"contents":"지난 한달간 조원 2명과 쇼핑몰 제작 프로젝트를 진행했고, 처음 팀 프로젝트를 경험하며 막막했던 부분들을 기록으로 남기고자 글을 작성하였다. 나와 마찬가지로 처음 팀 프로젝트를 경험할 누군가에게 도움이 될 수 있으면 좋겠다.\n1. 후기 프로젝트를 진행하며 느낀 사항 중 좋았던 부분과 다음에 필히 개선해야겠다고 생각했던 부분을 되새겨 보았다.\n1-1. 만족했던 점 팀 단위의 개발을 처음 경험해보며 혼자서 개발할 때는 추상적으로만 느껴졌던 협업에 대한 부분을 몸소 체험해볼 수 있는 기회가 되었고, 그러면서 여러 시도를 해볼 수 있어서 좋았다.\n1-1-1. 협업 \u0026amp; 버전관리툴 활용 적절한 몇가지의 협업툴을 활용하는 것은 생산성을 높여주는 결과를 얻을 수 있다고 느꼈다. 경우에 따라서 카카오톡과 텍스트 파일로도 충분히 협업이 가능할 수도 있겠지만, 이것들이 충족해줄 수 없는 많은 기능들이 신속한 의사결정과 프로젝트 문서화에 도움이 많이 되었다. Git 또한 프로젝트의 이력과 안정성을 높이는데 도움이 되었고 여러명과 함께 다뤄보는 경험을 할 수 있어서 좋았다. 사용 간에 큰 오류는 없어서 문제 해결에 대한 경험은 많이 얻지못한 부분은 아쉬움으로 남는다.\n1-1-2. 컨벤션 정의 다음에도 누군가와 작업을 한다면 컨벤션 정의는 빼놓지 않을 것 같다. 파일과 변수 명칭을 사전에 협의하여 혼란을 최소화 했고, 폴더 구조를 사전에 협의한 후 각자 역할에 맞춰 사용할 폴더 영역을 배분해 버전 관리에서 충돌도 방지할 수 있었다고 생각한다.\n1-2. 아쉬운 점 아쉬운 점이나 뒤에 서술할 공부 방향에 대해서 언급하자면 끝도없이 많지만 대표적인 부분을 간추려 보았다.\n1-2-1. 프로젝트 규모 설정 실패 최초에 규모를 크게 잡았고 그중 일부는 구현을 하지 못한채로 프로젝트를 종료 했다. 변명을 하자면 최초 5인으로 구성 될 예정이던 팀 규모도 3인으로 축소되고, 프로젝트의 절대적 기간도 짧았다고 할 수 있겠지만 그것만이 문제는 아니였다고 생각한다. 각 기능별 연결 부위나 관계 테이블 연관성 이슈를 사전에 파악하지 못해 지연이 발생하거나, 기능 구현을 위한 정보를 습득하는 부분에서 많은 시간을 소비하는 등 예외 변수들을 고려하지 못했고 이는 전체적인 구현도를 낮추게 된 직접적인 요인이 되지 않았나 싶다. 경험이 부족한데서 나온 결과였으며 계속해서 이 부분에 대한 시각을 넓혀야 겠다고 다짐하게 되었다. 그리고 다음 프로젝트에서는 핵심 기능에 초점을 두어 양보단 질을 다뤄보고 싶다고 느꼈다.\n1-2-2. 단위 테스트 미흡 시작 단계에서는 TDD방식은 아니더라도 각 유닛별로 테스트 모듈을 모두 작성하려고 마음먹었으나 중 후반부로 가면서 부터 구현에 치중한 나머지 소홀해진 경향이 없지않아 있다. 그리고 프로젝트가 진행되며 각 기능들이 수정됨에 따라 기존 테스트 모듈이 동작하지 않거나 실제 서비스와는 상관없는 불필요한 코드가 되기도 했다. 테스트의 필요성에 대해서는 충분히 이해가 되지만 테스트 자체가 업무가 되는 괴리감을 느끼기도 했고 테스트 주도 개발이 이뤄지기 위해서는 프로젝트 구상단계가 더욱 정교하게 이뤄져 실제 프로젝트와 테스트가 긴밀하게 연관해야겠다는 생각이 들었다.\n1-3. 추후 공부 방향  Spring Security with JWT  실제 쇼핑몰이 서비스 되기 위해서는 서버 부하를 분산시키는 것이 중요하다는 생각이 들었지만 미처 적용하지 못했다. 여유가 된다면 JWT를 따로 학습하거나 기존 프로젝트에 추가해봐야겠다.\n Spring Exception Handling  예외의 발생 시점이나 종류에 따라 처리해주는 위치가 다르다는 것을 알게 되었고 여러 핸들러를 프로젝트에 적용했지만 아직도 처리되지 않는 예외가 있다.\n Vanilla JS 컴포넌트화, 클래스, IIFE  프로젝트 중 여러 js 파일을 동시에 사용하는 페이지에서 변수 중복 이슈가 간헐적으로 발생했고, 이전에 가볍게 배웠던 IIFE 나 클래스에 대한 내용이 다시금 떠올랐다. 기존에 사용했던 모듈들을 다시금 개선할 수 있도록 손 볼 예정이다.\n2. 프로젝트 소개 2-1. 기본 정보 기간: 5주\n참여 인원: 3인\n환경:\n Spring Framework 5.2.6 JDK 8u202 Maven 3.8.4 Server - CentOS8, Docker (20.10.11), Tomcat (8.5.69), MariaDB (latest), Nginx (latest), Jenkins (lts)  데모 사이트: https://web.taedi.net/shop/\n깃허브 리포: https://github.com/taedi90/yiTeamProject\n2-2. 주제 선정 사유 프로젝트의 가장 큰 목적은 스프링 프레임워크의 다양한 기능과 구조를 파악하는 데에 목적을 두었고 쇼핑몰 은 CRUD 뿐만아니라 결제, 보안, 관리, UX 등 다양한 기능과 고려사항들을 학습하는데 도움이 될 것이라 판단했다. 사골과도 같은 주제라 인터넷에 관련된 자료가 많을 것이라는 판단도 중요하게 작용했지만 의외로 상세한 내용은 찾기가 어려워 DB 설계 시점부터 어려움이 있었다.\n3. 프로젝트 진행 프로젝트는 다음과 같은 흐름으로 진행했다.\n분석  주제 선정 협업 툴 선정 페이지 구상 가능 여부 검토(API존재 유무, 기간 내 구현 가능 여부) 코딩 컨벤션 정의 Git 활용 방법 및 전략 구상  설계  DB \u0026amp; 플로우 차트  구현 및 테스트  공유 함수 작성 JUnit 단위 테스트 작성(dto, mapper, service) 실제 구현 주 2~3회 회의 진행(진행사항 체크, 이슈 사항 공유)  4. 협업 툴 \u0026amp; 버전 관리 툴 프로젝트 간 사용했던 툴과 용도는 다음과 같다. 원래는 장황하게 찬양글을 작성했지만 잘 정리된 글들이 많을테니 생략하도록 하겠다.\n Slack : 채팅 + Github \u0026amp; Notion 알림 Notion : 공지사항, 프로젝트 공유 및 이슈사항 정리 ERDcloud : 데이터베이스 설계과정 공유, 변경 이력, 채팅 및 메모 기능 Drawio : 플로우 차트를 작성하여 각 기능별 흐름 파악 Github : 프로젝트 버전 관리  5. Git 활용 전략 git을 개인적인 용도 외에는 사용해본 적이 없었기 때문에 초보에게 맞는 전략을 나름대로 구상해 보았다. 물론 혼자 생각한 건 아니고 여러 자료를 찾아보았으며 그 중에서도 한 해외 영상을 보고 적극 반영했다.\n commit은 주제를 구분해서 작게 나눈다.  하나의 commit에 여러 변경점을 두는 것이 아니라 기능이나 논리적으로 구분이 가능할 수 있는 단위로 나누어서 commit을 진행해 의미있는 히스토리를 만드려고 노력했다.\n branch는 오래 유지하지 않고 최대한 작은 단위로 병합과 re-branch를 반복  conflict가 발생하더라도 조기에 발견할 수 있으며, 서로 간의 호흡을 맞추기 위하여 기능을 작게 나누어 구현하고 master에 반영하였다.\n master 에 한 번 merge 한 branch 는 더이상 쓰지 않는다!  물론 이후에는 이 규칙은 깨뜨렸다. 처음 사용할 때 혹시 모를 상황에 의연할 자신이 없어 불확실한 도전은 지양하였다. 이밖에도 제대로 알지 못하는 기능은 사용에 유의하였다.\n commit 메세지는 꼼꼼하게 작성한다.  제목은 변화를 요약하여 이해하기 쉽게 작성하도록 노력했고, 내용은 이전과의 변경 사항, 변경이 발생 된 이유, 변경 후 유의할 사항 등을 작성해 팀원이 이해하기 쉽고 후에 히스토리를 관리하기도 편하도록 구성했다.\n 공유부분 수정은 rebase를 활용한다.  브랜치를 열어 기능개발을 하다 공통부분에 대한 수정이 필요할 경우, rebase를 적절히 사용하여 의미없는 커밋들이 증식되지 않도록 하였다. 단, 기존에 원격 저장소에 푸시 이력이 있는 브랜치는 rebase를 사용하지 않았다.\n덕분인지 사용간에 큰 오류는 없었지만 한가지 실수한 점이 있었다. 여러 PC를 오가며 작업을 했었는데, 한 PC에서 git 환경설정을 제대로 하지 않아 2개의 메일주소로 commit이 발생해버렸다. 해결방법이 전혀 없는 것은 아닌 듯 했지만 자칫했다간 git 이력 전체를 날릴 위험이 있을 것 같아 그대로 두었지만 아쉬움이 남는다.\n글이 길어져 페이지 구상, 코딩 컨벤션, DB \u0026amp; Flow Chart 등의 내용은 나누어서 작성하도록 하겠다.\n","date":"December 2, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/yi-teamproject-log-1/","summary":"지난 한달간 조원 2명과 쇼핑몰 제작 프로젝트를 진행했고, 처음 팀 프로젝트를 경험하며 막막했던 부분들을 기록으로 남기고자 글을 작성하였다. 나와 마찬가지로 처음 팀 프로젝트를 경험할 누군가에게 도움이 될 수 있으면 좋겠다.\n1. 후기 프로젝트를 진행하며 느낀 사항 중 좋았던 부분과 다음에 필히 개선해야겠다고 생각했던 부분을 되새겨 보았다.\n1-1. 만족했던 점 팀 단위의 개발을 처음 경험해보며 혼자서 개발할 때는 추상적으로만 느껴졌던 협업에 대한 부분을 몸소 체험해볼 수 있는 기회가 되었고, 그러면서 여러 시도를 해볼 수 있어서 좋았다.","tags":["log"],"title":"팀 프로젝트(쇼핑몰 제작) 회고 - 1.후기"},{"categories":null,"contents":"어느날 우연히 오라클 클라우드 인프라(이하 OCI) 에서 프리티어 서비스를 제공하는 것을 알게 되었고 \u0026lsquo;내가 만든 웹 프로젝트를 서비스할 서버를 직접 구축해보자!\u0026rsquo; 라고 결심했다. 시도해본 것은 VM(가상머신)에 CentOS 를 설치하고 docker 환경에서 tomcat, nginx, jenkins, MySQL 까지 세팅하여 보았다. 그리고 추가적으로 도메인 설정, SSL 인증서 발급, NAS 서버에 자동 백업 설정, Github WebHook 까지 설정하여 프로젝트 테스트 용도의 웹 서버로 원활히 사용할 수 있도록 설정을 하였고 작업한 내용을 정리해보려 한다.\n기존에 시놀로지 NAS에 docker를 이용하면서 비슷한 경험을 해봐서 수월할거라 착각했지만 꽤나 복잡했고 정리한 내용도 다소 부족한 것 같다.\n1. 서비스 가입 가입은 https://www.oracle.com/kr/cloud/free/ 에서 가능하며 가입할 때 region 을 서울로 입력하라는 이야기가 많았다. 자세한 사항은 모르겠으나 추후에 변경이 어렵다고 하니 이 부분만 체크하면 크게 어려울 사항은 없을 것 같다. 가입할 때 카드 인증을 거치는데 한화로 1800원 정도 결제되었다가 수분 내로 취소처리 되었다. 가입을 마치고 15분정도 후에 메일로 사용이 가능하다는 안내를 받을 수 있었다. (카드결제는 익월에도 한 번 진행되었다. 이게 매달 카드 유효성을 검사하는 것인가 싶기도 하다.)\n2. 세팅 2-1. VM 생성 OCI 로그인 후 메인 화면을 보면 클라우드에서 활용할 수 있는 다양한 기능들이 있는데 이중에서 VM instance를 선택했다.\n선택 후에 기본적인 세팅을 할 수 있는 페이지가 나오는데, 다음 항목들을 선택하였다.\n name: 추후 관리에 용이하도록 식별할 수 있는 이름 지정 image: \u0026lsquo;Always Free-eligible\u0026rsquo; 중에 선택하면 되는데 CentOS 8 을 선택했고 특별한 이유는 없음 networking: \u0026lsquo;Public IP address\u0026rsquo; 체크 (외부 접속을 위하여 필요) ssh-keys: SSH 접속을 위해 필요하니 반드시 다운로드 하여 안전한 곳에 보관 volume: \u0026lsquo;Specify a custom boot volume size\u0026rsquo; 선택 후 50GB 설정  설정을 마친 후에 create 를 하면 된다.\n2-2. 대시보드 확인 설치를 마친 후 대시보드에서 공인아이피와 username 을 체크한다. (SSH 접속에 필요)\nSubnet \u0026gt; Security Lists \u0026gt; Ingress Rules \u0026gt; Add Ingress rules 에서 22 포트(http)와 443 포트(https) 3306포트(SQL)를 개방해주고 추가적으로 필요한 포트가 있다면 마찬가지로 개방해준다.\n2-3. SSH 접속 2-3-1. SSH 접속 맥에서는 터미널에서 ssh 접속이 가능하다.(윈도우는 ssh 클라이언트 프로그램 다운로드 필요) 아까 다운받은 ssh-key가 위치한 디렉토리로 이동해서 ssh 접속을 시도한다.\n# ssh-key가 저장 된 경로로 이동 cd oracle_cloud # ssh 접속 시도 ssh -i ssh-key.key 아이디@공인아이피 혹시나 권한문제로 오류가 발생한다면 디렉토리와 ssh-key 권한을 수정하고 다시 시도해준다.\n# ssh-key 디렉토리 chmod 0700 oracle_cloud # ssh-key 파일 chmod 0400 ssh-key.key 2-3-2. 루트 비밀번호 변경 ssh 접속이 완료되었다면 루트 및 유저 비밀번호를 설정해준다.\n# 루트 sudo passwd root # 유저 sudo passwd opc 2-3-3. ssh-key 없이 로그인 설정 이후 ssh-key 없이 비밀번호를 이용한 접속을 위해서는 sshd_config 파일 수정이 필요하다.\n# /etc/ssh 디렉토리 진입 cd /etc/ssh # 원본파일 백업 sudo cp sshd_config sshd_config.bak # 에디터 진입 sudo nano sshd_config 에디터로 진입하면 \u0026lsquo;PasswordAuthentication\u0026rsquo; 항목을 찾아 yes로 설정한다. (default: no)\n이후 sshd를 재실행 해준다.\nsudo service sshd reload 2-4. 리눅스 방화벽 설정 리눅스에 기본적으로 iptables 라는 방화벽이 설정되어 있다는데, 오라클 클라우드에 자체적인 방화벽이 있으니 필요하다면 중지해도 된다고 한다. 내용을 잘 몰라 그대로 두려했다가 시도해봤는데 생각보다 애를 많이 먹었다.\n# 중지 sudo systemctl stop iptables sudo systemctl stop ip6tables sudo systemctl stop firewalld # 비활성화 sudo systemctl disable iptables sudo systemctl disable ip6tables sudo systemctl disable firewalld # 나중에 필요하면 unmask sudo systemctl mask iptables sudo systemctl mask ip6tables sudo systemctl mask firewalld # 중지 확인 systemctl list-unit-files | grep iptables systemctl list-unit-files | grep fire systemctl status firewalld 2-5. yum 업데이트 CentOS 를 설치하면서 패키지 관리자가 yum(dnf), rpm, deb, apt-get, dpkg 등 다양하게 존재한다는 것을 알게 되었다. 맥에서 homebrew와 같은 역할이지 않을까 싶다.\nsudo yum update sudo yum upgrade 2-6. 서버 타임존 설정 \u0026amp; bash 한글 설정 설치 초기에는 시간대가 GMT 기준이기 때문에 로그에 시간이 이상하게 나온다. 타임존을 GMT +9 로 변경해준다.\n# 타임존 설정 sudo timedatectl set-timezone Asia/Seoul # 설정 확인 timedatectl .bashrc 파일을 수정하면 bash 에서 한글이 깨지지 않고 정상적으로 입력된다.\nvi ~/.bashrc # 아래 내용을 하단에 삽입 LANG=ko_KR export LANG 2-7. 백업 설정(선택) 무료 서비스기 때문에 언제 갑자기 서비스가 종료될지 모른다고 생각해 시놀로지 서버에 자료를 주기적으로 백업할 수 있도록 설정했다. 서비스 종료 우려 외에도 백업 데이터가 있으면 마음이 든든해지니 가급적 세팅하는 것이 좋을 것 같다.\n시놀로지 6버전에서 작업했고 다소 내용이 복잡하다.\n2-7-1. 시놀로지 설정 rsync 활성화 제어판 \u0026gt; 파일 서비스 \u0026gt; rsync 에서 서비스를 활성화 하고 포트를 지정해준다. (사설IP를 사용한다면 해당 포트 포워딩 등이 필요할 수 있음)\n계정 생성 rsync 외의 권한을 최소화 하기위해서 전용 계정을 만들어 주었는데 보안에 신경쓸게 없다면 기존 계정을 그대로 사용해도 된다. 계정에 아래와 같은 권한을 부여해준다.\n administrators 그룹 부여 (ssh 설정 이후 그룹에서 제외할 예정) \u0026lsquo;homes\u0026rsquo; 및 \u0026lsquo;NetBackup\u0026rsquo; 디렉토리 접근 권한 부여 rsync 계정 추가 및 비밀번호 지정  ssh 설정 추후 rsync 진행할 때 비밀번호 없이 저장 된 인증키로 접속을 설정하기 위하여 ssh를 잠시 실행하였으며 편의상 rsync와 동일한 포트로 구성하였다.\n2-7-2. OCI 설정 OCI 서버에 ssh 접속을 하여 ssh-key를 생성해준다.\n[root@centos8 ~]# ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: ***************************************************** root@centos8 The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | . . | | + * . | | . B * . | | . @ = | | ..B S o | | ..=oB.B | | .. *=+.Bo. | |o+ Eooo.o. | |.o=. . .o. | +----[SHA256]-----+ 그리고 아래 명령어로 ssh-key의 내용을 시놀로지 서버의 authorized_keys에 추가하여 준다.\n[root@centos8 ~]# cat ~/.ssh/id_rsa.pub | ssh -p 포트번호 rsync@시놀로지주소 \u0026#34;cat \u0026gt;\u0026gt; .ssh/authorized_keys\u0026#34; 2-7-3. 다시 시놀로지 설정 이후에 시놀로지 서버에 ssh 접속을 하여 다음처럼 접근 권한을 변경해준다. (권한설정에 따라 파일이 존재함에도 불구하고 접속시에 비밀번호를 요구할 수 있다.)\nrsync@Taedi_NAS:~$ sudo chmod 755 /var/services/homes/rsync rsync@Taedi_NAS:~$ sudo chmod 700 /var/services/homes/rsync/.ssh rsync@Taedi_NAS:~$ sudo chmod 600 /var/services/homes/rsync/.ssh/authorized_keys 그리고 sshd_config 파일을 수정하여 인증키로 로그인이 가능하도록 설정을 수정해준다.\n# sshd_config 편집 진입 sudo vi /etc/ssh/sshd_config # 수정할 내용 PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 그리고 sshd 재시작하면 된다.\n# sshd_config 재시작 sudo synoservicectl --restart sshd 이후 시놀로지 제어판에서 ssh 를 비활성화 하고 다시 활성화 하면 접속이 가능하다.\n2-7-4. rsync 테스트 CentOS 서버 ssh 에서 다음 명령어를 사용했을 때 비밀번호 입력없이 백업이 시작된다면 설정이 완료 된 것이다. (본인은 이후 시놀로지 ssh 활성화 해제 및 rsync 아이디에 관리자 권한 해제 후에도 정상적으로 동작했음)\n# CentOS \u0026#39;/\u0026#39;폴더 하위의 내용을 시놀로지 \u0026#39;NetBackup/backup/\u0026#39;경로에 복사 rsync -av -e \u0026#39;ssh -p 시놀로지_포트\u0026#39; / 아이디@시놀로지_주소::NetBackup/backup/ 작업을 중간에 종료하려면 ctrl + c 버튼을 누르면 된다.\n2-7-5. crontab 등록 크론탭을 설정하면 윈도우 작업스케줄러 처럼 특정 시간마다 반복적으로 업무를 지시할 수 있다.\n# 크론탭 편집 crontab -e 크론탭에 방금전 테스트 했던 명령어를 매일 7시에 실행할 수 있도록 설정해주었다. (vi 에디터 수정모드는 insert키, 저장은 :wq, 저장없이 나가려면 :qa!)\n* 7 * * * rsync -av -e \u0026#39;ssh -p 시놀로지_포트\u0026#39; / 아이디@시놀로지_주소::NetBackup/backup/ 참고  https://kb.synology.com/ko-kr/DSM/tutorial/How_to_back_up_Linux_computer_to_Synology_NAS https://blog.naver.com/deeperain/222315501853 https://forteleaf.tistory.com/entry/synology-ssh-key값으로-비밀번호-없이-로그인  ","date":"December 1, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/oci-centos-setting/","summary":"어느날 우연히 오라클 클라우드 인프라(이하 OCI) 에서 프리티어 서비스를 제공하는 것을 알게 되었고 \u0026lsquo;내가 만든 웹 프로젝트를 서비스할 서버를 직접 구축해보자!\u0026rsquo; 라고 결심했다. 시도해본 것은 VM(가상머신)에 CentOS 를 설치하고 docker 환경에서 tomcat, nginx, jenkins, MySQL 까지 세팅하여 보았다. 그리고 추가적으로 도메인 설정, SSL 인증서 발급, NAS 서버에 자동 백업 설정, Github WebHook 까지 설정하여 프로젝트 테스트 용도의 웹 서버로 원활히 사용할 수 있도록 설정을 하였고 작업한 내용을 정리해보려 한다.\n기존에 시놀로지 NAS에 docker를 이용하면서 비슷한 경험을 해봐서 수월할거라 착각했지만 꽤나 복잡했고 정리한 내용도 다소 부족한 것 같다.","tags":["OCI","sever"],"title":"[OCI]CentOS 8 설치 및 세팅하기"},{"categories":null,"contents":"서론 맥에서 이클립스를 사용하려면 불편함을 감수해야하는 부분이 있는데 그중에서도 제일은 한글 짤림 현상일 것이다. 이것은 한글 타이핑 시 마지막에 입력한 글자가 지워지는 현상인데, 이를 방지하려면 문장 작성 후 esc, enter, space 키 등을 입력 해주어야 하는 번거로움이 있다. (SQL 클라이언트 툴인 Dbeaver 또한 동일한 증상을 가지고 있다.)\n구글 검색을 해보니 2013년 이전부터 리포팅 되어왔으나 프로그램 개선이나 해결책이 없는 채로 방치된 문제로 보였고, 여러 포스팅에서 맞춤법 자동 수정 을 해제하라는 말이 있었지만 일단 현재기준으로 전혀 먹히지 않는다.\n결국, 개인적인 삽질 끝에 Karabiner-Elements 를 활용해서 불편함을 어느정도 해소할 수 있는 방법을 찾아보았다.\n바쁘신 분들은 아래에 적용 방법 부분만 확인하시길!\n원인 분석 추측건대 한글은 자모를 조합하여 문자가 되는 특성 때문에 영어처럼 바로 입력되지 않고 문자가 완성되기 까지 임시공간에 있다가 에디터에서 문자가 완성되었다고 판단하는 시점에 비로소 입력이 되는 것으로 보이는데, 다른 에디터와 비교해 이클립스에서 이 판단을 심도있게 고려해주지 않은 듯 하다. 대충 이클립스가 판단력이 나쁘다는 말\n그래서 일부 키 입력은 기존에 작성중인 임시 상태의 한글 입력을 취소시켜버린다. 글에서는 대충 문제 키 라는 표현으로 신호들을 다루겠다.\n backspace 방향키 cmd+e 같은 단축키 한영 전환 마우스 버튼  반면에 다음 입력신호는 직전까지 작성한 자모 조합을 완성 된 글자로 전환시킨다. 글에서는 탈출 키 라고 표현하겠다.\n escape space enter tab 숫자 \u0026amp; 기호 (다음 한글 자모)  단, 여기서 enter 키는 탈출 키 기능을 수행할 때 본연의 업무 (줄바꿈)를 수행하지 않는 문제가 발생한다.\n결론적으로 한글 자모 입력 후 문제 키 와 enter 키 입력 이벤트가 발생했을 때 작성중인 한글을 완성시키는 장치가 필요하다 판단했다.\n아이디어 Karabiner-Elements 는 키보드와 마우스 입력신호를 조건에 따라(conditions) 다른 신호로 맵핑해주는 Complex modifications 기능을 제공하고있어 이 방식을 사용하였다. 비슷한 기능을 제공하는 다른 프로그램 또는 내장 방식이 있다면 해당 방식을 사용해도 무방할듯 하다.\n처음에는 모든 입력 신호를 감지하여 한글 자모와 그 외의 입력으로 구분하고, 문제 키 직전의 최종 키가 한글이었는지 여부를 조사해 그에 맞는 동작을 하게 할까 생각해보았지만 Karabiner-Elements 에서 제공하는 방식으로는 json 코드만 수천줄이 넘어가기도 하고 조건 구문도 많아져 키입력 딜레이가 발생할 수도 있지않을까 하는 부분 때문에 포기하였다. 하지만 아래 시행착오를 겪었고 결국에 이 방법을 선택하게 되었다.\n시행착오 1 처음으로 시도한 것이 문제 키 들이 입력되는 순간에 esc 키를 먼저 입력해 작성중인 자모 조합이 완성 된 문자가 되도록 하는 간단한 아이디어였다.\n{ \u0026#34;title\u0026#34;: \u0026#34;이클립스 한글 짤림 해결\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;이클립스_백스페이스\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; }, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_if_held_down_threshold_milliseconds\u0026#34;: 10 }, \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^org\\\\.eclipse\\\\.platform\\\\.ide$\u0026#34; ] }, { \u0026#34;type\u0026#34;: \u0026#34;input_source_if\u0026#34;, \u0026#34;input_sources\u0026#34;: [ { \u0026#34;language\u0026#34;: \u0026#34;^ko$\u0026#34;, \u0026#34;input_source_id\u0026#34;: \u0026#34;^com\\\\.apple\\\\.inputmethod\\\\.Korean\\\\.2SetKorean$\u0026#34; } ] } ], \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34; } ], \u0026#34;to_after_key_up\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34;, \u0026#34;halt\u0026#34;: true } ] } ] } ] } 코드 일부를 간단히 설명하자면\n conditions(조건) - 입력 소스가 한글이고, 최상단 앱이 이클립스 일 경우에 from(입력 받은 키값) - backspace 가 입력되면 to(변경할 키값) - esc + backspace 로 입력을 전환  하는 간단한 내용으로 이루어져있다.\nenter, tab, space 키들은 경우에 따라 작성한 코드가 변형(줄바꿈, 들여쓰기, 띄어쓰기)될 수 있기 때문에 가장 리스크가 덜한 것이 esc 키 였지만 이마저도 문제점이 있었다. 바로 클래스 생성과 같은 창과 상단 메뉴, 팝업 등에서 esc 키가 입력되어 창이 종료되는 문제가 발생했고 이것도 자주 겪으니 불편하기 짝이없었다.\n추가적으로 한글입력을 하지 않았더라도 시스템 입력 소스가 한글이면 무조건 동작하기 때문에 예상치 않은 문제가 지속적으로 발생하는 문제도 있었다.\n시행착오 2 1번에서 시도한 방식에서 esc 키를 Caps Lock 키 2회 반복으로 변경하여 보았다. 맥 에서는 자체적으로 Caps Lock 키를 한영 전환키로 사용할 수 있는 기능이 있는데, 이를 이용해 입력 소스를 전환하면 작성한 글이 짤리지 않는다.\nCaps Lock 키를 이용하면 작성하던 코드가 훼손되지도 않고 팝업이나 메뉴 창이 의도치 않게 꺼지는 현상도 잡을 수 있지만, 일단 키입력 딜레이가 너무 크다(0.4초 정도). 딜레이를 줄이면 정상적으로 동작하지 않았고, 때문에 그만큼 부자연스러움이 커지는 문제가 발생했다.\n또한, 키조합 상황에서는 먹히지 않는다는 단점도 존재했다. cmd + s, shift + 방향키 등 키를 누른상태에서는 Caps Lock 키가 동작하지 않았다.\n\u0026#34;key_code\u0026#34;: \u0026#34;caps_lock\u0026#34;, \u0026#34;hold_down_milliseconds\u0026#34;: 200 잠정적 결론 처음에 미친짓이라 생각했던 모든 키의 입력을 받아 처리하는 방식을 선택했다. (적어도 내 수준에서는 이게 가장 섹시한 방법인듯 하다.) 우려와 같이 딜레이가 발생한다던지 하는 상황은 발생하지 않았고, 긴 코드 작업도 python 반복문으로 해결했다.\n이 방식이 불가피하다고 판단한 사유는 다음과 같다.\n karabiner 만으로는 이클립스 내부에 어떤 창에 현재 포커스가 잡혀있는지 확인할 수 없다. 에디터, 콘솔, 네비게이터, 메뉴창 등 작업에 따라 다른 조건을 부여할 수 없다. (메뉴창에서만 esc키 말고 다른방법 쓰면되지! 가 안먹힌다는 말) 직전 입력 신호가 한글 키 일때만 동작을 수행하려면 모든 키 입력 감지가 불가피하다.  위의 두가지 사유를 해결할 수 있는 솔루션이 있다면 좀 더 간결한 방법이 나올 수 있을 것 같다.\n방식을 간단하게 설명하자면 우선 입력 신호를 한글 키, 영문 키 및 탈출 키, 문제 키 의 세개 분류로 나누었고 신호가 입력될 때 아래와 같은 로직을 수행한다.\n 한글 키가 입력 될 경우 변수를 1로 저장 영문 키 및 탈출 키 가 입력 될 경우 변수를 0으로 저장 문제 키 가 입력 될 경우, 변수가 1일 경우에만 space + backspace 조합으로 한글을 완성시키고 변수를 0으로 저장  코드는 5,000줄 가량 되어 아래에 깃허브 링크로 대체하였다.\n적용 방법 1. Karabiner-Elements 설치 Karabiner-Elements 설치\n2. .json 파일 다운로드 .json 파일은 여기에서 다운로드 가능하다.\njson 파일을 생성할 때 사용한 python 코드도 같이 확인할 수 있다. (json 라이브러리도 있던데 그냥 쌩 텍스트로 작업했다.)\n아래 경로에 다운로드 받은 .json 파일을 위치시킨다.\n ~/.config/karabiner/assets/complex_modifications\n 3. 설정 추가 Karabiner-Elements Preferences \u0026gt; Complex modifications 탭에서 필요한 규칙들을 추가해주면 된다. 기존에 다른 규칙들을 사용하고 있는 경우 정상적으로 작동하지 않을 수 있으니 상단으로 올려 우선순위를 높여주면 된다.\n마우스 관련 옵션을 사용하기 위해서는 아래 두가지 설정이 더 필요하다.\nKarabiner-Elements Preferences \u0026gt; Devices 에서 사용하는 마우스가 체크 되어있는지 확인해야한다.\n오른쪽 커맨드 버튼을 한영 전환 키로 사용할 경우에는 시스템 환경설정에 단축키를 아래와 같이 변경한다.\n현재까지 발견 된 문제점 현재까지 발견한 문제는 다음과 같으며 이 밖에도 다른 문제가 있을 수 있으니 유의할 것!\n 한글 입력 직후 빠르게 cmd + s 등의 키조합을 사용하려할 경우, 올바르게 동작하지 않는 현상 - cmd키를 누르고 0.2초 이상 지난 후에 s 버튼을 눌러야 정상적으로 동작함 한글입력 중 backspace 시 \u0026lsquo;종성\u0026rsquo; - \u0026lsquo;중성\u0026rsquo; - \u0026lsquo;초성\u0026rsquo; 순으로 지워지는 것이 아니라 한개 글자가 바로 삭제 되는 현상 - 2021.10.17 추가 내용 참고  그리고 최고의 해결책은 이클립스를 포기하고 intellij를 사용하는 것이다.\n2021.10.17 추가 구름 입력기를 쓴다면 backspace 는 Complex modifications 에서 제외시키면서 문제점 2번 을 해결할 수 있다.\n","date":"October 16, 2021","hero":"/images/hero/java.png","permalink":"https://log.taedi.net/eclipse-mac-kor-fix/","summary":"서론 맥에서 이클립스를 사용하려면 불편함을 감수해야하는 부분이 있는데 그중에서도 제일은 한글 짤림 현상일 것이다. 이것은 한글 타이핑 시 마지막에 입력한 글자가 지워지는 현상인데, 이를 방지하려면 문장 작성 후 esc, enter, space 키 등을 입력 해주어야 하는 번거로움이 있다. (SQL 클라이언트 툴인 Dbeaver 또한 동일한 증상을 가지고 있다.)\n구글 검색을 해보니 2013년 이전부터 리포팅 되어왔으나 프로그램 개선이나 해결책이 없는 채로 방치된 문제로 보였고, 여러 포스팅에서 맞춤법 자동 수정 을 해제하라는 말이 있었지만 일단 현재기준으로 전혀 먹히지 않는다.","tags":["eclipse","macOS"],"title":"이클립스(eclipse), Dbeaver 맥에서 한글 짤림문제 해결"},{"categories":null,"contents":"오랜만에 파이썬을 사용하려고 보니 pyenv 와 pipenv 용어들은 기억나는데 좀처럼 어떻게 써야할지 감이 잡히지 않았다. 물론 글로벌 환경에서 작업해도 무방했지만 소싯적 시험기간에 공부보단 책상정리에 열중했던 주의력 산만한 학생으로서 두가지를 반드시 사용해야겠다는 결의를 다져보았다. 찾아보니 예전에 같은 주제로 메모도 해두었지만 나조차 이해가 되지않을 만큼의 내용으로 도움이 되지 않았고 이에 새롭게 파이썬 가상환경 사용방법을 알아 보았다. 물론 파이썬 가상환경의 전반적인 부분은 아니고 내가 사용할 만큼, 그리고 세팅하면서 발생하는 의구심에 대한 부분을 나의 눈높이 정도로 정리하였다. (막상 쓰고보니 이전에 쓴 글이 이해되는 것 같은.. 그때 훨씬 더 많이 알고 있었을지도?)\n내용 가상환경은 간단하게 말해 프로젝트마다 독립된 방을 만들어서 각각의 프로젝트를 별도의 환경으로 구성하거나 여러 pc 혹은 협업자와 동일한 환경을 구성하는 것을 좀 더 좀 더 편리하게 해주는 툴이라고 볼 수 있다.\n프로젝트마다 환경을 다르게 해주는 이유는 무엇인가? 예를 들면 파이썬 3.9 버전을 사용하고 있는데 내가 써야할 패키지는 3.6버전에서만 동작한다면 3.9버전을 삭제하고 3.6버전을 설치하던지 패키지를 포기할지 고민하는 순간이 생길 수 있다. 각각의 프로젝트마다 패키지 버전을 달리해야할 수도 있으며 프로젝트에 사용하지 않는 불필요한 패키지들 때문에 pyinstaller 등으로 배포 파일을 만들 때 의도치 않게 용량이 커지는 문제가 발생할 수도 있다. 가상환경은 이런 걱정을 완화시켜줄 수 있다.\n그럼 pyenv는 뭐고 pipenv는 무엇인가? 이름 또한 너무 비슷하다! 활용할 부분에 대해서만 설명하자면 다음과 같다.\npyenv : pc에 여러 버전의 파이썬을 설치해 프로젝트마다 각기 다른 버전의 파이썬 환경을 구성할 수 있다.\npipenv : pip 와 virtualenv 를 합쳐놓은 것, 가상환경을 생성하고 패키지 구성을 서로 다르게 할 수 있다.\npipenv는 pyenv가 설치되어 있다면 가상환경에 패키지 뿐만아니라 파이썬도 버전을 지정해 줄 수 있다.\npyenv 사용 방법 간단한 사용법을 정리해 보았다.\n👉 설치하기 homebrew 환경에서는 아래 명령어로 설치가 가능하다.\n$ brew install pyenv 👉 파이썬 설치 pyenv를 설치하면 아래 명령어들로 간단하게 설치 가능한 파이썬 버전을 확인하고 설치할 수 있다.\n# 설치 가능 리스트 확인 $ pyenv install -l # 3.7.3 버전 설치 $ pyenv install 3.7.7 🙅🏻 파이썬 설치 오류 관련 간혹 아래와 같은 오류 메세지들과 함께 설치가 안되는 경우가 발생할 수 있다. (그게 바로 나의 경우..!)\n xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\n  error: implicit declaration of function \u0026lsquo;sendfile\u0026rsquo; is invalid in C99\n 나는 이곳을 참고하여 다음 스텝들을 진행하였고 정상적으로 설치가 되었다.\n zlip bzip2 재설치  $ brew reinstall zlib bzip2  쉘에 환경변수 추가 (.zshrc 파일에 추가해둬도 될 것 같다)  export PATH=\u0026#34;$HOME/.pyenv/bin:$PATH\u0026#34; export PATH=\u0026#34;/usr/local/bin:$PATH\u0026#34; eval \u0026#34;$(pyenv init -)\u0026#34; eval \u0026#34;$(pyenv virtualenv-init -)\u0026#34; export LDFLAGS=\u0026#34;-L/usr/local/opt/zlib/lib -L/usr/local/opt/bzip2/lib\u0026#34; export CPPFLAGS=\u0026#34;-I/usr/local/opt/zlib/include -I/usr/local/opt/bzip2/include\u0026#34;  설치 시도(3.6.0 버전 예시)  CFLAGS=\u0026#34;-I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include\u0026#34; LDFLAGS=\u0026#34;-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib\u0026#34; pyenv install --patch 3.6.0 \u0026lt; \u0026lt;(curl -sSL https://github.com/python/cpython/commit/8ea6353.patch\\?full_index\\=1) 다른 버전을 설치하려면 위의 명령어에서 버전을 변경하여 준다.\n이렇게 해도 안된다면 xcode CommandLineTools를 다시 설치하고 위를 반복한다.\n$ sudo rm -rf /Library/Developer/CommandLineTools $ xcode-select --install 👉 설치 목록 확인 pyenv 로 설치한 파이썬 버전들은 다음 명령어로 확인할 수 있다.\n$ pyenv versions * system (set by /Users/taedi/.pyenv/version) 3.6.13 3.7.3 pypy3.5-7.0.0 👉 기타 다른 기능들은 pyenv -h 나 깃헙에서 확인이 가능하다.\nUsage: pyenv \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] Some useful pyenv commands are: --version Display the version of pyenv commands List all available pyenv commands exec Run an executable with the selected Python version global Set or show the global Python version(s) help Display help for a command hooks List hook scripts for a given pyenv command init Configure the shell environment for pyenv install Install a Python version using python-build local Set or show the local application-specific Python version(s) prefix Display prefix for a Python version rehash Rehash pyenv shims (run this after installing executables) root Display the root directory where versions and shims are kept shell Set or show the shell-specific Python version shims List existing pyenv shims uninstall Uninstall a specific Python version version Show the current Python version(s) and its origin version-file Detect the file that sets the current pyenv version version-name Show the current Python version version-origin Explain how the current Python version is set versions List all Python versions available to pyenv whence List all Python versions that contain the given executable which Display the full path to an executable See `pyenv help \u0026lt;command\u0026gt;\u0026#39; for information on a specific command. For full documentation, see: https://github.com/pyenv/pyenv#readme pipenv 사용 방법 pipenv의 사용 방법은 아래에서 상세하게 다룰거라 간단하게 정리했다.\n👉 설치하기 $ brew install pipenv 👉 명령어 # 파이썬 버전 지정 $ pipenv --python 3.7.3 # 패키지 설치 $ pipenv install [패키지명] $ pipenv install $ pipenv install --dev # venv 진입/종료 $ pipenv shell $ exit $ pipenv run python # venv 경로 확인 $ pipenv --venv $ pipenv --py # venv 삭제 $ pipenv --rm # 패키지 목록 확인 $ pipenv graph 더 자세한 내용은 pipenv -h 를 확인해보자.\nUsage: pipenv [OPTIONS] COMMAND [ARGS]... Options: --where Output project home information. --venv Output virtualenv information. --py Output Python interpreter information. --envs Output Environment Variable options. --rm Remove the virtualenv. --bare Minimal output. --completion Output completion (to be executed by the shell). --man Display manpage. --support Output diagnostic information for use in GitHub issues. --site-packages / --no-site-packages Enable site-packages for the virtualenv. [env var: PIPENV_SITE_PACKAGES] --python TEXT Specify which version of Python virtualenv should use. --three / --two Use Python 3/2 when creating virtualenv. --clear Clears caches (pipenv, pip, and pip- tools). [env var: PIPENV_CLEAR] -v, --verbose Verbose mode. --pypi-mirror TEXT Specify a PyPI mirror. --version Show the version and exit. -h, --help Show this message and exit. Usage Examples: Create a new project using Python 3.7, specifically: $ pipenv --python 3.7 Remove project virtualenv (inferred from current directory): $ pipenv --rm Install all dependencies for a project (including dev): $ pipenv install --dev Create a lockfile containing pre-releases: $ pipenv lock --pre Show a graph of your installed dependencies: $ pipenv graph Check your installed dependencies for security vulnerabilities: $ pipenv check Install a local setup.py into your virtual environment/Pipfile: $ pipenv install -e . Use a lower-level pip command: $ pipenv run pip freeze Commands: check Checks for PyUp Safety security vulnerabilities and against PEP 508 markers provided in Pipfile. clean Uninstalls all packages not specified in Pipfile.lock. graph Displays currently-installed dependency graph information. install Installs provided packages and adds them to Pipfile, or (if no packages are given), installs all packages from Pipfile. lock Generates Pipfile.lock. open View a given module in your editor. run Spawns a command installed into the virtualenv. scripts Lists scripts in current environment config. shell Spawns a shell within the virtualenv. sync Installs all packages specified in Pipfile.lock. uninstall Uninstalls a provided package and removes it from Pipfile. update Runs lock, then sync. 그래서 프로젝트를 어떻게 설정하는가? 제일 중요한 부분이다. 간만에 파이썬을 이용해서 무언가를 만들어보려고하니 이 부분에서 막혀 한참을 헤메었다. 반드시 이렇게 해야하는 것은 아니겠지만 나의 경우 이렇게 세팅해보았다.\n1. pyenv로 원하는 파이썬 버전 설치 기존에 설치되어 있다면 추가로 설치해줄 필요는 없다.\n$ pyenv install 3.7.3 2. pipenv로 python 버전 선언 $ pipenv --python 3.7.3 3. 패키지 설치 프로젝트에 필요한 패키지들을 설치해준다.\n$ pipenv install pyqt5 🤔 어딘가에서 가져온 프로젝트는? 프로젝트를 새로 생성하는 것이 아니라 git repo 등을 통해서 pull 하였다면 Pipfile 및 Pipfile.lock 파일이 생성되어 있을 수 있다. 이 경우에는 2번과 3번을 건너뛰고 아래 명령어를 입력해주면 되는데 여기서 또 sync 와 install 두개로 나뉜다. 이곳에 따르면\ninstall 은 Pipfile 에 기록된 의존성을 토대로 패키지들을 설치하고 그걸 토대로 Pipfile.lock를 업데이트 해버린다고 한다. sync 는 Pipfile.lock 에 지정된 패키지 버전을 그대로 설치하는 것이라 실제 작업 환경과 동일하게 매칭시켜 줄 수 있어 선호된다고 한다. (간단히 말해서 install 은 호환버전 설치, sync는 완전 일치 같은 느낌이려나..)\n$ pipenv sync $ pipenv install 🤔 Pipfile.lock 생성 시기? Pipfile.lock 파일은install, uninstall, 명령어를 사용할 때 자동으로 생성된다. 그리고lock 명령어를 사용해 직접 생성하여 줄 수도 있다. 한개 파일이 아니라 Pipfile 과 나누어져 있는 부분과 관련해서는 의존성, 검증, 해시 생성 목적 등을 좀 더 구체적으로 이해하고 난 후에 알 수 있을 것 같다.\n✍🏻 프로젝트 내부에 .venv 폴더 생성하기 기본적으로 가상환경 경로는 /Users/{사용자명}/.local/share/virtualenvs/{프로젝트명}-{난수번호}/ 에 위치한다.\n$ pipenv --venv /Users/taedi/.local/share/virtualenvs/test-XBItUTrH 이것을 프로젝트 폴더 내에 위치하려면 .venv 폴더를 추가하여 주면 된다.\n# 프로젝트 디렉토리에 .venv 폴더 생성 $ mkdir .venv 이후 가상환경을 생성하여 주면 프로젝트 폴더 내에 .venv 폴더에 위치한 것을 확인할 수 있다. 기존에 이미 가상환경을 설정했다면 pipenv --rm 으로 기존 환경을 삭제해주어야 한다.\n$ pipenv --python 3.7.3 $ pipenv --venv /Users/taedi/workspace_python/test/.venv .venv를 활용하면 VSCode 에서 프로젝트 가상환경의 python interperter 를 default 로 설정되도록 할 수 있다. settings.json 파일에 아래 코드를 추가하면 된다. settings.json 파일은 /Users/{사용자명}/Library/Application Support/Code/User 경로에 있다.\n\u0026#34;python.venvPath\u0026#34;: \u0026#34;${workspaceFolder}/.venv/bin/python\u0026#34;, \u0026#34;python.pythonPath\u0026#34;: \u0026#34;.venv/bin/python\u0026#34; 4. 가상환경 활성 \u0026amp; 비활성 다음 명령어로 가상환경 shell 을 실행하고 종료할 수 있다.\n$ pipenv shell $ exit 🙊 가상환경을 활성화 없이 바로 실행하는 법 또는 shell 실행 없이 바로 프로젝트 파일을 실행할 수도 있다.\n$ pipenv run python $ pipenv run python test.py .zshrc 에 alias prp=\u0026quot;pipenv run python\u0026quot; 와 같이 설정하여 좀더 간편하게 사용할 수도 있다.\n👉 의존성 그래프 확인 다음 명령어로 가상환경의 의존성 그래프를 확인할 수 있다.\n$ pipenv graph 👉 가상환경 경로 확인 가상환경이 설치된 경로는 아래 명령어를 통해서 확인이 가능하다.\n$ pipenv --venv /Users/taedi/.local/share/virtualenvs/test-XBItUTrH $ pipenv --py /Users/taedi/.local/share/virtualenvs/test-XBItUTrH/bin/python 5. 가상환경 삭제 가상환경이 더이상 필요하지 않거나 어딘가에서 Pipfile 파일을 받아왔는데 충돌이 일어난다면 아래 명령어로 기존의 가상환경을 지울 수 있다.\n$ pipenv —rm 기타 설정을 다하고나니 글로벌 환경에 설치했던 패키지들을 모조리 지우고 싶은 충동이 생겼다. 삭제도 할겸 pip 명령어도 간단하게 알아보았다.\npip 기본 파이썬 패키지 관리자로 풀네임은 Pip Installs Packages 재귀약어라는데 이게 왜 궁금했는지는 모르겠다.\n👉 pip 사용 방법  순서대로 pip 업데이트, 패키지 설치, 패키지 삭제\npip install —upgrade pip\npip install [패키지명]\npip uninstall [패키지명]\n 설치 된 패키지는 아래 명령어로 확인할 수 있다.\npip list 👉 pip 패키지 한번에 삭제하기 아무튼 가상환경을 다 생성하고 나면 기존에 pip로 설치했던 패키지들을 싹 밀어버리고 싶은 충동이 생길 수 있다.\n$ pip freeze \u0026gt; requirements.txt $ pip uninstall -r requirements.txt -y 명령어를 실행한 폴더에 requirements.txt 라는 파일로 설치된 패키지와 버전들이 명세되고 이것들을 읽어와서 모조리 지우는 것이다. 같은 맥락으로 복구는 아래와 같은 방식으로 하면 된다.\n$ pip install -r requirements.txt 물론 복구할 예정이 없다면 rm requirements.txt 명령어로 싸악 지워버리면 될 것 같다.\npython3 → python 맥은 기본적으로 2버전대 파이썬이 설치되어 있다. 때문에 3버전대를 이용하려면 python3 과 pip3 명령어를 사용해야한다. 불편함이 느껴진다면 .zshrc 혹은 .bashrc 파일을 실행해 아래 값을 입력하고 저장하면 된다.\n# python3 to python alias pip=\u0026#34;pip3\u0026#34; alias python=\u0026#34;python3\u0026#34; 이후 2버전대 python은 python2 로 호출하면 된다.\n참고  https://github.com/pyenv/pyenv https://github.com/pypa/pipenv https://www.daleseo.com/python-pipenv/ https://towardsdatascience.com/python-environment-101-1d68bda3094d  ","date":"September 18, 2021","hero":"/images/hero/python.png","permalink":"https://log.taedi.net/python-virtual-environment-setup/","summary":"오랜만에 파이썬을 사용하려고 보니 pyenv 와 pipenv 용어들은 기억나는데 좀처럼 어떻게 써야할지 감이 잡히지 않았다. 물론 글로벌 환경에서 작업해도 무방했지만 소싯적 시험기간에 공부보단 책상정리에 열중했던 주의력 산만한 학생으로서 두가지를 반드시 사용해야겠다는 결의를 다져보았다. 찾아보니 예전에 같은 주제로 메모도 해두었지만 나조차 이해가 되지않을 만큼의 내용으로 도움이 되지 않았고 이에 새롭게 파이썬 가상환경 사용방법을 알아 보았다. 물론 파이썬 가상환경의 전반적인 부분은 아니고 내가 사용할 만큼, 그리고 세팅하면서 발생하는 의구심에 대한 부분을 나의 눈높이 정도로 정리하였다.","tags":["pip","pipenv","pyenv","python"],"title":"파이썬 가상환경 설정(pyenv, pipenv)"},{"categories":null,"contents":"서론 코딩 공부를 시작하며 메모는 선택이 아닌 필수가 되었다. 처음에는 노션으로 기본적인 메모를 하고 어느정도 정리가 되면 티스토리에 업로드를 할 것을 계획했고 포스팅을 조금씩 해나가고 있었는데, 언젠가부터 글을 작성할 때 마다 reCAPTCHA 가 발생하기 시작했다.\n물론 직접 글을 작성할 때야 체크 항목이 하나 늘어난 것 뿐이지만, 문제는 OPEN API 방식의 포스팅은 완전히 불가능해져 애용하던 Notion2Tistory 를 활용할 수가 없어진 것이 큰 문제였다. (노션에 작성한 글을 API 없이 티스토리에 업로드 하기위해서는 대단한 인내심이 필요했다.)\nreCAPTCHA 가 모든 블로그에 해당하는 사항이 아니었기 때문에 아무래도 내 블로그가 저품질 판정을 받은 것 같은데, 도배나 광고글을 작성한 적이 없고 게시글 수도 많지않아 이같은 처분이 당황스러워 고객센터에 문의도 해보았으나 이렇다할 답변을 받지 못했고, 티스토리 내에서 해결책을 찾느니 이왕 이렇게 된거 다른 서비스를 찾아보기로 결심하게 되었다.\n결론적으로 Github Pages 와 Hugo 를 활용하기로 결정하였고, 조만간 세팅했던 기억도 가물가물해질 것이 분명하기 때문에 기록으로 남겨놓고자 한다.\n내게 필요했던 사항 1. 노션 메모를 최소한의 수정 또는 무수정으로 배포할 수 있을 것 노션과의 호환성은 0순위였다. 가뜩이나 글을쓰고 정리하는게 어렵게 느껴지는데 플랫폼을 오가며 글을 수정하고 있으면 글을 다듬는 실력은 늘지도 모르겠지만, 그만큼 학습할 시간이 부족해 주객이 전도된다고 느껴졌다. 노션으로 작성한 메모를 마크다운 형식으로 배포할 수 있기 때문에 (문제가 꽤 있다는 것을 후에 깨달았다) 마크다운을 지원하는 medium, velog, wordpress, github pages 들을 리스트에 올렸다.\n2. 방문 유입은 크게 관계 없음 사실 작성하게 될 글들이 매우 기초적이고 오류 투성이가 될 예정이라 많은 노출은 부담스럽다. 그래서 velog 같은 서비스도 괜찮다고 생각했지만 전문적인 글들 사이에 나의 초라한 메모가 혹여 노출되진 않을까 하는 자격지심에 나중에 기회가 되면 사용해보겠다고 마음먹었다.(고수분들이 지켜보고 있다..! ' \u0026lsquo;;)\n3. 무료이고 안정적인 서비스 면 좋겠다고 생각했다. 다행이도 대부분의 서비스가 무료 플랜이 존재하였고 안정적으로 보였다.\nGithub Pages를 선택한 이유 개별적인 설정도 필요하여 다른 서비스에 비해서 시간투자가 예상되긴 했지만, 그만큼 자유도가 높지 않을까 생각되기도 했고 git pull 한번이면 손쉽게 게시했던 내용을 백업할 수 있다는 점이 매력적이었다. 공부하는셈 치자는 합리화와 함께 Github Pages 를 선택하게 되었다. ****Github Pages 에 적용할 수 있는 블로그 프레임워크 중에 Jekyll 과 Hugo 가 인기가 있는듯 했고, 기존에 Jekyll 로 세팅을 해봤기 때문에 이번엔 Hugo 를 선택하였다.\n설치 1. 휴고 설치 brew install hugo brew 명령어를 사용할 수도 있으나 arm맥에서 정상적으로 작동하는지 확인되지 않아 직접 다운받아 알맞은 경로에 압축을 풀고 path를 설정해 주었다.\n https://github.com/gohugoio/hugo\n export PATH=\u0026#34;/Users/taedi/hugo/bin:$PATH\u0026#34; 2. 사이트 생성 hugo new site taedi90.github.io -f=yaml --force cd taedi90.github.io git init 3. 테마 다운로드 테마는 Hugo 사이트에서 여러가지 중에 선택할 수 있는데 테마마다 설정들이 조금씩 달라 자주 변경하는 것은 쉽지 않을 것 같다. 목차와 카테고리 기능이 필요해 Toha 테마를 선택했다\ngit submodule add https://github.com/hugo-toha/toha.git themes/toha 4. 기본 설정 테마마다 설정이 다를 수 있으므로 각 테마의 readme.md 파일이나 Docs 사이트를 확인하여 config.yaml 파일을 알맞게 수정해준다.\n5. 실행 실행은 아래 명령어 중에 선택하여 입력하면 된다. \u0026lsquo;-D\u0026rsquo;는 front matter 에 draft가 true로 체크 된 컨텐츠도 빌드하여 확인할 수 있도록 해준다.\nhugo server -D hugo server --bind 아이피주소 -D 6. 댓글기능 (utterances) 추가 깃허브에 Public 리포지토리를 추가해준다. 리포지토리 명은 \u0026lsquo;blog_comments\u0026rsquo; 로 지정해 주었다.\n그리고 여기를 눌러 방금 생성한 리포지토리에 utterances 를 설치하고 스크립트를 테마의 알맞은 부분에 넣어주면 된다.\n참고  https://gohugo.io/getting-started/quick-start/ https://ialy1595.github.io/post/blog-construct-1/ https://utteranc.es/  ","date":"September 13, 2021","hero":"/images/hero/blog.png","permalink":"https://log.taedi.net/hugo-install/","summary":"서론 코딩 공부를 시작하며 메모는 선택이 아닌 필수가 되었다. 처음에는 노션으로 기본적인 메모를 하고 어느정도 정리가 되면 티스토리에 업로드를 할 것을 계획했고 포스팅을 조금씩 해나가고 있었는데, 언젠가부터 글을 작성할 때 마다 reCAPTCHA 가 발생하기 시작했다.\n물론 직접 글을 작성할 때야 체크 항목이 하나 늘어난 것 뿐이지만, 문제는 OPEN API 방식의 포스팅은 완전히 불가능해져 애용하던 Notion2Tistory 를 활용할 수가 없어진 것이 큰 문제였다. (노션에 작성한 글을 API 없이 티스토리에 업로드 하기위해서는 대단한 인내심이 필요했다.","tags":["blog","github pages","hugo"],"title":"Github 블로그 설정  1. Hugo 설치"},{"categories":null,"contents":"글 게시 작성한 글을 게시하려면 md 형식으로 저장하여 프로젝트 내부의 content 폴더에 위치시키면 된다.\nfront matter 설정 글 상단에 yaml, toml, json 키 값 쌍으로 이워진 front matter 를 작성해야한다. front matter 는 종류가 꽤 다양해 공식 문서를 확인해보고 필요한 것들을 선택적으로 사용하면 될 듯하다. 그리고 적용한 테마에 따라서 필수적으로 요구되는 front matter 가 달라질 수 있고 형식 또한 달라질 수 있는 듯 하다.\nhttps://gohugo.io/content-management/front-matter/\n섹션 설정 hugo는 폴더로 섹션과 하위 섹션을 구분할 수 있다. 거기에 맞춰 md 파일을 위치시키면 되고 기본적으로 content 폴더 이후 경로가 url이 된다. 이를 변경하려면 front matter 중 url 을 이용하면 된다. 사실 몇번을 읽어봐도 이해가 잘 되지않아 마찬가지로 공식문서 링크를 남긴다.\nhttps://gohugo.io/content-management/organization/\n테마 설정 시중에 배포되어 있는 테마를 받아 적용하게 되면 경우에 따라 입맛대로 수정하고 싶은 욕구가 생길 수 있다. 그럴 때 pull 받은 테마를 바로 수정해도 반영이 되지만 가급적 루트 폴더에 사본을 만들어 해당 파일을 수정하여 사용하는 편이 유지보수 측면에서 유용하다.\n예를들어 /themes/toha/layouts/single.html 파일을 수정하고 싶다면 루트폴더에 /layouts 경로를 만들어 파일을 복사하고 수정하여 쓰는 것이다.\n빌드시에 적용한 테마의 파일과 루트 파일을 합치게 되는데, 동일한 파일이 있다면 루트 폴더의 파일을 우선적으로 사용하기 때문에 이같은 방식이 가능하다. (더 자세한 내용은 이 분 블로그 내용 참고)\n처음엔 이 내용을 몰라서 submodule로 등록한 테마 디렉토리를 직접 수정해가며 \u0026lsquo;나중에 테마 업데이트가 있으면 이 부분을 어떻게 반영하지\u0026hellip;?\u0026rsquo; 생각하고 있었다. 역시 무식하면 용감한듯하다. 덕분에 설정했던 내용을 다시 다 잡아주었다.\n같은 맥락으로 여러개의 테마를 우선순위를 두어 적용도 가능한 듯 한데 도저히 엄두가 나질않아 포기했다. (관심 있으신 분들은 여기를 참고)\n이 부분만 제대로 활용하면 테마 설정은 입맛대로 할 수 있다. (원래는 테마 설정하면서 여러 삽질 했던 기록들을 작성하려 했는데.. 오래되어 다 까먹어버렸다.)\n참고  https://gohugo.io/hugo-modules/theme-components/ https://ialy1595.github.io/post/blog-construct-2/  ","date":"September 13, 2021","hero":"/images/hero/blog.png","permalink":"https://log.taedi.net/hugo-setting/","summary":"글 게시 작성한 글을 게시하려면 md 형식으로 저장하여 프로젝트 내부의 content 폴더에 위치시키면 된다.\nfront matter 설정 글 상단에 yaml, toml, json 키 값 쌍으로 이워진 front matter 를 작성해야한다. front matter 는 종류가 꽤 다양해 공식 문서를 확인해보고 필요한 것들을 선택적으로 사용하면 될 듯하다. 그리고 적용한 테마에 따라서 필수적으로 요구되는 front matter 가 달라질 수 있고 형식 또한 달라질 수 있는 듯 하다.\nhttps://gohugo.io/content-management/front-matter/\n섹션 설정 hugo는 폴더로 섹션과 하위 섹션을 구분할 수 있다.","tags":["blog","github pages","hugo"],"title":"Github 블로그 설정 2. 세부 설정"},{"categories":null,"contents":"노션은 기본적으로 작성한 글을 마크다운으로 내보낼 수 있는 기능이 있어 hugo 포스팅을 하는데 탁월할 것이라 생각했다.\n하지만 노션의 내보내기 기능은 어딘가 아쉬운 부분이 있어 이것을 조금 손봐줄 필요가 있었다.\n추가 작업 H 태그 노션은 h1 ~ h3 태그만 지원하며 h4~h6 태그는 없다. 그런데 h1 태그는 포스트에 여러개 존재하면 SEO 점수에 좋지 않은 영향을 미치기 떄문에 hugo 포스팅을 염두에 둔다면 h2 와 h3 태그만 사용해야하는 문제가 발생한다.\n그대로 사용하기엔 기존의 글을 그대로 옮기기 위해 추가적인 작업이 필요한 문제와(h1 태그 안쓴 글이 없었다..) 평문과 두 종류의 Heading 만으로 표현하기에는 제약이 많다는 점 때문에 손봐줄 필요성을 느꼈다.\n그래서 h1 ~ h6 태그를 h2 ~ 볼드체 한 단계씩 낮추는 작업을 추가하였다.\n# h태그 단계 낮추기 for p in paragraphs: # ``` 코드블럭 확인(스페이스 제외) if re.match(\u0026#39;[\\s]*```\u0026#39;, p): blockquote ^= 1 # 코드블럭 내부인 경우 h 태그 탐색안함 if blockquote == 1: modParagraphs.append(p) continue # \u0026gt; 인용문 줄바꿈 풀리는 현상(다단 인용은 처리 어려움) if re.match(\u0026#39;[\\s]*\u0026gt;\u0026#39; , p): quotation = 1 elif quotation == 1 and re.fullmatch(\u0026#39;\u0026#39;, p): quotation = 0 # 인용문 종료 # \u0026gt; 인용문 줄바꿈 처리, h 태그 탐색안함 if quotation == 1: modParagraphs.append(p + \u0026#39; \u0026#39;) continue # h1 ~ h5 태그 hn + 1 태그로 바꾸기 if re.match(\u0026#39;[\\s]*#{1,5}\\s\u0026#39;, p): p = re.sub(\u0026#39;([\\s]*#{1,5})\\s\u0026#39;,r\u0026#39;\\1# \u0026#39;, p) # h6 태그는 볼드체로 수정 elif re.match(\u0026#39;[\\s]*#{6}\\s\u0026#39;, p): p = re.sub(\u0026#39;([\\s]*)#{6}\\s([\\W\\w]*)\u0026#39;,r\u0026#39;** \\1\\2 **\u0026#39;, p) 처음에 정규식 1줄로 해결하려고 해보았지만 코드블럭, 인용문, 본문 사이사이의 # 문자 등 변수가 많았고(코드블럭과 인용문 내부의 # 태그는 손대지 않는다!), 결국 본문을 줄바꿈 문자를 기준으로 나누어 다소 복잡한 구문으로 변환작업을 구성했다.\n이미지 파일 경로 한글이 인코딩 된 방식인데 이상하게 한글 하이픈 숫자 조합은 엑스박스라는 결과물이 나온다. (한글까지만 적힌건 괜찮고, 영어 하이픈 숫자는 또 괜찮다..) 뒤늦게 생각해보니 노션과 휴고 url 인코딩 방식이 달라서 그렇지 않았나 싶은데 조금 무식하게 이미지 파일 주소와 이름을 아예 바꿔버리는 방식을 택했다.\n 테스트 이미지1.jpg → pic-0001.jpg\n # 이미지 파일명 변경 for img in imgs: img_ext = re.sub(\u0026#34;[\\w\\W]+?(\\.[\\w]+?\\Z)\u0026#34;,r\u0026#34;\\1\u0026#34;,img) # 확장자 가져오기 rename_img = \u0026#34;pic-{0:04d}\u0026#34;.format(idx) + img_ext # 변경할 이름 설정 origin_img_path = rename_img_dir_path + \u0026#34;/\u0026#34; + img rename_img_path = rename_img_dir_path + \u0026#34;/\u0026#34; + rename_img os.rename(origin_img_path, rename_img_path) # 파일 이름 변경 img_dict[img] = rename_img # 변경 전/후를 딕셔너리 쌍으로 저장 idx += 1 # 본문 이미지 링크 수정 if \u0026#39;img_dict\u0026#39; in globals(): for key, val in img_dict.items(): origin_path = parse.quote(origin_img_dir_name + \u0026#34;/\u0026#34; + key, \u0026#39;/!@#$\u0026amp;()_-+=~\\\u0026#39;;,\u0026#39;) fix_path = rename_img_dir_name + \u0026#34;/\u0026#34; + val body = body.replace(origin_path, fix_path) 나중에 시간이 된다면 이 부분은 좀더 세련된 방식으로 바꿔야 할 듯 하다.\nfront matters 날짜 포맷 노션에서는 날짜 포맷이 다음과 같다.\n이걸 hugo에서 활용하려면 \u0026ldquo;2021-10-16T23:43:00+09:00\u0026rdquo; 와 같은 형식으로 변경해주어야 했다.\n이 부분은 datetime 과 pytz 로 해결하였다.\nfrom datetime import datetime import pytz def str_to_date(str): TIME_ZONE = pytz.timezone(\u0026#39;Asia/Seoul\u0026#39;) str = re.sub(\u0026#34;오후\u0026#34;, \u0026#34;PM\u0026#34;, str) str = re.sub(\u0026#34;오전\u0026#34;, \u0026#34;AM\u0026#34;, str) try: res = datetime.strptime(str, \u0026#34;%Y년 %m월 %d일 %p %I:%M\u0026#34;) except ValueError: try: res = datetime.strptime(str, \u0026#34;%Y년 %m월 %d일\u0026#34;) except ValueError: res = datetime.now() res = TIME_ZONE.localize(res).isoformat() return res 줄바꿈 노션에서 내보내기한 md 파일은 기존의 줄바꿈이 제대로 반영되어 있지 않다. 몇줄을 띄우더라도 한줄만 넘어간다.\n한 줄은 너무 답답하게 느껴져 두줄씩 더 띄울 수 있도록 정규식을 짜 보았다.\n# 줄바꿈 간격 수정 (코드블럭 아래는 줄바꿈이 안됨) body = re.sub(\u0026#34;(```\\w[^`]*?```\\n)?([^`]*?)\\n\\n\u0026#34;, r\u0026#34;\\1\\2\u0026#34; + (\u0026#34;\\nㅤ \u0026#34; * 3) + \u0026#34;\\n\u0026#34;, body) body = re.sub(\u0026#34;(```)\\n\\n\u0026#34;, r\u0026#34;\\1\u0026#34; + (\u0026#34;\\nㅤ \u0026#34; * 3) + \u0026#34;\\n\u0026#34;, body) 현재는 정규식으로 처리하지 않고 css로 줄간격을 조정하고있다.\nfront matters 입력 hugo 에 포스팅을 하기위해서는 md 파일 상단에 아래 사진처럼 front matters를 입력해야한다.\n노션에서 아래와 같이 속성을 입력하면 md 전환 시에 지정된 폼으로 변경될 수 있도록 세팅하였다.\n부모 폴더 생성 및 _index.md 파일 처리 이 부분은 노션의 문제는 아니고 hugo 포스팅 시에 느낀 번거로운 점이다. 글을 게시하려면 front matters 에 입력한 identifier 에 맞춰 폴더들을 생성하고 폴더에 게시글이 없는 폴더의 경우 _index.md 파일도 생성해 주어야 한다.\n그래서 이 부분은 front matters 를 파싱해 자동으로 경로를 생성하고 _index.md 파일을 생성하도록 설정했다.\n# 프로젝트 폴더가 있으면 content 폴더 + 부모폴더에 저장 if(is_project_path): path = path + \u0026#39;/content/posts\u0026#39; posts_path = path # _index.md 생성용도 for category in categories: path = path + \u0026#39;/\u0026#39; + category path = path + \u0026#39;/\u0026#39; + name try: shutil.copytree(temp_path, path) except: copy_tree(temp_path, path) # 부모폴더에 _index.md 만들기 if(is_project_path): for category in categories: posts_path = posts_path + \u0026#39;/\u0026#39; + category index1 = posts_path + \u0026#34;/index.md\u0026#34; index2 = posts_path + \u0026#34;/_index.md\u0026#34; if not os.path.isfile(index1) and not os.path.isfile(index2): md = open(posts_path + \u0026#39;/_index.md\u0026#39;, \u0026#39;wt\u0026#39;, encoding=\u0026#39;UTF8\u0026#39;) md.write(get_index_md(category)) md.close() 그 밖에 해결 못한 것들 인용문 안에 줄바꿈이 있을 경우 인용문이 풀리는 현상, 인용문 안의 인용문, 북마크 기능, 인라인 리스트 등 노션 페이지를 마크다운으로 변경하면 훼손되는 폼이 꽤 많다는걸 작업하는 도중에 깨달았다. (사전 조사 부족) 뒤늦게 html 파일로 내보내기를 해서 작업을 했다면 퀄리티가 낫지 않았을까 하는 생각이 들었다. 역시 마크다운은 간결한 맛이 최고라는 자기위안으로 더이상의 삽질은 하지 않기로 다짐했다.\n결과물 앞서 말한 내용을 매번 하기 귀찮기 때문에 변환 툴을 만들었다. 다듬어야할 부분이 많겠지만 일단 내가 사용하는 범위에서는 잘 작동한다.\n링크 : https://github.com/taedi90/notion2toha\n","date":"September 13, 2021","hero":"/images/hero/blog.png","permalink":"https://log.taedi.net/notion-to-hugo-toha/","summary":"노션은 기본적으로 작성한 글을 마크다운으로 내보낼 수 있는 기능이 있어 hugo 포스팅을 하는데 탁월할 것이라 생각했다.\n하지만 노션의 내보내기 기능은 어딘가 아쉬운 부분이 있어 이것을 조금 손봐줄 필요가 있었다.\n추가 작업 H 태그 노션은 h1 ~ h3 태그만 지원하며 h4~h6 태그는 없다. 그런데 h1 태그는 포스트에 여러개 존재하면 SEO 점수에 좋지 않은 영향을 미치기 떄문에 hugo 포스팅을 염두에 둔다면 h2 와 h3 태그만 사용해야하는 문제가 발생한다.\n그대로 사용하기엔 기존의 글을 그대로 옮기기 위해 추가적인 작업이 필요한 문제와(h1 태그 안쓴 글이 없었다.","tags":["blog","github pages","hugo"],"title":"Github 블로그 설정 3. Notion 페이지 변환"},{"categories":null,"contents":"서론 어느정도 설정을 마쳤다면 마지막은 세팅한 블로그를 Github Pages 에 올리는 일만 남았다. Hugo는 자동빌드가 되지않아 push 만 하면 페이지가 업데이트되는 jekyll과는 조금 다르다고 한다.\n그래서 전체 프로젝트 파일과 빌드 된 파일을 각각 저장할 공간이 필요한데 리포지토리를 각각 분리하여 구분하는 방식과 한개 리포지토리에 브랜치를 나누어 관리하는 방식이 있었다. 두가지 방법 모두 시도해보았는데 개인적으로 리포지토리가 많으면 관리가 어렵다고 느껴 한개 리포지토리를 활용한 방법을 택했다.\n진행순서 1. 리포지토리 생성 \u0026lsquo;자신의 아이디.github.io\u0026rsquo; 라는 이름의 리포지토리를 생성한다.\n2. source 브랜치 생성 브랜치 이름은 상관없겠지만 참고한 사이트를 따라 source라는 이름으로 브랜치를 생성하여 주었다.\n# create the source branch $ git checkout -b source # push the source branch into Github $ git push origin source 3. Github 설정 settings \u0026gt; branches \u0026gt; default branch 를 \u0026lsquo;source\u0026rsquo; 브랜치로 설정\nsettings \u0026gt; pages \u0026gt; source 를 \u0026lsquo;main\u0026rsquo; 브랜치로 설정\nsettings \u0026gt; actions \u0026gt; actions permissions \u0026gt; allow all actions\n(선택사항) 2차 도메인 설정\n4. 프로젝트 폴더내 .github/workflow/deploy-site.yaml 파일 생성 name: Deploy to Github Pages on: push: branches: - source  # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: main # if your main branch is `master` use that here. publish_dir: ./public 만약 2차 도메인을 사용한다면 아래 코드를 사용\nname: Deploy to Github Pages on: push: branches: - source  # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: CNAME copy run: cp CNAME ./public - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: main # if your main branch is `master` use that here. publish_dir: ./public 5. 배포 이제 source 브랜치에서 푸시하면 자동으로 배포된다.\n기타. 오류 해결 (삽질기) 푸시 이후 설정한 action이 제대로 실행되지 않는 문제 빌드에서 오류가 난다\u0026hellip;\n구글링 중에 찾은 내용으로 정확히 이해는 못했지만 서브모듈을 다시 인덱싱 해주라는 내용인듯\n하지만 오류가 멈추질 않는다..\ndeploy-site.yaml 에서 if: github.ref == \u0026lsquo;refs/heads/main\u0026rsquo; 를 지워본다. (위의 코드에서는 이미 지워져있음)\n해결!\ndeploy 시에 custom domain 이 초기화 되어버리는 현상 custiom domain 을 다시 설정한 뒤 main 리포지토리에 생성 된 CNAME 파일을 받아 프로젝트 루트 디렉토리에 복사, 그리고 아래 코드를 deploy-site.yaml 에 추가\n- name: CNAME copy run: cp CNAME ./public 해결!\n참고  https://toha-guides.netlify.app/posts/getting-started/github-pages/ https://gohugo.io/hosting-and-deployment/hosting-on-github/  ","date":"September 13, 2021","hero":"/images/hero/blog.png","permalink":"https://log.taedi.net/hugo-upload/","summary":"서론 어느정도 설정을 마쳤다면 마지막은 세팅한 블로그를 Github Pages 에 올리는 일만 남았다. Hugo는 자동빌드가 되지않아 push 만 하면 페이지가 업데이트되는 jekyll과는 조금 다르다고 한다.\n그래서 전체 프로젝트 파일과 빌드 된 파일을 각각 저장할 공간이 필요한데 리포지토리를 각각 분리하여 구분하는 방식과 한개 리포지토리에 브랜치를 나누어 관리하는 방식이 있었다. 두가지 방법 모두 시도해보았는데 개인적으로 리포지토리가 많으면 관리가 어렵다고 느껴 한개 리포지토리를 활용한 방법을 택했다.\n진행순서 1. 리포지토리 생성 \u0026lsquo;자신의 아이디.github.io\u0026rsquo; 라는 이름의 리포지토리를 생성한다.","tags":["blog","github pages","hugo"],"title":"Github 블로그 설정 4. 대망의 업로드"},{"categories":null,"contents":"외부 톰캣에 프로젝트를 배포하기 위해서는 war 파일을 직접 업로드 하여야하는데, 이걸 IDE에서 run 할때 바로 처리하는 방법을 알아보았다. (이해가 부족하여 문장이 뒤죽박죽..)\n작업 환경  시놀로지 Docker - tomcat-8.5.69버전 IDE - eGov3.10  시놀로지 세팅  ssh 와 vi를 다루는 데 능숙하지 않기 때문에 시놀로지 gui 환경에서 작업을 처리할 방법을 구상해 보았다.\n볼륨 마운트  작업 편의성을 위하여 외부 폴더들에 conf 와 webapps 경로를 마운트 해주었다. \u0026lsquo;컨테이너 선택 \u0026gt; 편집 \u0026gt; 볼륨\u0026rsquo; 으로 이동하여 아래와 같이 폴더를 마운트 하였다. (폴더 경로는 임의로 변경해도 무방하다.)  여기서 conf 폴더는 tomcat 관련 설정파일들이 있는 것으로 보이고, webapps는 배포할 프로젝트들을 업로드할 공간이다.\n마운트한 폴더에 데이터 붙여 넣기  \u0026lsquo;컨테이너 선택 \u0026gt; 설정 \u0026gt; 내보내기\u0026rsquo; 를 통해 docker에 설치 된 tomcat을 로컬 저장소에 백업 이후 압축을 해제하고 usr/local/tomcat/conf\nusr/local/tomcat/webapps.dist/manager 경로의 내용을 마운트한 폴더에 복사  webapps 폴더에 마운트되는 경로에 manager 폴더 복사 conf 폴더에 마운트되는 경로에 기존 conf 하위 파일들 복사 시놀로지에서 세팅은 여기까지며, 이후 웹 어플리케이션을 사용하는 방식과 ftp를 활용하는 방식 중에 선택하여 설정이 가능하다.(ssh 방식 등 알아보지 않은 다른 방법들이 있음)\n첫번째 방법. Tomcat 웹 어플리케이션 활용  conf \u0026gt; tomcat-users.xml 파일 내용 추가  아이디, 패스워드는 manager 페이지 접속에 사용  \u0026lt;role rolename=\u0026#34;manager-gui\u0026#34; /\u0026gt; \u0026lt;role rolename=\u0026#34;manager-script\u0026#34; /\u0026gt; \u0026lt;role rolename=\u0026#34;manager-jmx\u0026#34; /\u0026gt; \u0026lt;role rolename=\u0026#34;manager-status\u0026#34; /\u0026gt; \u0026lt;user username=\u0026#34;아이디\u0026#34; password=\u0026#34;패스워드\u0026#34; roles=\u0026#34;manager-gui,manager-script,manager-jmx,manager-status\u0026#34; /\u0026gt; manager \u0026gt; META-INF \u0026gt; context.xml 파일 수정  valve ~ 부분 주석처리  \u0026lt;Context antiResourceLocking=\u0026#34;false\u0026#34; privileged=\u0026#34;true\u0026#34; \u0026gt; \u0026lt;CookieProcessor className=\u0026#34;org.apache.tomcat.util.http.Rfc6265CookieProcessor\u0026#34; sameSiteCookies=\u0026#34;strict\u0026#34; /\u0026gt; \u0026lt;!--\u0026lt;Valve className=\u0026#34;org.apache.catalina.valves.RemoteAddrValve\u0026#34; allow=\u0026#34;127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\u0026#34; /\u0026gt;--\u0026gt; \u0026lt;Manager sessionAttributeValueClassNameFilter=\u0026#34;java\\.lang\\.(?:Boolean|Integer|Long|Number|String)|org\\.apache\\.catalina\\.filters\\.CsrfPreventionFilter\\$LruCache(?:\\$1)?|java\\.util\\.(?:Linked)?HashMap\u0026#34;/\u0026gt; \u0026lt;/Context\u0026gt; 서버주소/manager/html 접속 확인  로그인 이후 아래와 같은 페이지가 정상적으로 표시되는지 확인  pom.xml 내용 추가  tomcat8-maven-plugin 은 없으며 7버전으로 정상적으로 동작함 url과 로그인 정보는 보안을 위해 settings.xml에 별도 설정  \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat.maven\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tomcat7-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;url\u0026gt;${tomcat-server-url}\u0026lt;/url\u0026gt; \u0026lt;server\u0026gt;tomcat-server\u0026lt;/server\u0026gt; \u0026lt;path\u0026gt;/${name}\u0026lt;/path\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; settings.xml 내용 추가  기본적으로 C:\\Users\\사용자.m2 경로에 있음 window \u0026gt; preferences \u0026gt; maven \u0026gt; user settings 에서 위치 변경가능  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\u0026#34;\u0026gt; \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;tomcat-server\u0026lt;/id\u0026gt; \u0026lt;!-- 아이디 --\u0026gt; \u0026lt;username\u0026gt;아이디\u0026lt;/username\u0026gt; \u0026lt;!-- 비밀번호 --\u0026gt; \u0026lt;password\u0026gt;비밀번호\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;inject-tomcat-server-url\u0026lt;/id\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;!-- 서버 주소 --\u0026gt; \u0026lt;tomcat-server-url\u0026gt;http://사이트 주소:포트번호/manager/text\u0026lt;/tomcat-server-url\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; \u0026lt;activeProfiles\u0026gt; \u0026lt;activeProfile\u0026gt;inject-tomcat-server-url\u0026lt;/activeProfile\u0026gt; \u0026lt;/activeProfiles\u0026gt; \u0026lt;/settings\u0026gt; url까지 pom.xml에서 빼려다보니 settings.xml의 코드가 늘어났다.\nMaven build  프로젝트 우클릭 \u0026gt; Run As \u0026gt; Maven build   Goals에 tomcat7:deploy 입력 후 run!  두번째 방법. FTP 활용  ftp를 사용하려면 시놀로지 설정이 조금 더 필요하며 보안 부분에도 고려해야할 사항이 발생할 것으로 보인다. (그래서 사실 최초에 ftp를 이용해서 deploy 여부를 확인만 하고 첫번째 방식인 웹 어플리케이션 방식으로 변경하였다.)\n제어판 \u0026gt; 파일 서비스 \u0026gt; FTP \u0026gt; FTP 서비스 활성화  서비스 활성화 및 포트 설정 (사설 IP 외부 접속의 경우 포트 포워딩 필요)  제어판 \u0026gt; 파일 서비스 \u0026gt; FTP \u0026gt; 일반 \u0026gt; 고급설정 \u0026gt; 루트 디렉토리 변경  순수 tomcat 용도로만 ftp가 필요하기 때문에 루트 폴더를 webapps 에 마운트 될 디렉토리로 한정 해줌  pom.xml 수정 \u0026lt;!-- project 내부 --\u0026gt; \u0026lt;distributionManagement\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;repo\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;ftp://주소:포트번호/\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/distributionManagement\u0026gt; \u0026lt;!-- build 내부 --\u0026gt; \u0026lt;extensions\u0026gt; \u0026lt;extension\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.wagon\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;wagon-ftp\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.0\u0026lt;/version\u0026gt; \u0026lt;/extension\u0026gt; \u0026lt;/extensions\u0026gt; settings.xml 수정  기본적으로 C:\\Users\\사용자.m2 경로에 있음 window \u0026gt; preferences \u0026gt; maven \u0026gt; user settings 에서 위치 변경가능   id 태그 안의 값은 pom.xml의 내용과 동일해야함  \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;repo\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;계정\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;비밀번호\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; Maven build  프로젝트 우클릭 \u0026gt; Run As \u0026gt; Maven build   Goals에 deploy 입력 후 run!  References  http://maven.apache.org/wagon/wagon-providers/wagon-ftp/\nhttps://m.blog.naver.com/PostView.naver?isHttpsRedirect=true\u0026amp;blogId=javaking75\u0026amp;logNo=220947560568\nhttps://hongku.tistory.com/196\nhttps://www.baeldung.com/tomcat-deploy-war\nhttps://maven.apache.org/examples/injecting-properties-via-settings.html\n","date":"September 6, 2021","hero":"/images/hero/java.png","permalink":"https://log.taedi.net/tomcat-external-deploy-maven/","summary":"외부 톰캣에 프로젝트를 배포하기 위해서는 war 파일을 직접 업로드 하여야하는데, 이걸 IDE에서 run 할때 바로 처리하는 방법을 알아보았다. (이해가 부족하여 문장이 뒤죽박죽..)\n작업 환경  시놀로지 Docker - tomcat-8.5.69버전 IDE - eGov3.10  시놀로지 세팅  ssh 와 vi를 다루는 데 능숙하지 않기 때문에 시놀로지 gui 환경에서 작업을 처리할 방법을 구상해 보았다.\n볼륨 마운트  작업 편의성을 위하여 외부 폴더들에 conf 와 webapps 경로를 마운트 해주었다. \u0026lsquo;컨테이너 선택 \u0026gt; 편집 \u0026gt; 볼륨\u0026rsquo; 으로 이동하여 아래와 같이 폴더를 마운트 하였다.","tags":["deploy","java","maven","tomcat"],"title":"[Maven] 외부 톰캣에 deploy 설정하기"},{"categories":null,"contents":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n티스토리 개인 도메인 추가 후 티스토리 기존 주소로 유입되는 방문객을 개인 도메인 주소로 이동하는 스크립트를 추가하여 보았습니다. 필수적인 사항은 아니지만 저의 경우 루트 도메인 taedi.net 을 블로그에 연결했기 때문에 www.taedi.net 과 tae-di.tistory.com 총 세개의 도메인을 통해 블로그에 접속할 수 있었고, 깔끔한 교통정리를 위해 redirect를 활용하여 taedi.net 으로 단일화 시켰습니다.\n도메인을 통일해줘야 하는 몇가지 이유  방문통계에서 게시글이 주소에 따라 다르게 집계되는 문제 애드센스를 활용할 경우, 접속 도메인에 따라 광고가 나오지 않을 수 있는 문제점 주소를 하나로 통일해야 할 것 같은 강박  도메인이 여러개 존재하여 발생할 수 있는 불편함은 다음과 같습니다. 저에게는 3번 마음의 문제가 가장 컸고 블로그를 방문해주는 모든 분들에게 제가 구매한 도메인을 알리고? 싶었습니다.\n문제점 1 - SEO 저평가 가능성 존재 자바스크립트를 활용한 redirect은 SEO에 좋지 않은 평가를 받을 수 있다고 합니다. 네이버 웹마스터 가이드에서는 자바스크립트를 활용한 redirect는 검색로봇이 이해하기 어려운 형식으로 사이트 저평가의 원인이 될 수 있음을 미리 경고하고 있습니다.\n네이버 웹마스터 가이드를 확인해보면 자바스크립트를 이용한 redirect를 지양할 것을 권하고 있다.\n사이트 저평가를 피하기 위해서는 자바스크립트 방식이 아닌 HTTP redirect 를 활용할 것을 설명하고 있는데 이 부분은 서버단위의 설정을 해줘야하지만 티스토리에서는 불가능한 부분입니다. 그렇기때문에 SEO 평가를 위하여 리다이렉트를 포기할 것인지, 혼란을 방지하고 깔끔함을 추구하기 위하여 SEO를 일부 포기할 것인지 양자택일이 필요합니다. 개인적인 판단으로는 리다이렉트를 활용하면서도 검색노출에 상위권을 유지하는 블로그도 존재하기 때문에 절대적인 요인은 아닐 수 있다고 생각하여 후자를 택하였습니다.\n문제점 2 - 블로그관리 페이지, 댓글기능 문제(해결 가능) 2차 도메인으로 리다이렉트를 설정하면 관리자 페이지 접속이 원활하지 않거나 스킨편집 페이지에서 미리보기가 올바르게 나오지 않는 상황이 발생할 수 있습니다. 하지만 이 문제에 대한 해결책을 아래에 다루고 있으니 걱정하시지 않으셔도 됩니다.\n또한, 2차 도메인에서 티스토리 로그인이 풀리기 때문에 댓글 작성을 위하여 1차 도메인으로 리다이렉트 기능을 삽입한 경우 스크립트가 서로 꼬여 제대로 작동하지 않는 경우가 있는데 이 부분도 스크립트를 수정하여 해결이 가능하니 아래를 참고해주시기 바랍니다.\n리다이렉트 설정하기 본격적인 설정에 앞서 대표 주소를 www.taedi.net 로 설정할지 taedi.net 로 설정할지 결정해야 합니다. 이미 도메인을 티스토리에 등록하셨다면 고민하실 필요없습니다. 처음 설정한 도메인을 그대로 따라가야 하거든요.\n블로그 설정  개인 도메인 설정 확인\"\n블로그 관리 \u0026gt; 블로그 설정 \u0026gt; 개인 도메인 설정 확인\n사이트를 개발자 도구로 살펴보면 블로그 관리에 등록한 주소가 link rel=\u0026ldquo;canonical\u0026rdquo; 로 표준 페이지지정되어 있기 때문인데, 이 부분은 크롤러가 확인하는 부분이라 해당 주소를 따라서 리다이렉트를 설정하는 것이 좋습니다.\n설정한 주소가 자동으로 표준 페이지로 표시되는 모습\n아직 도메인을 등록하시기 전이라면 이 부분을 고려하여 등록하시면 될 것 같습니다. 그리고 서브 도메인으로의 유입을 메인 도메인으로 이동하기 위한 기본 스크립트는 아래를 참고하시면 됩니다. 본인의 사이트에 맞게 수정하여  와  사이에 입력하시면 됩니다.\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var mainDomain = \u0026#39;taedi.net\u0026#39;; \u0026lt;!-- 메인 도메인 --\u0026gt; var subDomain = \u0026#39;www.taedi.net\u0026#39;; \u0026lt;!-- 서브 도메인 --\u0026gt; var tistoryDomain = \u0026#39;tae-di.tistory.com\u0026#39;; \u0026lt;!-- 티스토리 기본 도메인 --\u0026gt; var online = document.URL; \u0026lt;!-- 접근 URL --\u0026gt; if(online.match(subDomain)) { \u0026lt;!-- 서브 도메인 접속 시 메인 도메인으로 리다이렉트 --\u0026gt; document.location.href = online.replace(subDomain, mainDomain); } else if(online.match(tistoryDomain)) { \u0026lt;!-- 티스토리 도메인 접속 시 메인 도메인으로 리다이렉트 --\u0026gt; document.location.href = online.replace(tistoryDomain, mainDomain);\t}\t\u0026lt;/script\u0026gt; 여기까지가 온라인에 널리 알려진 자바스크립트 리다이렉트 방법입니다. 하지만 여전히 스킨변경 페이지에서 미리보기가 되지 않는 문제와 댓글작성 시도 불가 등의 문제가 남았습니다.\n스킨 편집 미리보기 오류, 댓글 작성 리다이렉트 불가 문제 해결 위의 설정으로 스킨 편집 페이지를 접속하면 아래와 같이 미리보기가 원활하지 않은 것을 확인하실 수 있습니다. 리다이렉트가 미리보기 내에서도 동작하기 때문에 발생하는 현상입니다.\n스킨 편집의 미리보기 화면에서도 리다이렉트가 적용되어 발생하는 문제\n댓글 작성을 위해 저처럼 1차 도메인으로 이동할 수 있는 스크립트를 추가하신 경우에도 동일한 이유로 스크립트가 제대로 동작하지 않는 문제가 발생할 수 있습니다. 2차 도메인 → 1차 도메인 → 2차 도메인으로 리다이렉트를 반복하는 상황이 연출되는 문제입니다.\n티스토리 아이디로 댓글을 작성하기 위한 스크립트와 충돌 발생\n이를 해결하기 위해 특정 이벤트에서는 리다이렉트를 하지 않도록 예외설정을 해보았습니다. 먼저 블로그 관리 페이지는 ~tistory.com/manage 주소가 공통적으로 포함되어 있고, 댓글 기능에는 1차 도메인 이동 후 댓글란까지 스크롤 하기위해 #login-guide 라는 해시를 사용하고 있기 때문에 두 텍스트가 포함되는 주소를 감지하여 리다이렉트에서 제외하면 됩니다. 내용이 길어지고 있어 위의 스크립트에서 수정/추가되는 부분만 작성하였고 최종코드는 하단에 남겨두었습니다.\nvar re = /tistory\\.com\\/manage/ig; \u0026lt;!-- 관리자 페이지 예외 정규표현식 --\u0026gt; var re2 = /#login-guide/g; \u0026lt;!-- 댓글 작성 예외 정규표현식 --\u0026gt; else if(online.match(tistoryDomain)) { \u0026lt;!-- 티스토리 도메인 접속 시 메인 도메인으로 리다이렉트 --\u0026gt; if(online.match(re)){} else if(online.match(re2)){} else { document.location.href = online.replace(tistoryDomain, mainDomain);\t}\t}\t이 부분을 적절히 활용하시면 리다이렉트 하지않을 페이지나 동작을 지정하실 수 있습니다.\n블로그관리 페이지 쉽게 접속하기 2차 도메인을 설정하고 이해되지 않는 부분은 블로그관리 페이지를 여전히 1차 도메인 주소로 접속해야 하는 부분이었습니다. 물론 자주 사용하는 컴퓨터에서는 즐겨찾기를 설정해두었지만 다른 브라우저를 사용하거나 즐겨찾기를 누르기 귀찮은 상황이 분명 발생할 것입니다. 가끔 1차 도메인을 직접 타이핑 치다가 주소가 기억나지 않을 때도 있었습니다.\n2차 도메인을 설정해도 manage 페이지는 접속이 불가능하다.\n역시 귀찮은 것은 참을 수 없습니다.\n여기에 한가지 꾀를 내보았는데 url에 사용하는 해시(#, hash sign) 을 엉뚱하게 사용하여 블로그 관리 페이지로 이동하는 지름길을 한번 만들어 보았습니다. 해시는 페이지 내에서 지정된 네임 태그로 이동시켜주는 anchor 인데, 다른 페이지로 이동시키는 것이 아니라 페이지 내에서 동작한다는 점을 이용했습니다. 간단히 설명하자면 taedi.net/manage 는 페이지를 찾을 수 없다는 내용의 오류페이지로 이동되어 스킨편집에서 설정한 자바스크립트가 동작하지 않지만, taedi.net/#manage 는 그냥 제 블로그의 메인페이지로 이동하기 때문에 자바스크립트 특정 명령을 수행할 수 있게 되는 것입니다.\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var online = document.URL; \u0026lt;!-- 방문한 URL --\u0026gt; var re = /taedi\\.net\\/##/ig; \u0026lt;!-- taedi.net/## 에 해당하는 정규표현식 --\u0026gt; if(online.match(re)){ document.location.href = \u0026#39;https://tae-di.tistory.com/manage\u0026#39;;\t} \u0026lt;/script\u0026gt; 위 스크립트는 주소에 taedi.net/## 가 포함되어있으면 블로그관리 페이지로 https://tae-di.tistory.com/manage 바로 연결 시키는 스크립트입니다. 혹시나 taedi.net/## 가 포함 된 페이지가 있다면 정상적으로 표시되지 않을 우려가 있으니 ## 부분을 #manage, #m 등 해시나 페이지 주소로 활용하고 있지 않는 것으로 수정하여 활용하시면 될 것 같습니다.\nurl에서 # 문자가 해시 용도로만 사용되는 것으로 알고있어 위 방법이 크게 문제가 되지 않을 것 같은데 혹시나 잘못 된 방법이라면 저에게도 알려주시면 감사하겠습니다. 결과적으로 블로그 관리 페이지를 접속하기 편해져 너무 만족스럽습니다.\n추가 제가 최초로 고안해낸 방법일까 잠시 설레발을 쳤었으나, 검색해보니 이미 \u0026lsquo;해시뱅(#!)\u0026lsquo;이라는 용어로 사이트 주소에 \u0026lsquo;#!/manage\u0026rsquo; 처럼 해시뱅 뒤에 실제 페이지 주소와 같은 형식으로 꾸며 단일 페이지 웹 어플리케이션을 구현하는 데에 사용했던 방식과 유사한 발상을 했던 것 같습니다. 그리고 이 방식은 여러 사이트에서 사용되었지만 크롤링 상의 문제나 자바스크립트 미지원 브라우저에서 정상적으로 표시되지 않는 점 때문에 점차 사용하고 있지 않다고 합니다. 하지만 블로그관리 페이지는 개인적으로 사용 될 페이지이기 때문에 오히려 안심하고 사용할 수 있을 것 같습니다.\n해시뱅에 대한 자세한 내용을 원하시면 내용을 잘 정리해주신 다른 블로거 분의 글을 참고해보실 것을 추천드립니다.\n https://blog.outsider.ne.kr/698 https://redscreen.tistory.com/128  최종 코드 최종적으로 제가 사용하는 코드입니다. 이해를 위해 주석을 남용하였으니 주소에 맞게 수정하시어 사용하시기 바랍니다. 감사합니다 :)\n\u0026lt;!-- Domain Redirect --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var mainDomain = \u0026#39;taedi.net\u0026#39;; \u0026lt;!-- 메인 도메인 --\u0026gt; var subDomain = \u0026#39;www.taedi.net\u0026#39;; \u0026lt;!-- 서브 도메인 --\u0026gt; var tistoryDomain = \u0026#39;tae-di.tistory.com\u0026#39;; \u0026lt;!-- 티스토리 기본 도메인 --\u0026gt; var online = document.URL; \u0026lt;!-- 접근 URL --\u0026gt; var re = /tistory\\.com\\/manage/ig; \u0026lt;!-- 관리자 페이지 예외 정규표현식 --\u0026gt; var re2 = /#login-guide/g; \u0026lt;!-- 댓글 작성 예외 정규표현식 --\u0026gt; var re3 = /taedi\\.net\\/##/ig; \u0026lt;!-- taedi.net/## 에 해당하는 정규표현식 --\u0026gt; if(online.match(subDomain)) { \u0026lt;!-- 서브 도메인 접속 시 메인 도메인으로 리다이렉트 --\u0026gt; document.location.href = online.replace(subDomain, mainDomain); } else if(online.match(tistoryDomain)) { \u0026lt;!-- 티스토리 도메인 접속 시 메인 도메인으로 리다이렉트 --\u0026gt; if(online.match(re)){} else if(online.match(re2)){} else { document.location.href = online.replace(tistoryDomain, mainDomain);\t}\t}\telse if(online.match(re3)){ \u0026lt;!-- taedi.net/## 접속 시 tae-di.tistory.com/manage로 이동 --\u0026gt; document.location.href = \u0026#39;https://tae-di.tistory.com/manage\u0026#39;;\t} \u0026lt;/script\u0026gt; ","date":"March 10, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/tistory-blog-setting-4/","summary":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n티스토리 개인 도메인 추가 후 티스토리 기존 주소로 유입되는 방문객을 개인 도메인 주소로 이동하는 스크립트를 추가하여 보았습니다. 필수적인 사항은 아니지만 저의 경우 루트 도메인 taedi.net 을 블로그에 연결했기 때문에 www.taedi.net 과 tae-di.tistory.com 총 세개의 도메인을 통해 블로그에 접속할 수 있었고, 깔끔한 교통정리를 위해 redirect를 활용하여 taedi.net 으로 단일화 시켰습니다.\n도메인을 통일해줘야 하는 몇가지 이유  방문통계에서 게시글이 주소에 따라 다르게 집계되는 문제 애드센스를 활용할 경우, 접속 도메인에 따라 광고가 나오지 않을 수 있는 문제점 주소를 하나로 통일해야 할 것 같은 강박  도메인이 여러개 존재하여 발생할 수 있는 불편함은 다음과 같습니다.","tags":["blog","dns","tistory"],"title":"기존 주소 방문 시 리다이렉트 하기 - 티스토리 2차 도메인 설정 #3"},{"categories":null,"contents":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n개인 도메인으로 블로그 게시물에 접근하면 티스토리 로그인이 되어있지 않은 상태가 됩니다. 때문에 게시물 수정이나 블로그 관리 페이지 진입 등이 되지 않는 불편함이 있는데 이것은 블로그 주인만 느끼면 되는 문제라 크게 문제가 되지 않습니다. 하지만 방문객이 겪는 불편함이 존재하는데 바로 티스토리 로그인이 연동되지 않아 비회원으로 댓글을 남겨야 하는 문제입니다. 댓글기능이 원활하지 않는다는 것은 블로그의 순기능 중 소통의 영역에서 마이너스 요소가 아닐 수 없습니다.\n개인 도메인에서는 티스토리 아이디로 댓글 작성이 불가능하다.\n그렇기때문에 이 문제를 완화할 수 있는 방법들을 몇가지 알아보았습니다.\nDisqus 이용하기 Disqus 는 트위터, 페이스북, 구글 아이디를 사용해 댓글을 남길 수 있는 서비스 입니다. 사이트에 간단하게 코드만 삽입하는 방식으로 티스토리 아이디가 없는 분들도 본인의 SNS 아이디로 댓글을 남길 수 있는 플러그인을 장착할 수 있습니다. 하지만, 무료 사용의 경우 광고가 부착되며 개인이 사용하기에는 유료 요금제가 다소 부담스러운 느낌이 있어 선택을 포기하게 되었습니다.\n광고를 제거하기 위해서는 한달에 커피 두잔 값을 지불해야한다.\n\nFacebook Comment Plugin 이용하기 페이스북에도 Disqus 와 비슷한 플러그인이 존재하며 제공받은 코드를 입력하는 것으로 간단하게 블로그에 댓글 플러그인을 설치할 수 있습니다. 하지만 개인적인 생각으로 주변에 페이스북을 사용하는 지인이 없어 오히려 이 방식이 독이 되지는 않을까 하는 생각이 들었습니다. 다만, 특별히 페이스북을 자주 활용하는 그룹이나 컨텐츠를 다루신다면 사용을 고려해봐도 좋을 것 같습니다.\nhttps://developers.facebook.com/docs/plugins/comments\n1차 도메인으로 이동하는 링크 만들기 네 사실 제 블로그의 경우 댓글을 남겨주시는 분이 거의 없습니다. 이거나 저거나 비슷하다는 말이죠. 그렇기 때문에 위의 플러그인을 설치하여 사이트 반응속도를 늦추면서까지 해결책을 찾을 필요는 없다고 생각했고, 티스토리 아이디로 댓글을 작성하길 희망하시는 하시는 분들에게만 방법을 제시하여 드리는 것으로 충분하다 판단했습니다. 이에 대한 방법으로 몇몇분들이 블로그 하단에 1차 도메인으로 이동하는 링크를 마련해 두신 것을 참고하였고 원조가 어느분인지 몰라 링크 대신 직접 코드를 작성해 보았습니다. 스킨 편집에서 적당한 위치를 골라 아래 코드를 추가하시면 됩니다.\n html  \u0026lt;!-- 블로그 주소는 변경해서 쓰세요 --\u0026gt; \u0026lt;div id=\u0026#34;login-guide\u0026#34; onclick=\u0026#34;javascript:location.href=\u0026#39;https://tae-di.tistory.com\u0026#39;+document.location.pathname+\u0026#39;#login-guide\u0026#39;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;티스토리 아이디로 코멘트를 남기려면\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;여기를 눌러주세요!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;  css  #login-guide { text-align: center; border: 2px solid #BDD7EE; background: #F8F9FA; padding: 6px 0; margin: 5px 0; color: #5D5D5D; } 스킨 편집에서 올바르게 입력을 하고 나면 아래와 같이 1차 도메인으로 이동할 수 있는 요소가 추가 된 것을 확인하실 수 있습니다.\n1차 도메인으로 이동하는 요소 추가\n개인 도메인을 설정하고 댓글로 고통받으시는 분에게 위의 방편들이 도움이 되기를 바랍니다.\n읽어주셔서 감사합니다. :)\n","date":"March 9, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/tistory-blog-setting-3/","summary":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n개인 도메인으로 블로그 게시물에 접근하면 티스토리 로그인이 되어있지 않은 상태가 됩니다. 때문에 게시물 수정이나 블로그 관리 페이지 진입 등이 되지 않는 불편함이 있는데 이것은 블로그 주인만 느끼면 되는 문제라 크게 문제가 되지 않습니다. 하지만 방문객이 겪는 불편함이 존재하는데 바로 티스토리 로그인이 연동되지 않아 비회원으로 댓글을 남겨야 하는 문제입니다. 댓글기능이 원활하지 않는다는 것은 블로그의 순기능 중 소통의 영역에서 마이너스 요소가 아닐 수 없습니다.\n개인 도메인에서는 티스토리 아이디로 댓글 작성이 불가능하다.","tags":["blog","dns","tistory"],"title":"댓글 작성하려는데 로그인이 안된다구? - 티스토리 2차 도메인 설정 #2"},{"categories":null,"contents":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n티스토리 블로그 주소 변경을 마친 후에 가장 먼저 사이트 검색노출을 재설정 해주었습니다. 기존에 사용하던 1차 도메인(티스토리 기본 제공 도메인)이 계속해서 검색엔진에 노출되고 있고 2차 도메인(개인 도메인)은 아직 알려져있지 않기 때문에 신속하게 변경하여야 유입 방문객 수 손실을 그나마 낮출 수 있을 것이라 판단했기 때문입니다.\n도메인 구매과정 및 티스토리 블로그 적용 방법에 대한 내용이 궁금하시다면 아래 링크를 참고하시기 바랍니다.\n티스토리 개인 도메인 구매 및 활용하기 - #1 구매동기, DNS설정, 오류해결\n1차 도메인 게시글 검색엔진 노출 제외 일단 기존 주소로 알려져 있는 검색 노출을 모두 제외 시켜야합니다. 색인 요청 처리까지 긴 시간이 걸린 결과물이지만.. 새로운 도메인의 게시글과 중복글으로 판단되어 사이트 평가가 낮아질 수 있다는 우려에 우선적으로 진행하였습니다.\n내 블로그 글 비공개로 전환 우선 블로그 관리 홈 \u0026gt; 글 관리 탭에서 포스팅한 모든 글을 비공개로 처리해줍니다.\n글 관리에서 작성했던 모든 글을 비공개 처리한다.\"\n블로그 관리 홈 \u0026gt; 글 관리에서 작성했던 모든 글을 비공개 처리한다.\n검색 등록기관에서 검색 제외 요청하기 네이버 서치어드바이저, 구글 서치콘솔, 빙 웹마스터 도구에서 현재 색인된 페이지들을 모두 검색 제외 요청합니다.\n네이버는 각각의 페이지를 모두 제외 요청 해야 함\n구글은 도메인만 입력하면 하위 페이지를 모두 처리할 수 있다.\n제출한 RSS 및 사이트맵 제거 등록했던 RSS 및 사이트맵도 제거하여 검색엔진이 새로 페이지들을 색인하는 것을 방지하여 줍니다.\n네이버 RSS 제출 페이지\n구글은 Sitemaps에서 RSS와 사이트맵을 제거\n로봇 차단 검색 로봇이 사이트에 접근할 수 없도록 메타태그나 Robots.txt를 수정하여 주어야 하는데, 저는 1차 도메인으로 접근하는 경우에 인덱싱이 불가하도록 스크립트를 스킨편집에서 추가하여 주었습니다.\n\u0026lt;!-- robot 접근 선택적 허용 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var currURL = location.hostname; if (currURL.match(\u0026#39;tae-di.tistory.com\u0026#39;)) { document.write(\u0026#39;\u0026lt;meta name=\u0026#34;NaverBot\u0026#34; content=\u0026#34;noindex, nofollow\u0026#34; /\u0026gt;\u0026#39;+ \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); document.write(\u0026#39;\u0026lt;meta name=\u0026#34;Yeti\u0026#34; content=\u0026#34;noindex, nofollow\u0026#34; /\u0026gt;\u0026#39;+ \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); } else { document.write(\u0026#39;\u0026lt;meta name=\u0026#34;NaverBot\u0026#34; content=\u0026#34;All\u0026#34; /\u0026gt;\u0026#39;+ \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); document.write(\u0026#39;\u0026lt;meta name=\u0026#34;NaverBot\u0026#34; content=\u0026#34;index,follow\u0026#34; /\u0026gt;\u0026#39;+ \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); document.write(\u0026#39;\u0026lt;meta name=\u0026#34;Yeti\u0026#34; content=\u0026#34;All\u0026#34; /\u0026gt;\u0026#39;+ \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); document.write(\u0026#39;\u0026lt;meta name=\u0026#34;Yeti\u0026#34; content=\u0026#34;index,follow\u0026#34; /\u0026gt;\u0026#39;+ \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); } \u0026lt;/script\u0026gt; tae-di.tistory.com으로 접근하는 요청에 대해서만 로봇 검색을 제외하는 메타태그를 페이지에 작성하라는 내용인데 이 부분은 제가 올바르게 했는지 의문이 드네요. 위의 코드를 추가하고 다음포털에서 1~2차 도메인 모두 검색 노출이 불가능했습니다. 고객센터에 문의 해보니 아래와 같은 답변을 얻었습니다.\n다음은 주석 처리 된 메타 태그도 로봇 크롤링에 반영한다?\n의문인 부분은 이후에 해당 스크립트를 주석처리해도 해결이 되지 않았다는 점인데.. 현재는 제거해버린 상태입니다. 향후에도 tae-di.tistory.com로 진입하는 크롤링을 모두 거절하고 싶은데 이 부분은 좀 더 학습을 해야 가능할 것 같습니다.\n1차 도메인 검색 제외를 위해서는 와  사이에 아래 태그를 넣어주고 처리 이후 삭제하여주는 방법이 가장 확실하고 간결합니다. 까먹지말고 꼭 지워야 2차 도메인에서의 크롤링이 가능합니다.\n\u0026lt;meta name=\u0026#34;robots\u0026#34; content=\u0026#34;noindex, nofollow\u0026#34; /\u0026gt; 검색 제외 확인 site:블로그주소를 각 검색엔진에 입력해 노출되는 페이지를 확인할 수 있습니다. 위의 과정들이 제대로 진행되었다면 수시간 내에 아래와 같이 1차 도메인으로 조회되는 글이 사라져 있을 것입니다.\n검색엔진에 더이상 노출되지 않는 1차 도메인\n블로그 글 공개 전환 및 로봇 차단 메타 태그 지우기 이제 블로그 글을 공개전환하고 로봇 차단을 위해 입력한 메타 태그 또한 지워주면 됩니다. 각 검색 엔진에 등록 된 사이트도 제거할까도 생각해봤지만 추후에 검색에 노출되거나 하는 상황에 대비해 일단은 남겨두는 편이 좋을 것 같습니다. 제 경우에는 네이버 검색에서 결과가 다시 노출되어 이후에 다시 사이트를 등록하여 주었습니다.\n되살아나는 네이버 검색결과..\n개인 도메인 검색엔진 등록하기 이후 새로운 도메인들을 각각의 검색엔진에 등록하여 주면 됩니다. 구글의 경우에는 주소 변경 기능도 있지만 제 경우에는 오류가 발생하여 그냥 신규 등록으로 진행하였습니다. 등록 방법에 대한 안내는 아래 링크를 참고하여 주시기 바랍니다.\n티스토리 블로그 네이버 검색 노출 방법 - NAVER Search Advisor\n티스토리 블로그 구글 검색 노출 방법 - Google Search Console\n네이버 원본 반영 요청하기 항상 마지막까지 애먹이는 것은 네이버 검색 노출인 것 같습니다. 구글과 빙, 다음에서는 개인 도메인으로 정상적으로 노출되기 시작했지만 네이버는 아직 반영이 되지 않고 있어 이번엔 원본 반영 요청을 해보았습니다. 아래 링크를 타고 가시면 고객센터 원본 반영 요청 페이지가 나오는데 여기에 포스팅 url을 입력하여 주고 신청하여주면 됩니다.\n네이버 고객센터\n네이버 원본 반영 요청, 제발 처리해주시길\u0026hellip;!\n블로그의 게시글 url을 한번에 가져오는 것은 아래 글의 내용을 참고하시면 좋을 것 같습니다.\n사이트맵에서 페이지 목록 파싱해보기\n저는 이렇게 사이트 검색노출 설정을 마쳤습니다. 물론 아직까지 네이버는 정상적으로 검색 노출이 되지 않는 상황이고 발견되지 않은 오류가 있을 수도 있으나 관련 된 내용은 경과에 따라 추가하도록 하겠습니다. 읽어주셔서 감사합니다\n","date":"March 7, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/tistory-blog-setting-2/","summary":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n티스토리 블로그 주소 변경을 마친 후에 가장 먼저 사이트 검색노출을 재설정 해주었습니다. 기존에 사용하던 1차 도메인(티스토리 기본 제공 도메인)이 계속해서 검색엔진에 노출되고 있고 2차 도메인(개인 도메인)은 아직 알려져있지 않기 때문에 신속하게 변경하여야 유입 방문객 수 손실을 그나마 낮출 수 있을 것이라 판단했기 때문입니다.\n도메인 구매과정 및 티스토리 블로그 적용 방법에 대한 내용이 궁금하시다면 아래 링크를 참고하시기 바랍니다.\n티스토리 개인 도메인 구매 및 활용하기 - #1 구매동기, DNS설정, 오류해결","tags":["blog","dns","tistory"],"title":"검색엔진 노출 재설정하기 - 티스토리 2차 도메인 설정 #1"},{"categories":null,"contents":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n얼마 전 블로그 주소를 tae-di.tistory.com 에서 taedi.net 으로 변경하였습니다. 도메인 변경을 진행하기 전 여러 후기에서 티스토리 블로그 2차 도메인 등록 시 발생하는 많은 문제점에 대한 부분을 확인 하였지만 이같은 결정을 하게 된 것은 그만큼의 메리트가 있었기 때문입니다. 티스토리 블로그 2차 도메인(개인 도메인)이 주는 기대효과와 이를 위해 감수해야하는 단점, 그리고 도메인 등록방법과 문제점들을 어느 정도 해소하기 위한 설정 방법들을 공유하고자 글을 남기게 되었습니다.\n장점 - 개인 도메인을 구매한 동기 물론 가장 큰 목적은 \u0026lsquo;갖고싶어서\u0026rsquo; 였습니다. 예전부터 나만의 고유한 도메인을 가지고 싶다는 생각이 있었는데 생각보다 저렴한 가격에 도메인을 구할 수 있다는 것을 최근에 알게되었고 (0.5~1만원선) 언젠가 정말로 필요할 때 누군가 내가 원하는 도메인을 미리 선점하고 있어 기회를 놓치지는 않을까 하는 마음에 충동적으로 구매한 부분도 있습니다. 그리고 이성을 찾은 후 정리한 개인 도메인의 다른 장점들은 다음과 같습니다.\n 나만의 주소 개인 브랜딩 효과 전문성 및 마케팅 요소 간결한 주소를 통한 편의성 증대 애드센스 심사 고평가 및 추후 하위 도메인에도 활용 가능  자신의 이름이나 닉네임 등을 도메인에 활용하여 블로그나 웹페이지를 자신의 명함이나 포트폴리오로 활용할 수 있습니다. 이경우 블로그 서비스에서 기본적으로 제공하는 하위 도메인을 그대로 사용하는 것에 비해 특별하거나 준비된 느낌을 심어줄 수 있다고 생각했습니다.\n블로그를 통해 전문적인 포스팅을 하시는 분들에게는 주로 다루는 내용과 관계가 있는 키워드를 도메인에 포함하여 검색 노출에서 우위를 점하거나 방문객에게 전문성을 느끼게 할 수 있는 무기가 될 수 있습니다. 그리고 상대적으로 간결한 도메인으로 쉽게 기억되어 이전에 방문했던 방문객이 추후 검색을 통한 재방문을 높이는 효과도 기대해볼 수 있습니다. 물론 양질의 컨텐츠가 기본적으로 갖추어져 있다는 가정하에서 기대해볼 수 있는 내용입니다.\n도메인을 가지게 되면 하위 도메인들을 만들어내거나 메일주소를 만드는 것도 가능한데 이것을 \u0026lsquo;mail@내주소.tld\u0026rsquo;, \u0026lsquo;git.내주소.tld\u0026rsquo;, \u0026lsquo;nas.내주소.tld\u0026rsquo;, \u0026lsquo;blog.내주소.tld\u0026rsquo; 와 같이 자주 사용하는 서비스나 블로그 외의 여러 페이지들을 간결하고 연관성있게 묶을 수도 있습니다. 마치 bit.ly의 서비스처럼 긴 주소를 간결하게 활용할 수 있는 이점이 생기는 것입니다.\n그 외에도 개인 도메인을 활용하면 티스토리에서 기본으로 제공하는 도메인에 비해 애드센스 심사에 좋은 평가를 받는다는 후기들도 많아 애드고시에 지속적으로 낙방하는 경우에도 구매를 고려해볼만 하고 이 도메인으로 애드센스 심사를 마치면 이후 \u0026lsquo;blog.내주소.tld\u0026rsquo;, \u0026lsquo;mysite.내주소.tld\u0026rsquo; 등과 같이 하위 도메인에도 별도 심사 없이 애드센스 광고 게재가 가능하다는 후기도 확인할 수 있었습니다.\n이런 장점들을 활용하는 데에 1년에 커피 두잔 정도의 금액만 지불하면 된다고하면 상당히 합리적이지 않을 수 없습니다.\n단점 - 개인 도메인을 쓸 때 문제점 하지만 단순히 티스토리 블로그 운영 측면만 고려하신다면 장점보다 단점이 많을 수 있습니다.\n 검색엔진이 1, 2차 도메인을 별개로 판단해 중복글로 오인 및 저품질 처리 가능성 사이트 유입경로 다양화에 따른 방문 현황 집계 혼란, 애드센스 오작동 우려 도메인 변경에 따른 일시적/지속적 조회수 감소 댓글 작성시 기존 티스토리 로그인이 풀리는 문제 로그인, 구독 버튼 먹통 (새로고침만 되는 현상) 관리페이지는 1차 도메인을 사용해야 하는 문제 (XXXX.tistory.com/manage) 리다이렉트(티스토리 기본도메인 접속 시 개인 도메인으로 전환 설정) 세팅 시 블로그 관리 \u0026gt; 스킨변경 페이지에서 미리보기가 원활하게 되지 않는 문제 매년 도메인 유지 비용 발생  이정도가 직접 경험하거나 다른 블로거 분들의 후기들 중 공통적인 부분들을 일부 짚은 사항이며, 이밖에 추가적인 문제가 있을 수도 있습니다. 그리고 상당부분이 근원적인 해결보다는 임시방편 수준의 해결만 가능하다던지 리스크를 감수해야하는 부분이 있습니다. 임시방편에 대해서는 뒷내용에 다루도록 하겠습니다.\n도메인 하나 바꿨을 뿐인데 방문객 수가 일시적 혹은 지속적으로 감소한채 유지되는 현상이 발생할 수 있습니다. 블로그 운영에서 방문객 수 만큼 중요한 부분도 없는데 그야말로 혼돈 그자체인 셈입니다. 이를 어느정도 해소하기 위해서는 1차 도메인(티스토리 기본 제공 주소)으로 검색엔진에 노출 된 내용을 모두 제외 요청하고 개인 도메인을 새로 등록해주는 과정이 필요하며, 웹에 노출된 1차 도메인의 잔여물들을 최대한 회수하는 과정이 필요합니다. 그리고 새로운 도메인이 잘 노출될 수 있도록 홍보 또한 해준다면 좋을 것입니다.\n방문객들이 댓글을 남기는 과정이 번거로워지거나 관리자가 블로그 설정변경이나 글 등록을 하기가 불편해지는 점은 여전히 문제로 남습니다. 하지만 이 부분도 일정 부분은 완화시킬 수 있어 간결한 주소창을 위해 불편을 감수하기로 했습니다.\n저 같은 경우에는 블로그를 본격적으로 시작한지 약 1달 정도라 게시글이나 방문객이 많지는 않았고 1차 도메인 자체도 네이버에서 검색노출이 제대로 되지 않고 있는 상황이라 크게 아쉬운점이 없어 도메인 변경을 진행했으나 현재까지도 약간의 타격이 있는 상황입니다. 게시글이 많고 방문객 수가 많을 수록 도메인 변경에 리스크가 커지는 셈이니 도메인을 변경하고 싶으시다면 하루라도 빨리 진행하는 것이 이득입니다.\n많은 TLD 중에 .NET 을 선택한 이유 도메인 공급업체를 둘러보면 다양한 종류의 **TLD(Top-level domain, 최상위 도메인)**를 확인할 수 있는데, 그 중에서 어떤 도메인을 고르는 것이 좋을지에 대한 부분도 고려사항이었습니다. 저는 그중에서 .NET 을 선택했는데 그 이유는 다음과 같습니다.\n 많은 사람들이 알고 있는 익숙한 TLD 연간 갱신료가 들쭉날쭉하지 않고, 부담없는 금액일 것  그리고 선택 과정에서 .kim(성씨 김) .co(콜롬비아, 회사) .kr(한국) .io(British Indian Ocean Territory, Input-Output) .dev(개발) .me(몬테그로, 나) 등 특별한 의미가 있거나 간결한 도메인을 비교대상으로 두었는데 개인적으로 아래와 같은 이유들 중에 하나로 선택을 포기하였습니다.\n 상대적으로 비싼 임대료 국가 도메인의 경우 정책 변경에 따라 도메인 회수 위험 존재 또한, 국가 도메인의 경우 검색엔진에서 특정 국가에서만 표출되는 경향이 있음 위험한 도메인으로 취급 되는 문제  .com .net .co.kr 같은 도메인은 인터넷을 이용하시는 일반인 분들에게 아주 친숙하고 기억하기 쉽지만 그밖의 도메인의 경우 신박하게 느껴질 수도 있지만 반대로 거부감을 느끼게 할 수도 있다고 생각했습니다. 그중 일부 도메인의 경우 불법 사이트들이 선호함에 따라 도메인 자체가 위험하다고 분류되는 경우도 있어 익숙한 도메인을 선택하겠다는 생각을 더욱 확고하게 느꼈습니다.\n그리고 국가 도메인의 경우 국가 정책 따라서 무료로 이용할 수 있기도하고 예고없이 회수처리되기도 하는데 이러한 변수들 때문에 불안함을 느껴 선택을 피하였습니다. 모든 국가 도메인이 그러한 것은 아니지만 선택하실 때 이력 등을 확인하실 것을 추천드립니다. 또한, 국가 도메인이 지정된 사이트는 포털에서 해당 국가 IP 이용자에게만 주로 노출된다는 내용도 있기 때문에 해외 방문객의 유입이 필요한 경우라면 이 경우도 고려해야할 사항이 될 수 있습니다.\n가격적인 부분도 무시할 수 없었는데, .com .net 도메인의 경우 년간 1만원 내외로 신청/유지가 가능하지만 다른 도메인의 경우 최초 1년간은 저렴하지만 갱신시 3~8만원 전후로 가격이 형성되어 있는 경우가 꽤 있었습니다. 전문적인 사이트라면 도메인이 가지는 가격부담이 크진 않겠지만 개인적인 용도로는 유지비용이 저렴한 쪽을 선택할 수 밖에 없었습니다.\n결국 이러한 고려사항을 만족시켜줄 수 있는 도메인으로 .com 과 .net 도메인을 추려냈지만 .com 도메인의 경우 이미 누군가가 reselling의 목적으로 선점하고 있었기에 부득이 .net 도메인을 선택하게 되었습니다. 아직까지도 눈에 아른거리는 .com 도메인\u0026hellip; ㅠ\n선택사항 - 무료 도메인 테스트 Freenom - A Name for Everyone\n테스트용으로 사용하거나 애드센스 신속 승인을 위한 용도로 사용할 무료 도메인이 필요하다면 위의 사이트를 이용해볼 수 있습니다. Freenom 에서는 .tk .ml .ga .cf .gq 총 다섯개의 매력적인 1차 도메인을 무료로 제공하고 있습니다. 사실 도메인에 관심을 가지게 된 것도 이 사이트를 발견했던 영향이 컸습니다. 마음에 드는 도메인을 1년간 무료로 이용할 수 있으며 만기가 도래했을 때 일정 기간 안에 갱신한다면 계속해서 무료로 사용 할 수 있습니다. 다만, Reddit 등의 해외 사이트 리뷰에 따르면 적지않은 수의 사람들이 Freenom 무료 도메인을 사용하다 예고없이 도메인을 빼앗기는 사례가 있기 때문에 어디까지나 테스트 용도로만 활용하고 중요한 사이트에는 사용을 자제하는 것이 좋을 것으로 보입니다. 그래도 꼭 위의 다섯개 TLD(Top-level domain)를 이용하고 싶다면 유료로 구매하는 편이 안전하다고 하니 참고하시기 바랍니다.\n사이트에서 간단히 원하는 도메인을 검색하면 위와 같이 사용가능여부가 표시되고 \u0026lsquo;Get it now!\u0026rsquo; 버튼을 클릭해 무료로 구매가 가능합니다.\nporkbun.com 에서 도메인 구매하기 porkbun.com | An oddly satisfying experience.\n 저렴하다 국내외에 불만족스러운 평이 없다  도메인 등록업체는 굉장히 많은데 porkbun을 고른 이유는 바로 저렴한 가격 때문입니다. .net 도메인의 경우 구매시점에 첫 해는 5.95달러였고 이후 1년 연장시마다 10.56달러 정도로 검색해본 사이트 중에는 가장 저렴했습니다. 검색 능력이나 시기에 따라 좀 더 저렴한 사이트를 찾으실 수도 있으니 여러 곳을 비교해보시는 것을 추천드리며 이 과정이 번거로우 시다면 porkbun도 고려해보실 것을 권해드립니다. 저렴함 외에도 깔끔하고 해외 서버 치고는 빠른 응답속도에 메일 포워딩 기능도 기본으로 제공하고 있습니다. 이밖에도 godaddy, 가비아, namecheap 등 다른 유명한 업체들이 있습니다.\n사실 가격 말고는 크게 고민할 필요가 없었던 게 네임서버는 cloudflare, lightsail, dnszi 같은 서비스를 선택하여 무료로 이용할 수 있기 때문에 네임서버 반응이 느리다던가 하는 부분은 큰 문제가 되지 않았고, 도메인에 대해서 전혀 무지했을 때 (물론 지금도 자세히는 모르지만) 들었던 걱정이 \u0026lsquo;내가 도메인을 구매한 업체가 망하면 내 도메인도 소멸하는건가?\u0026rsquo; 하는 부분이었는데 이 경우에도 다른 도메인 등록업체로 넘어가서 계속 서비스 된다고 하니 안심할 수 있었습니다.\n단, 아무리 가격이 저렴하더라도 아래의 trustpilot 이나 레딧, 국내 포럼 등에서 특별히 평점이 나쁜 사이트는 배제하는 것이 여러모로 낫습니다.\nPorkbun is rated \u0026ldquo;Excellent\u0026rdquo; with 4.8 / 5 on Trustpilot\n도메인 구매는 각 사이트에서 희망하는 도메인을 검색한 후 회원가입, 결제만 거치면 되는 매우 단순한 과정으로 생략하였습니다. 여기서 주의할 점은 이메일주소로 보통 도메인에 대한 정보나 로그인 내역, 갱신 알림 등이 오기 때문에 임의 입력이나 자주사용하지 않는 메일주소를 사용할 경우 불편하실 수 있습니다.\ncloudflare.com 네임서버 활용하기 Cloudflare - The Web Performance \u0026amp; Security Company | Cloudflare\n 빠르다, 일단 빠르다 무료 플랜이 존재한다  cloudflare는 DNS 서비스 뿐만아니라 CDN, 디도스 방어 등의 기능을 제공하고 있고, 무료로도 꽤나 많은 부분들을 지원해주고 있습니다. 자세한 지식은 없어 간단히 이해한 바를 설명하자면 구매한 도메인과 티스토리 주소나 아이피 등을 연결해주는 기능뿐 아니라 사이트 안정화나 보안 등의 요소들도 서비스 하고 있으며 이중의 일부는 무료 플랜에서도 사용할 수 있다고 생각하면 될 것 같습니다.\ncloudflare를 생각하면 일단 빠르다는 점이 떠오르는데, 네임서버 반응 뿐만 아니라 하위 도메인을 세팅하고 레코드를 입력하는 등 DNS 설정 변경도 다른 곳에 비해 적용되는 시간이 매우 빨랐습니다. 그런데 이런 기능을 무료로 사용할 수 있다니 사용하지 않을 이유가 없었습니다.\n그래서 우선 티스토리에 구매한 도메인을 연결하기 위해서는 DNS 설정을 해주어야 하는데, 복잡한 내용은 저도 잘 모르니 간단하게 딱 세가지 용어 정도만 알면 됩니다. Name Server 와 A, CNAME 레코드 이 세가지인데, 간단하게 설명하자면 이렇습니다.\n Name Server : 구매한 도메인주소와 내가 원하는 주소를 중계해줄 서버. 설정 된 네임서버에서 매칭되는 주소의 내용을 반환한다. A : IP 주소와 내 도메인을 연결할 때 사용하는 레코드. CNAME : 일반 웹 주소 형식과 내 도메인을 연결할 때 사용하는 레코드.  cloudflare 사이트 가입을 마치고 로그인을 하면 상단에 \u0026lsquo;사이트 추가\u0026rsquo; 라는 항목이 있는데 여기서 구매한 도메인을 입력하여 추가해줍니다. 요금제는 하단에 무료 플랜으로 선택해주면 됩니다. 일반인이 사용하기엔 무료 서비스만 해도 아주 훌륭하고 충분한 서비스를 제공 받을 수 있습니다.\n땅파서 장사하는 것 같은 느낌의 무료 플랜\n사이트 등록을 마치면 네임서버를 두개 부여받게 되는데 이 네임서버를 도메인을 구매한 사이트 설정에서 등록하는 과정을 진행하여 줍니다.\n네임서버는 반드시 두개 모두 등록해준다.\n대부분의 도메인 등록업체에서 자체 네임서버를 운영하고 있기 때문에 기본 네임서버가 이미 지정되어 있을텐데, cloudflare를 이용하기 위해서는 기존값을 지우고 cloudflare의 네임서버로 변경해주면 됩니다. 또는 cloudflare 네임서버를 상위에 두고 나머지 네임서버를 하위에 작성하면 cloudflare dns 서비스가 뻗으면 도메인 제공 업체의 dns로 자동으로 전환하여 사용이 가능하지만 꽤나 안정성으로 소문난듯하여 단독으로만 구성했습니다.\n도메인 제공업체의 네임서버를 모두 지우고 cloudflare 사의 네임서버만 남겨두었다.\n그리고 cloudflare 로 넘어와 티스토리와 연동을 위한 설정을 해주면 되는데, cloudflare는 루트도메인에도 CNAME 레코드 지정이 되기 때문에 A 레코드와 둘중에 취향껏 선택해주면 됩니다. 선택하기 어렵다면 아래 사진을 참고해 CNAME 레코드로 설정하시기 바랍니다. 여기서 주의할 점은 프록시 상태는 반드시 \u0026lsquo;dns 전용\u0026rsquo;으로 선택해야 한다는 점인데, 티스토리 블로그는 프록싱을 지원하지 않기 때문에 설정하게 되면 블로그가 올바르게 표시되지 않습니다. 그리고 루트 도메인을 블로그 연결 주소로 활용할 경우 www 하위 도메인도 같이 설정해주면 됩니다.\n루트 도메인 세팅 방법\n A 레코드 : 27.0.236.139 CNAME : blog.tistory.com  티스토리 블로그와 연동을 할 때 필요한 레코드 값은 위와 같습니다.\n만약에 티스토리 블로그를 루트 도메인이 아닌 \u0026lsquo;blog.내도메인.tld\u0026rsquo; 같이 하위 도메인에 연결하고자 한다면 아래와 같이 세팅하면 됩니다.\n하위 도메인 세팅 방법\n여기까지 완료했다면 DNS 설정은 모두 끝났습니다.\nDNS 설정 확인 DNS Checker - DNS Check Propagation Tool\n네임서버를 변경하고 도메인이 정상적으로 변경되기 까지는 길게는 24시간 정도가 소요된다고 합니다. 이러한 사항은 위 사이트를 방문해 구매한 도메인을 검색하여 아래처럼 티스토리 ip주소 또는 blog.tistory.com가 표시되는지를 통해 확인할 수 있습니다. 우측에 체크표시가 아니라 X 표시가 나오면 네임서버가 변경되는 과정이기 때문에 넉넉하게 하루정도 처리를 기다려주면 됩니다.\nDNS 설정 여부를 여러곳에서 확인이 가능하다.\n터미널이 익숙하시다면 아래 명령어로 확인도 가능합니다.\n# nslookup -type=ns 사이트 주소 nslookup -type=ns taedi.net 티스토리 개인 도메인 설정 블로그관리 \u0026gt; 관리 \u0026gt; 블로그 \u0026gt; 개인 도메인 설정에 구매한 도메인을 입력해주고 \u0026lsquo;변경사항 저장\u0026rsquo;을 클릭해줍니다.\n개인 도메인 설정, 구매한 도메인을 기입해주면 된다.\nhttps는 별도로 설정되지 않아서 불안했는데 정상적으로 등록이 완료되고 \u0026lsquo;보안 접속 인증서\u0026rsquo; 발급이 완료되면 자동으로 https로 개인 도메인이 설정됩니다.\n개인 도메인 설정 완료 화면\n여기까지가 완료되었다면 도메인 설정은 모두 끝났습니다. 다만, 저는 위의 화면을 바로 볼 수 없었고 아래와 같은 오류를 접하게 되었습니다.\n오류 관련 - 도메인의 설정 정보를 확인할 수 없습니다. DNS 서비스의 설정 정보를 다시 확인해주세요. 개인 도메인 설정 과정에서 발생한 오류\n티스토리 2차 도메인 설정을 시도했을 때 위와같은 오류가 계속 발생해 10시간 정도를 끙끙댔습니다. 구글 검색을 해봐도 같은 문제를 겪은 사람이 없어 너무 답답했는데 알고나니 별것 아닌 문제였습니다. 해결을 위한 시도 중 전혀 관계 없었던 것은 아래 사항이니 비슷한 문제를 겪으시는 분이 있다면 이런 시도는 안해보는 것이 좋을 것 같습니다.\n 다른 DNS 레코드 모두 삭제 cloudflare 추가기능 모두 비활성화  위의 시도들은 모두 오류와 관계 없었던 것을 몸소 테스트 해보았습니다. 그리고 아래는 꼭 확인해보셔야 할 사항입니다.\n cloudflare DNS 프록싱 비활성화 여부 확인 네임서버 변경 완료여부 확인  프록싱은 CDN 기능과 관련된 부분인데, 티스토리에서는 지원하지 않는다고 힙니다. 그러니 필히 비활성화하고 DNS 전용으로 설정해야합니다.\ntaedi  ~  nslookup -type=ns [taedi.net](http://taedi.net/) Server:\t210.220.163.82 Address:\t210.220.163.82#53 Non-authoritative answer: [taedi.net](http://taedi.net/)\tnameserver = [emerson.ns.cloudflare.com](http://emerson.ns.cloudflare.com/). [taedi.net](http://taedi.net/)\tnameserver = [kayleigh.ns.cloudflare.com](http://kayleigh.ns.cloudflare.com/). Authoritative answers can be found from: taedi  ~  nslookup -type=ns [taedi.net](http://taedi.net/) Server:\t210.220.163.82 Address:\t210.220.163.82#53 Non-authoritative answer: [taedi.net](http://taedi.net/)\tnameserver = [curitiba.porkbun.com](http://curitiba.porkbun.com/). [taedi.net](http://taedi.net/)\tnameserver = [maceio.porkbun.com](http://maceio.porkbun.com/). [taedi.net](http://taedi.net/)\tnameserver = [salvador.porkbun.com](http://salvador.porkbun.com/). [taedi.net](http://taedi.net/)\tnameserver = [fortaleza.porkbun.com](http://fortaleza.porkbun.com/). Authoritative answers can be found from: 그리고 네임서버 같은 경우에는 cloudflare 의 네임서버가 잘 표출되다가도 이따금씩 porkbun 의 네임서버로 변경되는 것을 뒤늦게서야 발견했습니다. 네임서버 변경과 도메인 등록이 채 완료되기도 전에 삽질을 계속했던 건데 이런 경우는 보통 24시간내에 네임서버 변경이 정상적으로 처리되니 느긋하게 기다리는게 최고인듯합니다. 하지만 성격이 급하기 때문에 방법을 찾아보았고 cloudflare 와 porkbun 양쪽모두 DNS 설정을 해주니 해결이 가능했습니다. 이 두가지 사항 정도만 확인한다면 같은 오류가 생겨도 충분히 해결하실 수 있습니다.\n생각보다 내용이 길어져 이후 검색엔진 사이트 재등록에 관한 부분과 문제사항들에 대한 블로그 스킨 수정 부분은 다음글로 나누어서 작성하도록 하겠습니다.\n","date":"March 5, 2021","hero":"/images/default-hero.svg","permalink":"https://log.taedi.net/tistory-blog-setting/","summary":"※ 티스토리 블로그에 작성했던 내용을 옮겨왔습니다.\n얼마 전 블로그 주소를 tae-di.tistory.com 에서 taedi.net 으로 변경하였습니다. 도메인 변경을 진행하기 전 여러 후기에서 티스토리 블로그 2차 도메인 등록 시 발생하는 많은 문제점에 대한 부분을 확인 하였지만 이같은 결정을 하게 된 것은 그만큼의 메리트가 있었기 때문입니다. 티스토리 블로그 2차 도메인(개인 도메인)이 주는 기대효과와 이를 위해 감수해야하는 단점, 그리고 도메인 등록방법과 문제점들을 어느 정도 해소하기 위한 설정 방법들을 공유하고자 글을 남기게 되었습니다.\n장점 - 개인 도메인을 구매한 동기 물론 가장 큰 목적은 \u0026lsquo;갖고싶어서\u0026rsquo; 였습니다.","tags":["blog","dns","tistory"],"title":"티스토리 개인 도메인 구매 및 활용하기 - #1 구매동기, DNS설정, 오류해결"}]